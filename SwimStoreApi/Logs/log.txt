 G Application Starting Up!
 G HTTP "GET" "/" responded 200 in 22.1047 ms
08/24/2022 07:41:20 Application Starting Up!
08/24/2022 07:41:21 HTTP "GET" "/" responded 200 in 19.0800 ms
08/24/2022 07:43:53 Application Starting Up!
08/24/2022 07:43:54 HTTP "GET" "/" responded 200 in 20.5696 ms
08/24/2022 08:37:24 Application Starting Up!
08/24/2022 08:37:24 HTTP "GET" "/" responded 200 in 19.6300 ms
08/24/2022 09:31:09 Application Starting Up!
08/24/2022 09:31:09 HTTP "GET" "/" responded 200 in 19.0850 ms
08/24/2022 09:31:44 HTTP "POST" "/graphql" responded 200 in 599.9970 ms
08/24/2022 09:32:41 Application Starting Up!
08/24/2022 09:32:42 HTTP "GET" "/" responded 200 in 18.3406 ms
08/24/2022 09:33:02 Application Starting Up!
08/24/2022 09:33:03 HTTP "GET" "/" responded 200 in 22.1983 ms
08/24/2022 10:01:43 Application Starting Up!
08/24/2022 10:01:43 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:01:53 Application Starting Up!
08/24/2022 10:01:53 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:02:04 Application Starting Up!
08/24/2022 10:02:04 HTTP "GET" "/" responded 200 in 20.1238 ms
08/24/2022 10:03:08 Application Starting Up!
08/24/2022 10:03:09 HTTP "GET" "/" responded 200 in 21.3624 ms
08/24/2022 10:04:05 Application Starting Up!
08/24/2022 10:04:06 HTTP "GET" "/" responded 200 in 21.1222 ms
08/24/2022 10:07:49 Application Starting Up!
08/24/2022 10:07:49 HTTP "GET" "/" responded 200 in 20.5878 ms
08/24/2022 10:08:10 HTTP "POST" "/graphql" responded 500 in 5351.4754 ms
08/24/2022 10:09:10 Microsoft.AspNetCore.WebApplicationServiceCollection
08/24/2022 10:09:10 Application Starting Up!
08/24/2022 10:09:11 HTTP "GET" "/" responded 200 in 18.2176 ms
08/24/2022 10:09:38 System.Collections.Generic.List`1[Microsoft.Extensions.DependencyInjection.ServiceDescriptor]
08/24/2022 10:09:38 Application Starting Up!
08/24/2022 10:09:39 HTTP "GET" "/" responded 200 in 19.0370 ms
08/24/2022 10:16:03 Application Starting Up!
08/24/2022 10:16:04 HTTP "GET" "/" responded 200 in 21.3468 ms
08/24/2022 10:16:07 sf_product_get_all
08/24/2022 10:16:12 HTTP "POST" "/graphql" responded 500 in 5060.4435 ms
08/24/2022 10:16:51 Application Starting Up!
08/24/2022 10:16:51 HTTP "GET" "/" responded 200 in 23.2194 ms
08/24/2022 10:17:16 Application Starting Up!
08/24/2022 10:17:18 HTTP "GET" "/" responded 200 in 17.7439 ms
08/24/2022 10:17:22 Getting Product - In Query()
08/24/2022 10:17:22 sf_product_get_all
08/24/2022 10:17:27 HTTP "POST" "/graphql" responded 500 in 4861.2603 ms
08/24/2022 10:25:41 Application Starting Up!
08/24/2022 10:25:42 HTTP "GET" "/" responded 200 in 19.3244 ms
08/24/2022 10:25:48 sf_product_get_all
08/24/2022 10:25:53 HTTP "POST" "/graphql" responded 500 in 4840.5834 ms
08/24/2022 10:29:44 Application Starting Up!
08/24/2022 10:29:44 Application startup exception
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
08/24/2022 10:29:44 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:29:52 Application Starting Up!
08/24/2022 10:29:53 HTTP "GET" "/" responded 200 in 18.7213 ms
08/24/2022 10:31:27 HTTP "GET" "/" responded 200 in 18.4056 ms
08/24/2022 10:32:17 HTTP "GET" "/" responded 200 in 19.5416 ms
08/24/2022 10:32:22 sf_product_get_all
08/24/2022 10:32:26 HTTP "POST" "/graphql" responded 500 in 4843.7617 ms
08/24/2022 10:33:07 sf_product_get_all
08/24/2022 10:35:41 HTTP "GET" "/" responded 200 in 24.3228 ms
08/24/2022 10:35:51 sf_product_get_all
08/24/2022 10:43:08 HTTP "GET" "/" responded 200 in 25.2169 ms
08/24/2022 10:43:13 sf_product_get_all
08/24/2022 10:43:14 HTTP "POST" "/graphql" responded 200 in 1338.3783 ms
08/24/2022 10:44:39 HTTP "GET" "/" responded 200 in 19.8797 ms
08/24/2022 10:44:42 SELECT *FROM product
08/24/2022 10:44:43 HTTP "POST" "/graphql" responded 500 in 1011.5210 ms
08/24/2022 10:45:00 HTTP "GET" "/" responded 200 in 19.6857 ms
08/24/2022 10:45:05 SELECT * FROM product
08/24/2022 10:45:05 HTTP "POST" "/graphql" responded 500 in 993.2995 ms
08/24/2022 10:45:19 SELECT * FROM product
08/24/2022 10:45:19 HTTP "POST" "/graphql" responded 500 in 33.7598 ms
08/24/2022 10:45:28 SELECT * FROM product;
08/24/2022 10:45:28 HTTP "POST" "/graphql" responded 500 in 36.2530 ms
08/24/2022 10:56:33 HTTP "GET" "/" responded 200 in 23.6356 ms
08/24/2022 10:56:39 SELECT * FROM product
08/24/2022 10:56:40 HTTP "POST" "/graphql" responded 200 in 962.3569 ms
08/24/2022 10:57:08 HTTP "GET" "/" responded 200 in 18.1487 ms
08/24/2022 10:57:11 SELECT * FROM product
08/24/2022 10:57:11 HTTP "POST" "/graphql" responded 500 in 1065.5438 ms
08/24/2022 10:57:12 SELECT * FROM product
08/24/2022 10:57:12 HTTP "POST" "/graphql" responded 500 in 34.1831 ms
08/24/2022 10:59:54 HTTP "GET" "/" responded 200 in 31.4799 ms
08/24/2022 10:59:57 SELECT * 
					        FROM product
08/24/2022 10:59:58 HTTP "POST" "/graphql" responded 500 in 953.1066 ms
08/24/2022 11:01:17 HTTP "GET" "/" responded 200 in 20.4297 ms
08/24/2022 11:01:30 SELECT * 
					        FROM product
08/24/2022 11:01:31 HTTP "POST" "/graphql" responded 500 in 933.5284 ms
08/24/2022 11:02:00 HTTP "GET" "/" responded 200 in 22.1025 ms
08/24/2022 11:02:07 
08/24/2022 11:02:08 HTTP "POST" "/graphql" responded 500 in 923.3443 ms
08/24/2022 11:02:14 
08/24/2022 11:02:14 HTTP "POST" "/graphql" responded 500 in 65.2945 ms
08/24/2022 11:02:31 product
08/24/2022 11:02:31 HTTP "POST" "/graphql" responded 500 in 68.2036 ms
08/24/2022 11:07:37 HTTP "GET" "/" responded 200 in 19.3088 ms
08/24/2022 11:07:41 product
08/24/2022 11:07:41 HTTP "POST" "/graphql" responded 500 in 967.2119 ms
08/24/2022 11:07:42 product
08/24/2022 11:07:42 HTTP "POST" "/graphql" responded 500 in 33.5694 ms
08/24/2022 11:07:44 product
08/24/2022 11:07:44 HTTP "POST" "/graphql" responded 500 in 38.2334 ms
08/24/2022 11:08:03 SELECT * 
							FROM product
08/24/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 60.0180 ms
08/24/2022 11:19:59 HTTP "GET" "/" responded 200 in 19.5742 ms
08/24/2022 11:20:02 "SELECT * 
							FROM product"
08/24/2022 11:20:03 HTTP "POST" "/graphql" responded 500 in 971.3828 ms
08/24/2022 11:22:24 HTTP "GET" "/" responded 200 in 19.2989 ms
08/24/2022 11:22:29 "SELECT * FROM product"
08/24/2022 11:22:29 HTTP "POST" "/graphql" responded 500 in 961.9201 ms
08/24/2022 11:22:43 "SELECT * 
FROM product"
08/24/2022 11:22:43 HTTP "POST" "/graphql" responded 500 in 33.4582 ms
08/24/2022 11:25:21 HTTP "GET" "/" responded 200 in 23.6300 ms
08/24/2022 11:25:25 "
SELECT *
                            FROM product"
08/24/2022 11:25:25 HTTP "POST" "/graphql" responded 500 in 978.3579 ms
08/24/2022 11:29:39 SQL: 
 "SELECT * 
FROM product"
08/24/2022 11:29:40 HTTP "POST" "/graphql" responded 500 in 40.5551 ms
08/24/2022 11:29:52 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:29:53 HTTP "POST" "/graphql" responded 500 in 44.0350 ms
08/24/2022 11:30:21 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:21 HTTP "POST" "/graphql" responded 500 in 30.0045 ms
08/24/2022 11:30:22 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:22 HTTP "POST" "/graphql" responded 500 in 41.6641 ms
08/24/2022 11:30:32 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:32 HTTP "POST" "/graphql" responded 200 in 91.6591 ms
08/24/2022 12:28:28 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:28 HTTP "POST" "/graphql" responded 200 in 39.3037 ms
08/24/2022 12:28:30 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:30 HTTP "POST" "/graphql" responded 200 in 4.3164 ms
08/24/2022 12:28:31 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:31 HTTP "POST" "/graphql" responded 200 in 4.3330 ms
08/24/2022 12:44:26 HTTP "GET" "/" responded 200 in 24.8644 ms
08/24/2022 12:44:29 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:29 HTTP "POST" "/graphql" responded 200 in 1021.2759 ms
08/24/2022 12:44:31 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:31 HTTP "POST" "/graphql" responded 200 in 8.1013 ms
08/24/2022 12:44:32 HTTP "POST" "/graphql" responded 200 in 47.5288 ms
08/24/2022 12:44:34 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:34 HTTP "POST" "/graphql" responded 200 in 26.8873 ms
08/24/2022 12:44:40 HTTP "POST" "/graphql" responded 200 in 1.0679 ms
08/24/2022 12:44:42 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:42 HTTP "POST" "/graphql" responded 200 in 4.3590 ms
08/24/2022 12:44:43 HTTP "POST" "/graphql" responded 200 in 0.7794 ms
08/24/2022 12:44:44 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:44 HTTP "POST" "/graphql" responded 200 in 8.1220 ms
08/24/2022 12:44:45 HTTP "POST" "/graphql" responded 200 in 0.8424 ms
08/24/2022 12:44:48 HTTP "POST" "/graphql" responded 200 in 0.7891 ms
08/25/2022 13:27:34 HTTP "GET" "/" responded 200 in 27.9066 ms
08/25/2022 13:27:43 HTTP "POST" "/graphql" responded 200 in 596.8577 ms
08/25/2022 13:27:43 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:27:47 HTTP "POST" "/graphql" responded 500 in 4548.8667 ms
08/25/2022 13:27:49 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:27:53 HTTP "POST" "/graphql" responded 500 in 4134.5164 ms
08/25/2022 13:29:47 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:29:48 HTTP "POST" "/graphql" responded 200 in 430.9617 ms
08/25/2022 13:47:17 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:17 HTTP "POST" "/graphql" responded 200 in 1040.5982 ms
08/25/2022 13:47:19 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:19 HTTP "POST" "/graphql" responded 200 in 7.6769 ms
08/25/2022 13:47:23 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:23 HTTP "POST" "/graphql" responded 200 in 4.5361 ms
08/25/2022 13:52:41 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:52:42 HTTP "POST" "/graphql" responded 200 in 982.1267 ms
08/25/2022 13:52:45 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:52:45 HTTP "POST" "/graphql" responded 200 in 7.9882 ms
08/25/2022 14:11:29 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:29 HTTP "POST" "/graphql" responded 200 in 964.9291 ms
08/25/2022 14:11:34 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:34 HTTP "POST" "/graphql" responded 200 in 38.1608 ms
08/25/2022 14:11:41 HTTP "POST" "/graphql" responded 200 in 52.8538 ms
08/25/2022 14:11:42 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:42 HTTP "POST" "/graphql" responded 200 in 26.1659 ms
08/25/2022 14:11:47 HTTP "POST" "/graphql" responded 200 in 1.0498 ms
08/25/2022 14:11:48 HTTP "POST" "/graphql" responded 200 in 0.7449 ms
08/25/2022 14:11:50 HTTP "POST" "/graphql" responded 200 in 1.0522 ms
08/25/2022 14:15:40 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:40 HTTP "POST" "/graphql" responded 200 in 1066.9206 ms
08/25/2022 14:15:45 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:45 HTTP "POST" "/graphql" responded 200 in 9.0637 ms
08/25/2022 14:15:56 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:56 HTTP "POST" "/graphql" responded 200 in 5.2609 ms
08/25/2022 14:15:57 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:57 HTTP "POST" "/graphql" responded 200 in 3.9194 ms
08/25/2022 14:16:00 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:00 HTTP "POST" "/graphql" responded 200 in 4.6391 ms
08/25/2022 14:16:01 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:01 HTTP "POST" "/graphql" responded 200 in 4.3101 ms
08/25/2022 14:16:15 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:15 HTTP "POST" "/graphql" responded 200 in 971.5449 ms
08/25/2022 14:16:17 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:17 HTTP "POST" "/graphql" responded 200 in 7.9383 ms
08/25/2022 14:16:53 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:54 HTTP "POST" "/graphql" responded 200 in 1092.2367 ms
08/25/2022 14:16:55 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:55 HTTP "POST" "/graphql" responded 200 in 8.2452 ms
08/25/2022 14:33:10 HTTP "POST" "/graphql" responded 200 in 625.1890 ms
08/25/2022 14:33:11 SQL: 
"SELECT * 
FROM product
Where brand = {brand}"
08/25/2022 14:33:12 HTTP "POST" "/graphql" responded 500 in 476.2578 ms
08/25/2022 14:35:19 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:19 HTTP "POST" "/graphql" responded 200 in 75.6676 ms
08/25/2022 14:35:21 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:21 HTTP "POST" "/graphql" responded 200 in 4.2832 ms
08/25/2022 14:35:23 HTTP "POST" "/graphql" responded 200 in 1.2090 ms
08/25/2022 14:35:24 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:24 HTTP "POST" "/graphql" responded 200 in 13.3846 ms
08/25/2022 14:35:25 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:25 HTTP "POST" "/graphql" responded 200 in 3.7776 ms
08/25/2022 14:35:26 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:26 HTTP "POST" "/graphql" responded 200 in 4.3138 ms
08/25/2022 14:35:27 HTTP "POST" "/graphql" responded 200 in 0.8269 ms
08/25/2022 14:50:57 HTTP "POST" "/graphql" responded 200 in 957.9485 ms
08/25/2022 14:51:05 HTTP "POST" "/graphql" responded 200 in 7.2780 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.9968 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3372 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3412 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.2109 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3238 ms
08/25/2022 14:51:07 HTTP "POST" "/graphql" responded 200 in 3.5281 ms
08/25/2022 14:51:07 HTTP "POST" "/graphql" responded 200 in 2.8210 ms
08/25/2022 14:51:10 HTTP "POST" "/graphql" responded 200 in 48.5104 ms
08/25/2022 14:51:11 HTTP "POST" "/graphql" responded 200 in 3.3945 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 2.7546 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 2.9713 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 3.1718 ms
08/25/2022 14:51:13 HTTP "POST" "/graphql" responded 200 in 2.7712 ms
08/25/2022 14:51:13 HTTP "POST" "/graphql" responded 200 in 2.9452 ms
08/25/2022 14:51:15 HTTP "POST" "/graphql" responded 200 in 3.3103 ms
08/25/2022 14:52:29 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:29 HTTP "POST" "/graphql" responded 200 in 987.2373 ms
08/25/2022 14:52:37 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:37 HTTP "POST" "/graphql" responded 200 in 8.5888 ms
08/25/2022 14:52:39 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:39 HTTP "POST" "/graphql" responded 200 in 4.8238 ms
08/25/2022 14:53:04 ====== Postgres Call -> Stored Function ======
		"sf_product_get_all"
08/25/2022 14:53:04 HTTP "POST" "/graphql" responded 200 in 991.1210 ms
08/25/2022 14:53:26 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 14:53:27 HTTP "POST" "/graphql" responded 200 in 996.3529 ms
08/25/2022 14:54:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 14:54:15 HTTP "POST" "/graphql" responded 200 in 1038.5308 ms
08/25/2022 16:26:54 HTTP "POST" "/graphql" responded 200 in 625.6003 ms
08/25/2022 16:26:54 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:26:55 HTTP "POST" "/graphql" responded 200 in 455.0724 ms
08/25/2022 16:26:56 HTTP "POST" "/graphql" responded 200 in 1.9149 ms
08/25/2022 16:26:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:26:57 HTTP "POST" "/graphql" responded 200 in 27.7118 ms
08/25/2022 16:26:59 HTTP "POST" "/graphql" responded 200 in 0.8519 ms
08/25/2022 16:27:14 HTTP "POST" "/graphql" responded 200 in 0.9752 ms
08/25/2022 16:27:28 HTTP "POST" "/graphql" responded 200 in 0.7660 ms
08/25/2022 16:27:32 HTTP "POST" "/graphql" responded 200 in 1.1854 ms
08/25/2022 16:27:36 HTTP "POST" "/graphql" responded 200 in 0.9049 ms
08/25/2022 16:28:58 HTTP "GET" "/graphql-voyager" responded 404 in 0.0309 ms
08/25/2022 16:32:49 HTTP "POST" "/graphql" responded 200 in 619.5005 ms
08/25/2022 16:32:52 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:32:52 HTTP "POST" "/graphql" responded 200 in 382.4042 ms
08/25/2022 16:33:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:33:58 HTTP "POST" "/graphql" responded 200 in 7.9051 ms
08/25/2022 16:34:01 HTTP "POST" "/graphql" responded 200 in 1.0318 ms
08/25/2022 16:34:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:02 HTTP "POST" "/graphql" responded 200 in 3.9455 ms
08/25/2022 16:34:04 HTTP "POST" "/graphql" responded 200 in 0.7846 ms
08/25/2022 16:34:05 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:05 HTTP "POST" "/graphql" responded 200 in 22.2866 ms
08/25/2022 16:34:08 HTTP "POST" "/graphql" responded 200 in 0.7596 ms
08/25/2022 16:34:09 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:09 HTTP "POST" "/graphql" responded 200 in 4.0992 ms
08/25/2022 16:37:30 HTTP "GET" "/graphql-voyager" responded 200 in 101.5100 ms
08/25/2022 16:37:31 HTTP "POST" "/graphql" responded 200 in 648.2033 ms
08/25/2022 16:39:05 HTTP "GET" "/graphql-voyager" responded 200 in 66.0717 ms
08/25/2022 16:39:06 HTTP "POST" "/graphql" responded 200 in 648.3458 ms
08/25/2022 16:39:45 HTTP "POST" "/graphql" responded 200 in 6.2942 ms
08/25/2022 16:39:46 HTTP "POST" "/graphql" responded 200 in 2.8205 ms
08/25/2022 18:08:04 HTTP "POST" "/graphql" responded 200 in 675.1871 ms
08/25/2022 18:08:07 HTTP "POST" "/graphql" responded 200 in 1.6886 ms
08/25/2022 18:08:08 HTTP "POST" "/graphql" responded 200 in 2.1443 ms
08/25/2022 18:08:10 HTTP "POST" "/graphql" responded 200 in 0.8320 ms
08/25/2022 18:08:11 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:16 HTTP "POST" "/graphql" responded 500 in 4586.2233 ms
08/25/2022 18:08:19 HTTP "POST" "/graphql" responded 200 in 4080.6926 ms
08/25/2022 18:08:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:58 HTTP "POST" "/graphql" responded 200 in 374.1224 ms
08/25/2022 18:09:09 HTTP "POST" "/graphql" responded 200 in 1.0114 ms
08/25/2022 18:09:11 HTTP "POST" "/graphql" responded 200 in 1.0633 ms
08/25/2022 18:09:33 HTTP "GET" "/graphql-voyager" responded 200 in 77.2143 ms
08/25/2022 18:09:33 HTTP "POST" "/graphql" responded 200 in 1.3252 ms
08/25/2022 18:09:33 HTTP "GET" "/favicon.ico" responded 404 in 0.0618 ms
08/25/2022 18:12:09 HTTP "GET" "/graphql-voyager" responded 200 in 130.4715 ms
08/25/2022 18:12:10 HTTP "POST" "/graphql" responded 200 in 669.9622 ms
08/25/2022 18:19:55 HTTP "POST" "/graphql" responded 500 in 148.3774 ms
08/25/2022 18:22:33 HTTP "POST" "/graphql" responded 500 in 611.2510 ms
08/25/2022 18:22:35 HTTP "POST" "/graphql" responded 500 in 1.7959 ms
08/25/2022 18:22:37 HTTP "POST" "/graphql" responded 500 in 1.7800 ms
08/25/2022 18:22:45 HTTP "POST" "/graphql" responded 500 in 0.7732 ms
08/25/2022 18:23:44 HTTP "POST" "/graphql" responded 200 in 609.6548 ms
08/25/2022 18:23:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:45 HTTP "POST" "/graphql" responded 200 in 556.6983 ms
08/25/2022 18:23:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:46 HTTP "POST" "/graphql" responded 200 in 8.5113 ms
08/25/2022 18:23:47 HTTP "POST" "/graphql" responded 200 in 1.1425 ms
08/25/2022 18:23:48 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:48 HTTP "POST" "/graphql" responded 200 in 4.1988 ms
08/25/2022 18:23:49 HTTP "POST" "/graphql" responded 200 in 0.8951 ms
08/25/2022 18:23:50 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:50 HTTP "POST" "/graphql" responded 200 in 26.9644 ms
08/25/2022 18:23:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:58 HTTP "POST" "/graphql" responded 200 in 4.8842 ms
08/25/2022 18:24:34 HTTP "POST" "/graphql" responded 200 in 0.8100 ms
08/25/2022 18:24:35 HTTP "POST" "/graphql" responded 500 in 30.1779 ms
08/25/2022 18:25:50 HTTP "POST" "/graphql" responded 200 in 620.9402 ms
08/25/2022 18:25:50 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:25:51 HTTP "POST" "/graphql" responded 200 in 380.8893 ms
08/25/2022 18:25:53 HTTP "POST" "/graphql" responded 200 in 2.3020 ms
08/25/2022 18:25:54 HTTP "POST" "/graphql" responded 200 in 0.9510 ms
08/25/2022 18:25:59 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:25:59 HTTP "POST" "/graphql" responded 200 in 25.7345 ms
08/25/2022 18:26:01 HTTP "POST" "/graphql" responded 200 in 1.2998 ms
08/25/2022 18:26:08 ====== Postgres Call -> SQL ======
	"INSERT INTO product(name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:26:08 HTTP "POST" "/graphql" responded 500 in 6549.9400 ms
08/25/2022 18:27:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product(name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:27:48 HTTP "POST" "/graphql" responded 500 in 45.3235 ms
08/25/2022 18:28:24 HTTP "POST" "/graphql" responded 200 in 611.9720 ms
08/25/2022 18:28:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:28:24 HTTP "POST" "/graphql" responded 200 in 379.7459 ms
08/25/2022 18:28:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:28:45 HTTP "POST" "/graphql" responded 200 in 8.2010 ms
08/25/2022 18:28:46 HTTP "POST" "/graphql" responded 200 in 0.9536 ms
08/25/2022 18:28:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:28:47 HTTP "POST" "/graphql" responded 500 in 116.1132 ms
08/25/2022 18:29:06 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:29:20 HTTP "POST" "/graphql" responded 500 in 22740.9618 ms
08/25/2022 18:29:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:45:40 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:45:41 HTTP "POST" "/graphql" responded 500 in 5331.6570 ms
08/25/2022 18:46:33 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:46:33 HTTP "POST" "/graphql" responded 500 in 747.2145 ms
08/25/2022 18:46:40 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:46:40 HTTP "POST" "/graphql" responded 500 in 52.8246 ms
08/25/2022 18:47:05 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:47:16 HTTP "POST" "/graphql" responded 500 in 17012.8669 ms
08/25/2022 18:47:20 HTTP "POST" "/graphql" responded 200 in 39.7964 ms
08/25/2022 18:47:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:21 HTTP "POST" "/graphql" responded 200 in 347.9557 ms
08/25/2022 18:47:23 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:23 HTTP "POST" "/graphql" responded 200 in 6.9458 ms
08/25/2022 18:47:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:24 HTTP "POST" "/graphql" responded 200 in 3.4823 ms
08/25/2022 18:47:34 HTTP "POST" "/graphql" responded 200 in 1.0256 ms
08/25/2022 18:48:04 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:50:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:50:25 HTTP "POST" "/graphql" responded 200 in 954.0186 ms
08/25/2022 18:50:30 HTTP "POST" "/graphql" responded 200 in 80.3832 ms
08/25/2022 18:50:31 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:50:31 HTTP "POST" "/graphql" responded 200 in 25.3695 ms
08/25/2022 18:50:35 HTTP "POST" "/graphql" responded 200 in 1.4703 ms
08/25/2022 18:50:44 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:52:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:25 HTTP "POST" "/graphql" responded 200 in 639.5585 ms
08/25/2022 18:52:25 HTTP "POST" "/graphql" responded 200 in 410.8815 ms
08/25/2022 18:52:31 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:31 HTTP "POST" "/graphql" responded 200 in 8.0798 ms
08/25/2022 18:52:34 HTTP "POST" "/graphql" responded 200 in 0.9985 ms
08/25/2022 18:52:34 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:34 HTTP "POST" "/graphql" responded 200 in 3.9263 ms
08/25/2022 18:52:40 HTTP "POST" "/graphql" responded 200 in 0.8912 ms
08/25/2022 18:52:43 HTTP "POST" "/graphql" responded 200 in 0.8804 ms
08/25/2022 18:52:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:46 HTTP "POST" "/graphql" responded 200 in 3.9800 ms
08/25/2022 18:52:49 HTTP "POST" "/graphql" responded 200 in 0.8563 ms
08/25/2022 18:52:53 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:53:42 Format of the initialization string does not conform to specification starting at index 0.
08/25/2022 18:53:43 HTTP "POST" "/graphql" responded 500 in 52921.5026 ms
08/25/2022 18:55:35 HTTP "POST" "/graphql" responded 200 in 622.6155 ms
08/25/2022 18:55:35 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:55:35 HTTP "POST" "/graphql" responded 200 in 374.7051 ms
08/25/2022 18:55:37 HTTP "POST" "/graphql" responded 200 in 2.0431 ms
08/25/2022 18:55:42 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:56:20 23505: duplicate key value violates unique constraint "product_pkey"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
08/25/2022 18:56:20 HTTP "POST" "/graphql" responded 500 in 42302.0389 ms
08/25/2022 19:05:02 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:05:23 HTTP "POST" "/graphql" responded 500 in 21300.4109 ms
08/25/2022 19:05:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:05:47 HTTP "POST" "/graphql" responded 500 in 1079.4120 ms
08/25/2022 19:06:24 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:06:24 HTTP "POST" "/graphql" responded 500 in 29.0458 ms
08/25/2022 19:08:01 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:08:01 HTTP "POST" "/graphql" responded 500 in 20.7919 ms
08/25/2022 19:09:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:09:35 HTTP "POST" "/graphql" responded 500 in 1040.1120 ms
08/25/2022 19:11:23 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:11:23 HTTP "POST" "/graphql" responded 500 in 30.5118 ms
08/25/2022 19:11:29 HTTP "POST" "/graphql" responded 200 in 39.8724 ms
08/25/2022 19:11:30 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:11:30 HTTP "POST" "/graphql" responded 200 in 31.2915 ms
08/25/2022 19:11:46 HTTP "POST" "/graphql" responded 200 in 1.4716 ms
08/25/2022 19:13:03 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:14:11 HTTP "POST" "/graphql" responded 500 in 84179.2029 ms
08/25/2022 19:15:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:15:39 HTTP "POST" "/graphql" responded 500 in 12993.2738 ms
08/25/2022 19:18:10 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:18:26 HTTP "POST" "/graphql" responded 500 in 24232.3318 ms
08/25/2022 19:20:35 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:20:56 HTTP "POST" "/graphql" responded 500 in 20795.1529 ms
08/25/2022 19:21:48 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:21:56 HTTP "POST" "/graphql" responded 200 in 8344.6707 ms
08/25/2022 19:27:53 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:53 HTTP "POST" "/graphql" responded 200 in 977.4108 ms
08/25/2022 19:27:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:57 HTTP "POST" "/graphql" responded 200 in 7.6635 ms
08/25/2022 19:27:59 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:59 HTTP "POST" "/graphql" responded 200 in 6.3289 ms
08/25/2022 19:28:09 HTTP "POST" "/graphql" responded 200 in 59.2412 ms
08/25/2022 19:28:50 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:28:50 HTTP "POST" "/graphql" responded 200 in 85.2548 ms
08/25/2022 19:28:52 HTTP "POST" "/graphql" responded 200 in 1.0310 ms
08/25/2022 19:28:53 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:28:53 HTTP "POST" "/graphql" responded 200 in 4.1186 ms
08/25/2022 19:36:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:36:03 HTTP "POST" "/graphql" responded 200 in 966.9424 ms
08/25/2022 20:38:30 HTTP "POST" "/graphql" responded 200 in 669.2980 ms
08/25/2022 20:38:32 HTTP "POST" "/graphql" responded 200 in 2.0352 ms
08/25/2022 20:38:42 HTTP "POST" "/graphql" responded 200 in 2.2908 ms
08/25/2022 20:38:45 HTTP "POST" "/graphql" responded 200 in 1.5193 ms
08/25/2022 20:38:46 HTTP "POST" "/graphql" responded 200 in 0.8501 ms
08/25/2022 20:39:22 HTTP "POST" "/graphql" responded 200 in 0.9210 ms
08/25/2022 20:39:24 HTTP "POST" "/graphql" responded 200 in 1.2989 ms
08/25/2022 20:39:26 HTTP "POST" "/graphql" responded 200 in 0.9185 ms
08/25/2022 20:39:29 HTTP "POST" "/graphql" responded 200 in 0.9284 ms
08/25/2022 20:39:37 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:39:38 HTTP "POST" "/graphql" responded 500 in 857.9580 ms
08/25/2022 20:44:00 HTTP "POST" "/graphql" responded 200 in 1.2417 ms
08/25/2022 20:44:01 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:44:01 HTTP "POST" "/graphql" responded 200 in 74.1984 ms
08/25/2022 20:44:07 HTTP "POST" "/graphql" responded 200 in 0.8660 ms
08/25/2022 20:44:12 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:44:12 HTTP "POST" "/graphql" responded 500 in 54.5612 ms
08/25/2022 20:44:16 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:44:16 HTTP "POST" "/graphql" responded 500 in 52.6213 ms
08/25/2022 20:45:03 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:45:03 HTTP "POST" "/graphql" responded 200 in 650.6218 ms
08/25/2022 20:45:03 HTTP "POST" "/graphql" responded 200 in 474.7347 ms
08/25/2022 20:45:07 HTTP "POST" "/graphql" responded 200 in 1.9728 ms
08/25/2022 20:45:08 ====== Postgres Call -> SQL ======
	"Update product
SET name = '@name', original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = '@brand', gender = '@gender'
WHERE id = @id 
RETURNING *"
08/25/2022 20:45:08 HTTP "POST" "/graphql" responded 500 in 151.3847 ms
08/25/2022 20:45:35 HTTP "POST" "/graphql" responded 200 in 639.8537 ms
08/25/2022 20:45:35 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:45:36 HTTP "POST" "/graphql" responded 200 in 378.4239 ms
08/25/2022 20:45:38 HTTP "POST" "/graphql" responded 200 in 2.0772 ms
08/25/2022 20:45:43 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:45:43 HTTP "POST" "/graphql" responded 200 in 103.1180 ms
08/25/2022 20:46:10 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:46:10 HTTP "POST" "/graphql" responded 200 in 5.8469 ms
08/25/2022 20:47:25 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:47:25 HTTP "POST" "/graphql" responded 500 in 110.1035 ms
08/26/2022 11:44:31 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:44:32 HTTP "POST" "/graphql" responded 200 in 1226.2334 ms
08/26/2022 11:44:41 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:44:41 HTTP "POST" "/graphql" responded 200 in 9.9021 ms
08/26/2022 11:44:44 HTTP "POST" "/graphql" responded 200 in 42.0275 ms
08/26/2022 11:44:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/26/2022 11:44:45 HTTP "POST" "/graphql" responded 200 in 33.6763 ms
08/26/2022 11:44:48 HTTP "POST" "/graphql" responded 200 in 1.5926 ms
08/26/2022 11:45:00 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:45:00 HTTP "POST" "/graphql" responded 200 in 5.7039 ms
08/29/2022 15:41:10 HTTP "POST" "/graphql" responded 200 in 776.1513 ms
08/29/2022 15:41:10 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:10 HTTP "POST" "/graphql" responded 200 in 1290.6767 ms
08/29/2022 15:41:15 HTTP "POST" "/graphql" responded 200 in 2.3092 ms
08/29/2022 15:41:20 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/29/2022 15:41:20 HTTP "POST" "/graphql" responded 200 in 145.0702 ms
08/29/2022 15:41:23 HTTP "POST" "/graphql" responded 200 in 1.4678 ms
08/29/2022 15:41:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:24 HTTP "POST" "/graphql" responded 200 in 4.4391 ms
08/29/2022 15:41:28 HTTP "POST" "/graphql" responded 200 in 1.2761 ms
08/29/2022 15:41:29 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:29 HTTP "POST" "/graphql" responded 200 in 3.8827 ms
08/29/2022 15:41:35 HTTP "POST" "/graphql" responded 200 in 1.1724 ms
08/29/2022 15:41:36 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:36 HTTP "POST" "/graphql" responded 200 in 19.3471 ms
09/13/2022 15:54:06 HTTP "POST" "/graphql" responded 200 in 792.6177 ms
09/13/2022 15:56:47 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/13/2022 15:56:52 HTTP "POST" "/graphql" responded 500 in 4622.8438 ms
09/13/2022 16:01:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/13/2022 16:01:50 HTTP "POST" "/graphql" responded 200 in 3937.1516 ms
09/14/2022 08:42:08 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:09 HTTP "POST" "/graphql" responded 200 in 1370.6445 ms
09/14/2022 08:42:12 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:12 HTTP "POST" "/graphql" responded 200 in 7.5976 ms
09/14/2022 08:42:13 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:13 HTTP "POST" "/graphql" responded 200 in 4.5774 ms
09/14/2022 08:42:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:14 HTTP "POST" "/graphql" responded 200 in 5.1431 ms
09/14/2022 08:42:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:15 HTTP "POST" "/graphql" responded 200 in 3.7901 ms
09/14/2022 08:42:16 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:16 HTTP "POST" "/graphql" responded 200 in 4.0122 ms
09/14/2022 08:44:34 HTTP "POST" "/graphql" responded 200 in 50.9096 ms
09/14/2022 08:44:41 HTTP "POST" "/graphql" responded 200 in 1.0449 ms
09/14/2022 08:44:43 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:44:43 HTTP "POST" "/graphql" responded 200 in 4.4136 ms
09/14/2022 08:44:45 HTTP "POST" "/graphql" responded 200 in 1.0739 ms
09/14/2022 08:44:49 HTTP "POST" "/graphql" responded 200 in 1.0285 ms
09/14/2022 08:44:50 HTTP "POST" "/graphql" responded 200 in 0.8898 ms
09/14/2022 08:44:51 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:44:52 HTTP "POST" "/graphql" responded 200 in 28.3526 ms
09/14/2022 08:44:56 HTTP "POST" "/graphql" responded 200 in 0.9073 ms
09/14/2022 08:45:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:45:02 HTTP "POST" "/graphql" responded 200 in 4.0843 ms
09/14/2022 08:45:05 HTTP "POST" "/graphql" responded 200 in 0.9344 ms
09/14/2022 08:45:19 HTTP "POST" "/graphql" responded 200 in 1.0120 ms
09/14/2022 08:45:20 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:45:20 HTTP "POST" "/graphql" responded 200 in 6.2921 ms
09/14/2022 08:45:30 HTTP "POST" "/graphql" responded 200 in 0.9517 ms
09/14/2022 08:45:41 HTTP "POST" "/graphql" responded 200 in 0.9701 ms
09/14/2022 08:45:42 HTTP "POST" "/graphql" responded 200 in 1.0281 ms
09/14/2022 08:45:54 HTTP "POST" "/graphql" responded 200 in 1.5659 ms
09/14/2022 08:45:58 HTTP "POST" "/graphql" responded 200 in 0.8656 ms
09/14/2022 08:45:59 HTTP "POST" "/graphql" responded 200 in 0.8789 ms
09/14/2022 08:46:01 HTTP "POST" "/graphql" responded 200 in 0.8552 ms
09/14/2022 08:46:01 HTTP "POST" "/graphql" responded 200 in 0.8795 ms
09/14/2022 08:46:19 HTTP "GET" "/graphql-voyager" responded 200 in 77.2210 ms
09/14/2022 08:46:21 HTTP "POST" "/graphql" responded 200 in 1.9633 ms
09/14/2022 08:46:21 HTTP "GET" "/favicon.ico" responded 404 in 0.0723 ms
09/14/2022 08:50:07 HTTP "POST" "/graphql" responded 200 in 1.6079 ms
09/14/2022 08:50:11 HTTP "POST" "/graphql" responded 200 in 0.9411 ms
09/14/2022 08:50:34 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
09/14/2022 08:50:34 HTTP "POST" "/graphql" responded 200 in 176.9125 ms
09/14/2022 08:50:46 HTTP "POST" "/graphql" responded 200 in 0.9223 ms
09/14/2022 08:50:47 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:50:47 HTTP "POST" "/graphql" responded 200 in 5.5568 ms
09/14/2022 08:50:55 HTTP "POST" "/graphql" responded 200 in 0.8938 ms
09/14/2022 08:51:10 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
09/14/2022 08:51:10 HTTP "POST" "/graphql" responded 200 in 5.0191 ms
09/14/2022 08:51:13 HTTP "POST" "/graphql" responded 200 in 1.0283 ms
09/14/2022 08:51:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:51:15 HTTP "POST" "/graphql" responded 200 in 4.1559 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql" responded 301 in 13.8901 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/index.html" responded 200 in 122.8028 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/main.b66740cb.js" responded 200 in 42.2166 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/css/main.91faccc5.css" responded 200 in 41.4888 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/601.725d3873.js" responded 200 in 46.0608 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/14.c7f124f0.chunk.js" responded 200 in 4.6038 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/996.e07faaf0.chunk.js" responded 200 in 4.7786 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/502.42e91a67.chunk.js" responded 200 in 23.0059 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/favicon.svg" responded 200 in 1.5894 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 1.0368 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/favicon.ico" responded 200 in 6.1261 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/696.37f75272.chunk.js" responded 200 in 0.5144 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/338.5d3af481.chunk.js" responded 200 in 0.8093 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/css/645.4594131c.chunk.css" responded 200 in 1.0123 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/27.ba4cc8cb.chunk.js" responded 200 in 2.2790 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/400.a44ded47.chunk.js" responded 200 in 0.5755 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/498.bacf030a.chunk.js" responded 200 in 4.6583 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/329.d8262f45.chunk.js" responded 200 in 17.3557 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/645.5c961458.chunk.js" responded 200 in 43.4097 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/808.4d7b0362.chunk.js" responded 200 in 0.3313 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/document.467d4add.chunk.js" responded 200 in 2.8722 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/257.affcdb08.chunk.js" responded 200 in 0.2531 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/css/899.21d34220.chunk.css" responded 200 in 0.5155 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/549.d94347d9.chunk.js" responded 200 in 5.0690 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/899.68673d25.chunk.js" responded 200 in 5.7715 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 30.1345 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/738.c7b92eac.chunk.js" responded 200 in 0.5368 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/160.19d20a8d.chunk.js" responded 200 in 0.2594 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/598.46d9e9a5.chunk.js" responded 200 in 0.5891 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/203.a2923d0a.chunk.js" responded 200 in 0.2463 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/619.8c24313d.chunk.js" responded 200 in 0.3644 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 2.6613 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 3.7439 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/json.45f3c3ad.js" responded 200 in 5.3801 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 17.1363 ms
10/18/2022 11:12:56 HTTP "POST" "/graphql" responded 200 in 823.5790 ms
10/18/2022 11:12:56 HTTP "POST" "/graphql" responded 200 in 40.2195 ms
10/18/2022 11:12:56 HTTP "GET" "/graphql/static/media/codicon.ade705761eb7e702770d.ttf" responded 200 in 4.0973 ms
10/18/2022 11:12:58 HTTP "POST" "/graphql" responded 400 in 16.9103 ms
10/18/2022 11:13:04 HTTP "POST" "/graphql" responded 400 in 0.4154 ms
10/18/2022 11:13:05 HTTP "POST" "/graphql" responded 400 in 1.0656 ms
10/18/2022 11:13:09 HTTP "GET" "/graphql/static/js/992.ed31c4da.chunk.js" responded 200 in 0.6858 ms
10/18/2022 11:13:09 HTTP "GET" "/graphql/static/js/301.87a89801.chunk.js" responded 200 in 0.8537 ms
10/18/2022 11:13:10 HTTP "GET" "/graphql/static/js/928.18f52343.chunk.js" responded 200 in 0.0838 ms
10/18/2022 11:13:10 HTTP "GET" "/graphql/static/js/646.03849ed1.chunk.js" responded 200 in 0.5385 ms
10/18/2022 11:13:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:25 HTTP "POST" "/graphql" responded 200 in 742.1462 ms
10/18/2022 11:13:40 HTTP "POST" "/graphql" responded 200 in 4.0549 ms
10/18/2022 11:13:44 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:44 HTTP "POST" "/graphql" responded 200 in 5.7958 ms
10/18/2022 11:13:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:45 HTTP "POST" "/graphql" responded 200 in 6.8224 ms
10/18/2022 11:13:48 HTTP "POST" "/graphql" responded 200 in 0.9162 ms
10/18/2022 11:13:49 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:49 HTTP "POST" "/graphql" responded 200 in 4.4718 ms
10/18/2022 11:13:51 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:51 HTTP "POST" "/graphql" responded 200 in 4.8932 ms
10/18/2022 11:13:52 HTTP "POST" "/graphql" responded 200 in 1.0188 ms
10/18/2022 11:13:54 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:54 HTTP "POST" "/graphql" responded 200 in 24.6167 ms
10/18/2022 11:13:55 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:55 HTTP "POST" "/graphql" responded 200 in 6.3244 ms
10/18/2022 11:13:59 HTTP "POST" "/graphql" responded 200 in 1.0335 ms
10/18/2022 11:14:00 HTTP "POST" "/graphql" responded 200 in 0.9383 ms
10/18/2022 11:14:01 HTTP "POST" "/graphql" responded 200 in 0.9155 ms
10/18/2022 11:14:12 HTTP "POST" "/graphql" responded 200 in 0.8922 ms
10/18/2022 11:14:14 HTTP "POST" "/graphql" responded 200 in 1.3469 ms
10/18/2022 11:14:31 HTTP "POST" "/graphql" responded 200 in 0.9800 ms
10/18/2022 11:14:32 HTTP "POST" "/graphql" responded 200 in 0.9313 ms
10/18/2022 11:14:37 HTTP "POST" "/graphql" responded 200 in 1.1699 ms
10/18/2022 11:14:41 HTTP "POST" "/graphql" responded 200 in 0.9723 ms
10/18/2022 11:14:52 HTTP "POST" "/graphql" responded 200 in 1.2889 ms
10/18/2022 11:14:54 HTTP "POST" "/graphql" responded 200 in 0.8707 ms
10/18/2022 11:15:08 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:08 HTTP "POST" "/graphql" responded 200 in 6.3842 ms
10/18/2022 11:15:09 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:09 HTTP "POST" "/graphql" responded 200 in 4.6285 ms
10/18/2022 11:15:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:14 HTTP "POST" "/graphql" responded 200 in 6.8618 ms
10/18/2022 11:15:20 HTTP "POST" "/graphql" responded 200 in 1.2393 ms
10/18/2022 11:15:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:21 HTTP "POST" "/graphql" responded 200 in 5.7129 ms
10/18/2022 11:15:36 HTTP "POST" "/graphql" responded 200 in 0.8839 ms
10/18/2022 11:15:37 HTTP "POST" "/graphql" responded 200 in 0.8751 ms
10/18/2022 11:15:40 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:40 HTTP "POST" "/graphql" responded 200 in 7.9105 ms
10/18/2022 11:15:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:45 HTTP "POST" "/graphql" responded 200 in 5.4070 ms
10/18/2022 11:15:52 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:52 HTTP "POST" "/graphql" responded 200 in 4.8464 ms
10/18/2022 11:15:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:58 HTTP "POST" "/graphql" responded 200 in 6.2734 ms
10/18/2022 11:27:39 HTTP "POST" "/graphql" responded 200 in 762.5949 ms
10/18/2022 11:27:39 HTTP "GET" "/graphql-voyager" responded 200 in 79.0937 ms
10/18/2022 11:27:40 HTTP "POST" "/graphql" responded 200 in 2.5361 ms
10/18/2022 11:27:40 HTTP "GET" "/favicon.ico" responded 404 in 0.0875 ms
10/18/2022 11:30:14 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:15 HTTP "POST" "/graphql" responded 500 in 1197.0659 ms
10/18/2022 11:30:21 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:21 HTTP "POST" "/graphql" responded 500 in 38.9273 ms
10/18/2022 11:30:23 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:23 HTTP "POST" "/graphql" responded 500 in 39.0755 ms
10/18/2022 11:39:48 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:39:48 HTTP "POST" "/graphql" responded 200 in 351663.1735 ms
10/18/2022 11:39:49 HTTP "GET" "/graphql-voyager" responded 200 in 60.7544 ms
10/18/2022 11:39:49 HTTP "POST" "/graphql" responded 200 in 55.8368 ms
10/18/2022 11:39:56 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:39:56 HTTP "POST" "/graphql" responded 200 in 5577.3608 ms
10/18/2022 11:39:59 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:39:59 HTTP "POST" "/graphql" responded 200 in 14.9020 ms
10/18/2022 11:40:00 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:00 HTTP "POST" "/graphql" responded 200 in 4.0586 ms
10/18/2022 11:40:03 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:03 HTTP "POST" "/graphql" responded 200 in 4.4856 ms
10/18/2022 11:40:13 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:13 HTTP "POST" "/graphql" responded 200 in 8.4728 ms
10/18/2022 11:40:17 HTTP "POST" "/graphql" responded 200 in 2.5089 ms
10/18/2022 11:40:18 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:18 HTTP "POST" "/graphql" responded 200 in 43.7918 ms
10/18/2022 11:40:26 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:26 HTTP "POST" "/graphql" responded 500 in 44.0808 ms
10/18/2022 11:40:28 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:28 HTTP "POST" "/graphql" responded 200 in 75.7427 ms
10/18/2022 11:40:34 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:34 HTTP "POST" "/graphql" responded 200 in 4.2604 ms
10/18/2022 11:40:37 HTTP "POST" "/graphql" responded 200 in 1.1732 ms
10/18/2022 11:40:38 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:38 HTTP "POST" "/graphql" responded 200 in 12.2488 ms
10/18/2022 11:42:43 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:42:43 HTTP "POST" "/graphql" responded 200 in 4.4684 ms
10/18/2022 11:43:40 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:43:56 HTTP "POST" "/graphql" responded 200 in 15574.9126 ms
10/18/2022 11:44:34 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:44:45 HTTP "POST" "/graphql" responded 200 in 11664.0855 ms
10/18/2022 11:44:46 HTTP "GET" "/graphql-voyager" responded 200 in 2.4477 ms
10/18/2022 11:44:46 HTTP "POST" "/graphql" responded 200 in 1.3578 ms
10/18/2022 11:44:47 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:44:55 HTTP "POST" "/graphql" responded 200 in 7827.2041 ms
10/18/2022 11:45:05 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:05 HTTP "POST" "/graphql" responded 200 in 7.4609 ms
10/18/2022 11:45:06 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:06 HTTP "POST" "/graphql" responded 200 in 5.4221 ms
10/18/2022 11:45:07 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:07 HTTP "POST" "/graphql" responded 200 in 8.4567 ms
10/18/2022 11:45:08 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:08 HTTP "POST" "/graphql" responded 200 in 9.8299 ms
10/18/2022 11:45:54 HTTP "GET" "/graphql-voyager" responded 200 in 3.7844 ms
10/18/2022 11:45:54 HTTP "POST" "/graphql" responded 200 in 1.2918 ms
10/18/2022 11:45:56 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:56 HTTP "POST" "/graphql" responded 200 in 32.7106 ms
10/18/2022 11:46:02 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:46:02 HTTP "POST" "/graphql" responded 200 in 7.6212 ms
10/20/2022 13:37:18 HTTP "GET" "/graphql" responded 301 in 13.6226 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/index.html" responded 200 in 87.6271 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/polyfills.14223cd3.js" responded 200 in 36.7679 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/917.df80a314.js" responded 200 in 32.9193 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/main.7da7210f.js" responded 200 in 0.6833 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/568.71498544.chunk.js" responded 200 in 1.2851 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/927.0676b810.chunk.js" responded 200 in 61.2691 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/css/styles.d1755a82.chunk.css" responded 200 in 62.6187 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/7.ef194ce7.chunk.js" responded 200 in 10.3099 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/696.23e5e4e1.chunk.js" responded 200 in 61.5309 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/641.c7e5a908.chunk.js" responded 200 in 53.5481 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/243.082d6152.chunk.js" responded 200 in 14.1104 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/494.af2a9e30.chunk.js" responded 200 in 73.2668 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/693.b625e9eb.chunk.js" responded 200 in 91.2927 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 0.1639 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/favicon.svg" responded 200 in 0.5962 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 17.8887 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/95.4f7bae42.chunk.js" responded 200 in 0.2513 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/619.d2a9edb4.chunk.js" responded 200 in 0.4156 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/json.50fb813a.js" responded 200 in 6.0982 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/document.8402b2ae.chunk.js" responded 200 in 0.4297 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/schema.2a88d762.chunk.js" responded 200 in 0.5315 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/160.5700f964.chunk.js" responded 200 in 0.2722 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/13.6582dd74.chunk.js" responded 200 in 0.1945 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/523.9581171d.chunk.js" responded 200 in 0.1969 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/319.15add1dd.chunk.js" responded 200 in 0.3019 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/97.cee6a1a5.chunk.js" responded 200 in 0.2298 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/101.e5dcd65e.chunk.js" responded 200 in 0.1836 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 2.5711 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 3.0297 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 10.8850 ms
10/20/2022 13:37:20 HTTP "POST" "/graphql" responded 200 in 720.7100 ms
10/20/2022 13:37:20 HTTP "POST" "/graphql" responded 200 in 32.6652 ms
10/20/2022 13:37:21 HTTP "GET" "/graphql/static/media/codicon.b797181c93b3755f4fa1.ttf" responded 200 in 13.4983 ms
10/20/2022 13:37:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/20/2022 13:37:22 HTTP "POST" "/graphql" responded 200 in 486.4968 ms
10/20/2022 13:37:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/20/2022 13:37:25 HTTP "POST" "/graphql" responded 200 in 8.3426 ms
10/23/2022 12:01:21 HTTP "POST" "/graphql" responded 200 in 655.6275 ms
10/23/2022 12:01:24 HTTP "GET" "/voyagr" responded 404 in 0.0581 ms
10/23/2022 12:01:28 HTTP "GET" "/voyager" responded 404 in 0.0032 ms
10/23/2022 12:01:30 HTTP "GET" "/voyager" responded 404 in 0.0027 ms
10/23/2022 12:01:34 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/23/2022 12:01:35 HTTP "POST" "/graphql" responded 200 in 1124.9352 ms
10/23/2022 12:01:41 HTTP "GET" "/graphql-voyager" responded 200 in 77.0673 ms
10/23/2022 12:01:42 HTTP "POST" "/graphql" responded 200 in 3.0825 ms
10/23/2022 12:01:43 HTTP "GET" "/favicon.ico" responded 404 in 0.0051 ms
10/23/2022 12:02:06 HTTP "POST" "/graphql" responded 200 in 1.4359 ms
10/23/2022 12:02:13 HTTP "POST" "/graphql" responded 200 in 1.0218 ms
10/23/2022 12:02:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/23/2022 12:02:14 HTTP "POST" "/graphql" responded 200 in 7.9186 ms
10/23/2022 12:02:19 HTTP "POST" "/graphql" responded 200 in 0.9784 ms
10/23/2022 12:02:21 HTTP "POST" "/graphql" responded 200 in 0.9071 ms
10/23/2022 12:02:33 HTTP "POST" "/graphql" responded 200 in 0.8830 ms
10/23/2022 12:02:35 HTTP "POST" "/graphql" responded 200 in 1.0181 ms
10/23/2022 12:02:36 HTTP "POST" "/graphql" responded 200 in 0.9109 ms
10/23/2022 12:02:36 HTTP "POST" "/graphql" responded 200 in 1.0413 ms
10/23/2022 12:02:37 HTTP "POST" "/graphql" responded 200 in 0.9343 ms
10/24/2022 11:18:33 There was an exception checking if table "VersionInfo" in null exists
System.ArgumentException: Keyword not supported: 'host'.
   at Microsoft.Data.Common.DbConnectionOptions.ParseInternal(Dictionary`2 parsetable, String connectionString, Boolean buildChain, Dictionary`2 synonyms, Boolean firstKey)
   at Microsoft.Data.Common.DbConnectionOptions..ctor(String connectionString, Dictionary`2 synonyms)
   at Microsoft.Data.SqlClient.SqlConnectionString..ctor(String connectionString)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnectionOptions(String connectionString, DbConnectionOptions previous)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions)
   at Microsoft.Data.SqlClient.SqlConnection.ConnectionString_Set(DbConnectionPoolKey key)
   at Microsoft.Data.SqlClient.SqlConnection.set_ConnectionString(String value)
   at FluentMigrator.Runner.Processors.GenericProcessorBase.<>c__DisplayClass6_1.<.ctor>b__1()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at FluentMigrator.Runner.Processors.GenericProcessorBase.EnsureConnectionIsOpen()
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.Exists(String template, Object[] args)
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.TableExists(String schemaName, String tableName)
10/24/2022 11:18:33 VersionMigration migrating
10/24/2022 11:25:51 There was an exception checking if table "VersionInfo" in null exists
System.ArgumentException: Keyword not supported: 'host'.
   at Microsoft.Data.Common.DbConnectionOptions.ParseInternal(Dictionary`2 parsetable, String connectionString, Boolean buildChain, Dictionary`2 synonyms, Boolean firstKey)
   at Microsoft.Data.Common.DbConnectionOptions..ctor(String connectionString, Dictionary`2 synonyms)
   at Microsoft.Data.SqlClient.SqlConnectionString..ctor(String connectionString)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnectionOptions(String connectionString, DbConnectionOptions previous)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions)
   at Microsoft.Data.SqlClient.SqlConnection.ConnectionString_Set(DbConnectionPoolKey key)
   at Microsoft.Data.SqlClient.SqlConnection.set_ConnectionString(String value)
   at FluentMigrator.Runner.Processors.GenericProcessorBase.<>c__DisplayClass6_1.<.ctor>b__1()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at FluentMigrator.Runner.Processors.GenericProcessorBase.EnsureConnectionIsOpen()
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.Exists(String template, Object[] args)
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.TableExists(String schemaName, String tableName)
10/24/2022 11:25:51 VersionMigration migrating
10/24/2022 11:26:51 VersionMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 CreateTable VersionInfo
10/24/2022 11:26:51 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 11:26:51 => 0.0198852s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionMigration migrated
10/24/2022 11:26:51 => 0.0366419s
10/24/2022 11:26:51 VersionUniqueMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 CreateIndex VersionInfo (Version)
10/24/2022 11:26:51 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 11:26:51 => 0.0122108s
10/24/2022 11:26:51 AlterTable VersionInfo
10/24/2022 11:26:51 
10/24/2022 11:26:51 => 0.001106s
10/24/2022 11:26:51 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 11:26:51 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 11:26:51 => 0.0024643s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionUniqueMigration migrated
10/24/2022 11:26:51 => 0.0058253s
10/24/2022 11:26:51 VersionDescriptionMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 AlterTable VersionInfo
10/24/2022 11:26:51 
10/24/2022 11:26:51 => 0.0003824s
10/24/2022 11:26:51 CreateColumn VersionInfo Description String
10/24/2022 11:26:51 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 11:26:51 => 0.0073897s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionDescriptionMigration migrated
10/24/2022 11:26:51 => 0.0106878s
10/24/2022 11:26:51 Migrations
10/24/2022 12:05:04 Migrations
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:05:04 Beginning Transaction
10/24/2022 12:05:04 CreateTable Product
10/24/2022 12:05:04 CREATE TABLE "public"."Product" ();
10/24/2022 12:05:04 => 0.0208623s
10/24/2022 12:05:04 CreateTable Brand
10/24/2022 12:05:04 CREATE TABLE "public"."Brand" ();
10/24/2022 12:05:04 => 0.0030177s
10/24/2022 12:05:04 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:05:04','InitialTables_20221023001');
10/24/2022 12:05:04 Committing Transaction
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:05:04 => 0.020565s
10/24/2022 12:33:16 VersionMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateTable VersionInfo
10/24/2022 12:33:16 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:33:16 => 0.0206086s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionMigration migrated
10/24/2022 12:33:16 => 0.0353379s
10/24/2022 12:33:16 VersionUniqueMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateIndex VersionInfo (Version)
10/24/2022 12:33:16 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:33:16 => 0.0128885s
10/24/2022 12:33:16 AlterTable VersionInfo
10/24/2022 12:33:16 
10/24/2022 12:33:16 => 0.0008614s
10/24/2022 12:33:16 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:33:16 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:33:16 => 0.0027178s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionUniqueMigration migrated
10/24/2022 12:33:16 => 0.005418s
10/24/2022 12:33:16 VersionDescriptionMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 AlterTable VersionInfo
10/24/2022 12:33:16 
10/24/2022 12:33:16 => 0.0003315s
10/24/2022 12:33:16 CreateColumn VersionInfo Description String
10/24/2022 12:33:16 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:33:16 => 0.0061083s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionDescriptionMigration migrated
10/24/2022 12:33:16 => 0.0094639s
10/24/2022 12:33:16 Migrations
10/24/2022 12:33:16 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:33:16 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateTable product
10/24/2022 12:33:16 CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:33:16 An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 22023: identity column type must be smallint, integer, or bigint

System.Exception: An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 22023: identity column type must be smallint, integer, or bigint

 ---> Npgsql.PostgresException (0x80004005): 22023: identity column type must be smallint, integer, or bigint
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 22023
    MessageText: identity column type must be smallint, integer, or bigint
    File: sequence.c
    Line: 1390
    Routine: init_params
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 12:33:16 Rolling back transaction
10/24/2022 12:35:09 VersionMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateTable VersionInfo
10/24/2022 12:35:09 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:35:09 => 0.0184109s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionMigration migrated
10/24/2022 12:35:09 => 0.0327407s
10/24/2022 12:35:09 VersionUniqueMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateIndex VersionInfo (Version)
10/24/2022 12:35:09 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:35:09 => 0.0106122s
10/24/2022 12:35:09 AlterTable VersionInfo
10/24/2022 12:35:09 
10/24/2022 12:35:09 => 0.0007914s
10/24/2022 12:35:09 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:35:09 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:35:09 => 0.0024624s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionUniqueMigration migrated
10/24/2022 12:35:09 => 0.0043216s
10/24/2022 12:35:09 VersionDescriptionMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 AlterTable VersionInfo
10/24/2022 12:35:09 
10/24/2022 12:35:09 => 0.000331s
10/24/2022 12:35:09 CreateColumn VersionInfo Description String
10/24/2022 12:35:09 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:35:09 => 0.006356s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionDescriptionMigration migrated
10/24/2022 12:35:09 => 0.0086177s
10/24/2022 12:35:09 Migrations
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateTable product
10/24/2022 12:35:09 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0224197s
10/24/2022 12:35:09 CreateTable brand
10/24/2022 12:35:09 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0113968s
10/24/2022 12:35:09 CreateTable type
10/24/2022 12:35:09 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0104565s
10/24/2022 12:35:09 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:35:09','InitialTables_20221023001');
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:35:09 => 0.0273113s
10/24/2022 12:46:10 Migrations
10/24/2022 12:46:10 20221023001: InitialTables_20221023001 (current)
10/24/2022 12:47:42 Migrations
10/24/2022 12:47:42 20221023001: InitialTables_20221023001 (current)
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 migrating
10/24/2022 12:47:42 Beginning Transaction
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 12:47:42 -> 3 Insert operations completed in 00:00:00.0103818 taking an average of 00:00:00.0034606
10/24/2022 12:47:42 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T19:47:42','InitialSeed_20221024001');
10/24/2022 12:47:42 Committing Transaction
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 migrated
10/24/2022 12:47:42 => 0.0177995s
10/24/2022 12:56:24 VersionMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateTable VersionInfo
10/24/2022 12:56:24 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:56:24 => 0.0327488s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionMigration migrated
10/24/2022 12:56:24 => 0.0524366s
10/24/2022 12:56:24 VersionUniqueMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateIndex VersionInfo (Version)
10/24/2022 12:56:24 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:56:24 => 0.0134318s
10/24/2022 12:56:24 AlterTable VersionInfo
10/24/2022 12:56:24 
10/24/2022 12:56:24 => 0.0012617s
10/24/2022 12:56:24 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:56:24 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:56:24 => 0.0028454s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionUniqueMigration migrated
10/24/2022 12:56:24 => 0.0062464s
10/24/2022 12:56:24 VersionDescriptionMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 AlterTable VersionInfo
10/24/2022 12:56:24 
10/24/2022 12:56:24 => 0.0003624s
10/24/2022 12:56:24 CreateColumn VersionInfo Description String
10/24/2022 12:56:24 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:56:24 => 0.0103403s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionDescriptionMigration migrated
10/24/2022 12:56:24 => 0.014545s
10/24/2022 12:56:24 Migrations
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateTable product
10/24/2022 12:56:24 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0230106s
10/24/2022 12:56:24 CreateTable brand
10/24/2022 12:56:24 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0123939s
10/24/2022 12:56:24 CreateTable type
10/24/2022 12:56:24 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0098126s
10/24/2022 12:56:24 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:56:24','InitialTables_20221023001');
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:56:24 => 0.0201557s
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('goggles');
10/24/2022 12:56:24 -> 12 Insert operations completed in 00:00:00.0147528 taking an average of 00:00:00.0012294
10/24/2022 12:56:24 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T19:56:24','InitialSeed_20221024001');
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 migrated
10/24/2022 12:56:24 => 0.0054097s
10/24/2022 13:11:58 Migrations
10/24/2022 13:11:58 20221023001: InitialTables_20221023001
10/24/2022 13:11:58 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:11:58 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:11:58 Beginning Transaction
10/24/2022 13:11:58 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:11:58 Committing Transaction
10/24/2022 13:11:59 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:11:59 => 0.0252701s
10/24/2022 13:12:41 Migrations
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:12:41 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:12:41 Beginning Transaction
10/24/2022 13:12:41 DeleteTable product
10/24/2022 13:12:41 DROP TABLE "public"."product";
10/24/2022 13:12:41 => 0.0081313s
10/24/2022 13:12:41 DeleteTable brand
10/24/2022 13:12:41 DROP TABLE "public"."brand";
10/24/2022 13:12:41 => 0.0019414s
10/24/2022 13:12:41 DeleteTable type
10/24/2022 13:12:41 DROP TABLE "public"."type";
10/24/2022 13:12:41 => 0.001963s
10/24/2022 13:12:41 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:12:41 Committing Transaction
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:12:41 => 0.0298988s
10/24/2022 13:13:23 Migrations
10/24/2022 13:13:23 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:13:23 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:13:23 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:13:23 Beginning Transaction
10/24/2022 13:13:23 CreateTable product
10/24/2022 13:13:23 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:13:23 => 0.0288282s
10/24/2022 13:13:23 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:13:23 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:13:23 An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
The error was 42P01: relation "public.brand" does not exist

System.Exception: An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
The error was 42P01: relation "public.brand" does not exist

 ---> Npgsql.PostgresException (0x80004005): 42P01: relation "public.brand" does not exist
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P01
    MessageText: relation "public.brand" does not exist
    File: namespace.c
    Line: 428
    Routine: RangeVarGetRelidExtended
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:13:23 Rolling back transaction
10/24/2022 13:13:59 Migrations
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:13:59 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:13:59 Beginning Transaction
10/24/2022 13:13:59 CreateTable brand
10/24/2022 13:13:59 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.0411977s
10/24/2022 13:13:59 CreateTable type
10/24/2022 13:13:59 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.0108904s
10/24/2022 13:13:59 CreateTable product
10/24/2022 13:13:59 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.016864s
10/24/2022 13:13:59 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:13:59 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:13:59 => 0.009025s
10/24/2022 13:13:59 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:13:59 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:13:59 => 0.0030817s
10/24/2022 13:13:59 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:13:59','InitialTables_20221023001');
10/24/2022 13:13:59 Committing Transaction
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:13:59 => 0.0207363s
10/24/2022 13:13:59 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:13:59 Beginning Transaction
10/24/2022 13:14:07 Rolling back transaction
10/24/2022 13:15:01 Migrations
10/24/2022 13:15:01 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:15:01 Beginning Transaction
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('goggles');
10/24/2022 13:15:01 -> 12 Insert operations completed in 00:00:00.0186800 taking an average of 00:00:00.0015566
10/24/2022 13:15:01 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:15:01','InitialSeed_20221024001');
10/24/2022 13:15:01 Committing Transaction
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:15:01 => 0.0134119s
10/24/2022 13:26:07 Migrations
10/24/2022 13:26:07 20221023001: InitialTables_20221023001
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:26:07 Beginning Transaction
10/24/2022 13:26:07 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:26:07 Committing Transaction
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:26:07 => 0.022628s
10/24/2022 13:26:07 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:26:07 Beginning Transaction
10/24/2022 13:26:07 DeleteTable product
10/24/2022 13:26:07 DROP TABLE "public"."product";
10/24/2022 13:26:07 => 0.0039193s
10/24/2022 13:26:07 DeleteTable brand
10/24/2022 13:26:07 DROP TABLE "public"."brand";
10/24/2022 13:26:07 => 0.0012841s
10/24/2022 13:26:07 DeleteTable type
10/24/2022 13:26:07 DROP TABLE "public"."type";
10/24/2022 13:26:07 => 0.0013738s
10/24/2022 13:26:07 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:26:07 Committing Transaction
10/24/2022 13:26:07 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:26:07 => 0.0168213s
10/24/2022 13:26:26 Migrations
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:26:26 Beginning Transaction
10/24/2022 13:26:26 CreateTable brand
10/24/2022 13:26:26 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0335107s
10/24/2022 13:26:26 CreateTable type
10/24/2022 13:26:26 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0267051s
10/24/2022 13:26:26 CreateTable product
10/24/2022 13:26:26 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0145098s
10/24/2022 13:26:26 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:26:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:26:26 => 0.0046468s
10/24/2022 13:26:26 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:26:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:26:26 => 0.0026408s
10/24/2022 13:26:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:26:26','InitialTables_20221023001');
10/24/2022 13:26:26 Committing Transaction
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:26:26 => 0.0201861s
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:26:26 Beginning Transaction
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:26:26 -> 12 Insert operations completed in 00:00:00.0167659 taking an average of 00:00:00.0013971
10/24/2022 13:26:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:26:26','InitialSeed_20221024001');
10/24/2022 13:26:26 Committing Transaction
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:26:26 => 0.0058736s
10/24/2022 13:45:52 Migrations
10/24/2022 13:45:52 20221023001: InitialTables_20221023001
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:45:52 Beginning Transaction
10/24/2022 13:45:52 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:45:52 Committing Transaction
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:45:52 => 0.02532s
10/24/2022 13:45:52 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:45:52 Beginning Transaction
10/24/2022 13:45:52 DeleteTable product
10/24/2022 13:45:52 DROP TABLE "public"."product";
10/24/2022 13:45:52 => 0.0048194s
10/24/2022 13:45:52 DeleteTable brand
10/24/2022 13:45:52 DROP TABLE "public"."brand";
10/24/2022 13:45:52 => 0.0013803s
10/24/2022 13:45:52 DeleteTable type
10/24/2022 13:45:52 DROP TABLE "public"."type";
10/24/2022 13:45:52 => 0.0015585s
10/24/2022 13:45:52 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:45:52 Committing Transaction
10/24/2022 13:45:52 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:45:52 => 0.0251036s
10/24/2022 13:46:18 Migrations
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:46:18 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:46:18 Beginning Transaction
10/24/2022 13:46:18 CreateTable brand
10/24/2022 13:46:18 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0269408s
10/24/2022 13:46:18 CreateTable type
10/24/2022 13:46:18 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0135083s
10/24/2022 13:46:18 CreateTable product
10/24/2022 13:46:18 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0154011s
10/24/2022 13:46:18 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:46:18 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:46:18 => 0.0048814s
10/24/2022 13:46:18 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:46:18 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:46:18 => 0.0028637s
10/24/2022 13:46:18 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:46:18','InitialTables_20221023001');
10/24/2022 13:46:18 Committing Transaction
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:46:18 => 0.0214017s
10/24/2022 13:46:18 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:46:18 Beginning Transaction
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:46:18 INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:46:18 An error occured executing the following sql:
INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Id" of relation "product" does not exist

POSITION: 33

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Id" of relation "product" does not exist

POSITION: 33

 ---> Npgsql.PostgresException (0x80004005): 42703: column "Id" of relation "product" does not exist

POSITION: 33
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "Id" of relation "product" does not exist
    Position: 33
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:46:18 Rolling back transaction
10/24/2022 13:47:50 Migrations
10/24/2022 13:47:50 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:47:50 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:47:50 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:47:50 Beginning Transaction
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:47:50 INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:47:50 An error occured executing the following sql:
INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Name" of relation "product" does not exist

POSITION: 33

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Name" of relation "product" does not exist

POSITION: 33

 ---> Npgsql.PostgresException (0x80004005): 42703: column "Name" of relation "product" does not exist

POSITION: 33
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "Name" of relation "product" does not exist
    Position: 33
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:47:50 Rolling back transaction
10/24/2022 13:55:09 Migrations
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:55:09 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:55:09 Beginning Transaction
10/24/2022 13:55:09 DeleteTable product
10/24/2022 13:55:09 DROP TABLE "public"."product";
10/24/2022 13:55:09 => 0.0074402s
10/24/2022 13:55:09 DeleteTable brand
10/24/2022 13:55:09 DROP TABLE "public"."brand";
10/24/2022 13:55:09 => 0.0014885s
10/24/2022 13:55:09 DeleteTable type
10/24/2022 13:55:09 DROP TABLE "public"."type";
10/24/2022 13:55:09 => 0.0014085s
10/24/2022 13:55:09 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:55:09 Committing Transaction
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:55:09 => 0.0269204s
10/24/2022 13:55:25 Migrations
10/24/2022 13:55:25 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:55:25 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:55:25 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:55:25 Beginning Transaction
10/24/2022 13:55:25 CreateTable brand
10/24/2022 13:55:25 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:55:25 => 0.024759s
10/24/2022 13:55:25 CreateTable type
10/24/2022 13:55:25 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:55:26 => 0.0156208s
10/24/2022 13:55:26 CreateTable product
10/24/2022 13:55:26 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:55:26 => 0.01535s
10/24/2022 13:55:26 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 13:55:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 13:55:26 => 0.0057028s
10/24/2022 13:55:26 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 13:55:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 13:55:26 => 0.0032447s
10/24/2022 13:55:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:55:26','InitialTables_20221023001');
10/24/2022 13:55:26 Committing Transaction
10/24/2022 13:55:26 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:55:26 => 0.0196977s
10/24/2022 13:55:26 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:55:26 Beginning Transaction
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 13:55:26 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
The error was 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
The error was 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55

 ---> Npgsql.PostgresException (0x80004005): 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "CurrentPricurrent_pricece" of relation "product" does not exist
    Position: 55
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:55:26 Rolling back transaction
10/24/2022 13:56:03 Migrations
10/24/2022 13:56:03 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:56:03 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:56:03 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:56:03 Beginning Transaction
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:56:03 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:56:03 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: product
    ConstraintName: FK_product_brand_id_brand_id
    File: ri_triggers.c
    Line: 2528
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:56:03 Rolling back transaction
10/24/2022 13:57:42 Migrations
10/24/2022 13:57:42 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:57:42 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:57:42 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:57:42 Beginning Transaction
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:57:42 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:57:42 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: product
    ConstraintName: FK_product_brand_id_brand_id
    File: ri_triggers.c
    Line: 2528
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:57:42 Rolling back transaction
10/24/2022 13:59:08 Migrations
10/24/2022 13:59:08 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:59:08 Beginning Transaction
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:59:08 -> 12 Insert operations completed in 00:00:00.0171811 taking an average of 00:00:00.0014317
10/24/2022 13:59:08 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:59:08','InitialSeed_20221024001');
10/24/2022 13:59:08 Committing Transaction
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:59:08 => 0.0172756s
10/24/2022 14:00:11 VersionMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateTable VersionInfo
10/24/2022 14:00:11 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:00:11 => 0.019921s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionMigration migrated
10/24/2022 14:00:11 => 0.0350856s
10/24/2022 14:00:11 VersionUniqueMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateIndex VersionInfo (Version)
10/24/2022 14:00:11 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:00:11 => 0.0108161s
10/24/2022 14:00:11 AlterTable VersionInfo
10/24/2022 14:00:11 
10/24/2022 14:00:11 => 0.0009273s
10/24/2022 14:00:11 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:00:11 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:00:11 => 0.0025425s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionUniqueMigration migrated
10/24/2022 14:00:11 => 0.0044829s
10/24/2022 14:00:11 VersionDescriptionMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 AlterTable VersionInfo
10/24/2022 14:00:11 
10/24/2022 14:00:11 => 0.0003313s
10/24/2022 14:00:11 CreateColumn VersionInfo Description String
10/24/2022 14:00:11 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:00:11 => 0.0067056s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionDescriptionMigration migrated
10/24/2022 14:00:11 => 0.0088862s
10/24/2022 14:00:11 Migrations
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateTable brand
10/24/2022 14:00:11 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0142696s
10/24/2022 14:00:11 CreateTable type
10/24/2022 14:00:11 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0099297s
10/24/2022 14:00:11 CreateTable product
10/24/2022 14:00:11 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0137711s
10/24/2022 14:00:11 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 14:00:11 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 14:00:11 => 0.0080502s
10/24/2022 14:00:11 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 14:00:11 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 14:00:11 => 0.003104s
10/24/2022 14:00:11 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T21:00:11','InitialTables_20221023001');
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 migrated
10/24/2022 14:00:11 => 0.0103362s
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 14:00:11 -> 12 Insert operations completed in 00:00:00.0149303 taking an average of 00:00:00.0012441
10/24/2022 14:00:11 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T21:00:11','InitialSeed_20221024001');
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 migrated
10/24/2022 14:00:11 => 0.0041234s
10/24/2022 14:00:29 Migrations
10/24/2022 14:00:29 20221023001: InitialTables_20221023001
10/24/2022 14:00:29 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:01:10 VersionMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateTable VersionInfo
10/24/2022 14:01:10 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:01:10 => 0.0197624s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionMigration migrated
10/24/2022 14:01:10 => 0.035066s
10/24/2022 14:01:10 VersionUniqueMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateIndex VersionInfo (Version)
10/24/2022 14:01:10 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:01:10 => 0.0128856s
10/24/2022 14:01:10 AlterTable VersionInfo
10/24/2022 14:01:10 
10/24/2022 14:01:10 => 0.0013309s
10/24/2022 14:01:10 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:01:10 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:01:10 => 0.003411s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionUniqueMigration migrated
10/24/2022 14:01:10 => 0.005906s
10/24/2022 14:01:10 VersionDescriptionMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 AlterTable VersionInfo
10/24/2022 14:01:10 
10/24/2022 14:01:10 => 0.0004251s
10/24/2022 14:01:10 CreateColumn VersionInfo Description String
10/24/2022 14:01:10 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:01:10 => 0.0078545s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionDescriptionMigration migrated
10/24/2022 14:01:10 => 0.0104471s
10/24/2022 14:01:10 Migrations
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateTable brand
10/24/2022 14:01:10 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0131342s
10/24/2022 14:01:10 CreateTable type
10/24/2022 14:01:10 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0097104s
10/24/2022 14:01:10 CreateTable product
10/24/2022 14:01:10 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0124829s
10/24/2022 14:01:10 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 14:01:10 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 14:01:10 => 0.0153237s
10/24/2022 14:01:10 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 14:01:10 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 14:01:10 => 0.0030949s
10/24/2022 14:01:10 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T21:01:10','InitialTables_20221023001');
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 migrated
10/24/2022 14:01:10 => 0.0109534s
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 14:01:10 -> 15 Insert operations completed in 00:00:00.0220774 taking an average of 00:00:00.0014718
10/24/2022 14:01:10 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T21:01:10','InitialSeed_20221024001');
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 migrated
10/24/2022 14:01:10 => 0.004683s
