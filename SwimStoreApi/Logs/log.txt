 G Application Starting Up!
 G HTTP "GET" "/" responded 200 in 22.1047 ms
08/24/2022 07:41:20 Application Starting Up!
08/24/2022 07:41:21 HTTP "GET" "/" responded 200 in 19.0800 ms
08/24/2022 07:43:53 Application Starting Up!
08/24/2022 07:43:54 HTTP "GET" "/" responded 200 in 20.5696 ms
08/24/2022 08:37:24 Application Starting Up!
08/24/2022 08:37:24 HTTP "GET" "/" responded 200 in 19.6300 ms
08/24/2022 09:31:09 Application Starting Up!
08/24/2022 09:31:09 HTTP "GET" "/" responded 200 in 19.0850 ms
08/24/2022 09:31:44 HTTP "POST" "/graphql" responded 200 in 599.9970 ms
08/24/2022 09:32:41 Application Starting Up!
08/24/2022 09:32:42 HTTP "GET" "/" responded 200 in 18.3406 ms
08/24/2022 09:33:02 Application Starting Up!
08/24/2022 09:33:03 HTTP "GET" "/" responded 200 in 22.1983 ms
08/24/2022 10:01:43 Application Starting Up!
08/24/2022 10:01:43 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:01:53 Application Starting Up!
08/24/2022 10:01:53 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:02:04 Application Starting Up!
08/24/2022 10:02:04 HTTP "GET" "/" responded 200 in 20.1238 ms
08/24/2022 10:03:08 Application Starting Up!
08/24/2022 10:03:09 HTTP "GET" "/" responded 200 in 21.3624 ms
08/24/2022 10:04:05 Application Starting Up!
08/24/2022 10:04:06 HTTP "GET" "/" responded 200 in 21.1222 ms
08/24/2022 10:07:49 Application Starting Up!
08/24/2022 10:07:49 HTTP "GET" "/" responded 200 in 20.5878 ms
08/24/2022 10:08:10 HTTP "POST" "/graphql" responded 500 in 5351.4754 ms
08/24/2022 10:09:10 Microsoft.AspNetCore.WebApplicationServiceCollection
08/24/2022 10:09:10 Application Starting Up!
08/24/2022 10:09:11 HTTP "GET" "/" responded 200 in 18.2176 ms
08/24/2022 10:09:38 System.Collections.Generic.List`1[Microsoft.Extensions.DependencyInjection.ServiceDescriptor]
08/24/2022 10:09:38 Application Starting Up!
08/24/2022 10:09:39 HTTP "GET" "/" responded 200 in 19.0370 ms
08/24/2022 10:16:03 Application Starting Up!
08/24/2022 10:16:04 HTTP "GET" "/" responded 200 in 21.3468 ms
08/24/2022 10:16:07 sf_product_get_all
08/24/2022 10:16:12 HTTP "POST" "/graphql" responded 500 in 5060.4435 ms
08/24/2022 10:16:51 Application Starting Up!
08/24/2022 10:16:51 HTTP "GET" "/" responded 200 in 23.2194 ms
08/24/2022 10:17:16 Application Starting Up!
08/24/2022 10:17:18 HTTP "GET" "/" responded 200 in 17.7439 ms
08/24/2022 10:17:22 Getting Product - In Query()
08/24/2022 10:17:22 sf_product_get_all
08/24/2022 10:17:27 HTTP "POST" "/graphql" responded 500 in 4861.2603 ms
08/24/2022 10:25:41 Application Starting Up!
08/24/2022 10:25:42 HTTP "GET" "/" responded 200 in 19.3244 ms
08/24/2022 10:25:48 sf_product_get_all
08/24/2022 10:25:53 HTTP "POST" "/graphql" responded 500 in 4840.5834 ms
08/24/2022 10:29:44 Application Starting Up!
08/24/2022 10:29:44 Application startup exception
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
08/24/2022 10:29:44 The application failed to start correctly.
System.InvalidOperationException: Unable to resolve service for type 'Serilog.Extensions.Hosting.DiagnosticContext' while attempting to activate 'Serilog.AspNetCore.RequestLoggingMiddleware'.
   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)
   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)
   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass5_0.<UseMiddleware>b__0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.<ConfigureApplication>b__27_0(RequestDelegate next)
   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
   at Microsoft.AspNetCore.Builder.WebApplication.Run(String url)
   at Program.<Main>$(String[] args) in C:\CODE\Personal Projects\SwimStore\SwimStoreApi\Program.cs:line 38
08/24/2022 10:29:52 Application Starting Up!
08/24/2022 10:29:53 HTTP "GET" "/" responded 200 in 18.7213 ms
08/24/2022 10:31:27 HTTP "GET" "/" responded 200 in 18.4056 ms
08/24/2022 10:32:17 HTTP "GET" "/" responded 200 in 19.5416 ms
08/24/2022 10:32:22 sf_product_get_all
08/24/2022 10:32:26 HTTP "POST" "/graphql" responded 500 in 4843.7617 ms
08/24/2022 10:33:07 sf_product_get_all
08/24/2022 10:35:41 HTTP "GET" "/" responded 200 in 24.3228 ms
08/24/2022 10:35:51 sf_product_get_all
08/24/2022 10:43:08 HTTP "GET" "/" responded 200 in 25.2169 ms
08/24/2022 10:43:13 sf_product_get_all
08/24/2022 10:43:14 HTTP "POST" "/graphql" responded 200 in 1338.3783 ms
08/24/2022 10:44:39 HTTP "GET" "/" responded 200 in 19.8797 ms
08/24/2022 10:44:42 SELECT *FROM product
08/24/2022 10:44:43 HTTP "POST" "/graphql" responded 500 in 1011.5210 ms
08/24/2022 10:45:00 HTTP "GET" "/" responded 200 in 19.6857 ms
08/24/2022 10:45:05 SELECT * FROM product
08/24/2022 10:45:05 HTTP "POST" "/graphql" responded 500 in 993.2995 ms
08/24/2022 10:45:19 SELECT * FROM product
08/24/2022 10:45:19 HTTP "POST" "/graphql" responded 500 in 33.7598 ms
08/24/2022 10:45:28 SELECT * FROM product;
08/24/2022 10:45:28 HTTP "POST" "/graphql" responded 500 in 36.2530 ms
08/24/2022 10:56:33 HTTP "GET" "/" responded 200 in 23.6356 ms
08/24/2022 10:56:39 SELECT * FROM product
08/24/2022 10:56:40 HTTP "POST" "/graphql" responded 200 in 962.3569 ms
08/24/2022 10:57:08 HTTP "GET" "/" responded 200 in 18.1487 ms
08/24/2022 10:57:11 SELECT * FROM product
08/24/2022 10:57:11 HTTP "POST" "/graphql" responded 500 in 1065.5438 ms
08/24/2022 10:57:12 SELECT * FROM product
08/24/2022 10:57:12 HTTP "POST" "/graphql" responded 500 in 34.1831 ms
08/24/2022 10:59:54 HTTP "GET" "/" responded 200 in 31.4799 ms
08/24/2022 10:59:57 SELECT * 
					        FROM product
08/24/2022 10:59:58 HTTP "POST" "/graphql" responded 500 in 953.1066 ms
08/24/2022 11:01:17 HTTP "GET" "/" responded 200 in 20.4297 ms
08/24/2022 11:01:30 SELECT * 
					        FROM product
08/24/2022 11:01:31 HTTP "POST" "/graphql" responded 500 in 933.5284 ms
08/24/2022 11:02:00 HTTP "GET" "/" responded 200 in 22.1025 ms
08/24/2022 11:02:07 
08/24/2022 11:02:08 HTTP "POST" "/graphql" responded 500 in 923.3443 ms
08/24/2022 11:02:14 
08/24/2022 11:02:14 HTTP "POST" "/graphql" responded 500 in 65.2945 ms
08/24/2022 11:02:31 product
08/24/2022 11:02:31 HTTP "POST" "/graphql" responded 500 in 68.2036 ms
08/24/2022 11:07:37 HTTP "GET" "/" responded 200 in 19.3088 ms
08/24/2022 11:07:41 product
08/24/2022 11:07:41 HTTP "POST" "/graphql" responded 500 in 967.2119 ms
08/24/2022 11:07:42 product
08/24/2022 11:07:42 HTTP "POST" "/graphql" responded 500 in 33.5694 ms
08/24/2022 11:07:44 product
08/24/2022 11:07:44 HTTP "POST" "/graphql" responded 500 in 38.2334 ms
08/24/2022 11:08:03 SELECT * 
							FROM product
08/24/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 60.0180 ms
08/24/2022 11:19:59 HTTP "GET" "/" responded 200 in 19.5742 ms
08/24/2022 11:20:02 "SELECT * 
							FROM product"
08/24/2022 11:20:03 HTTP "POST" "/graphql" responded 500 in 971.3828 ms
08/24/2022 11:22:24 HTTP "GET" "/" responded 200 in 19.2989 ms
08/24/2022 11:22:29 "SELECT * FROM product"
08/24/2022 11:22:29 HTTP "POST" "/graphql" responded 500 in 961.9201 ms
08/24/2022 11:22:43 "SELECT * 
FROM product"
08/24/2022 11:22:43 HTTP "POST" "/graphql" responded 500 in 33.4582 ms
08/24/2022 11:25:21 HTTP "GET" "/" responded 200 in 23.6300 ms
08/24/2022 11:25:25 "
SELECT *
                            FROM product"
08/24/2022 11:25:25 HTTP "POST" "/graphql" responded 500 in 978.3579 ms
08/24/2022 11:29:39 SQL: 
 "SELECT * 
FROM product"
08/24/2022 11:29:40 HTTP "POST" "/graphql" responded 500 in 40.5551 ms
08/24/2022 11:29:52 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:29:53 HTTP "POST" "/graphql" responded 500 in 44.0350 ms
08/24/2022 11:30:21 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:21 HTTP "POST" "/graphql" responded 500 in 30.0045 ms
08/24/2022 11:30:22 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:22 HTTP "POST" "/graphql" responded 500 in 41.6641 ms
08/24/2022 11:30:32 SQL: 
"SELECT * 
FROM product"
08/24/2022 11:30:32 HTTP "POST" "/graphql" responded 200 in 91.6591 ms
08/24/2022 12:28:28 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:28 HTTP "POST" "/graphql" responded 200 in 39.3037 ms
08/24/2022 12:28:30 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:30 HTTP "POST" "/graphql" responded 200 in 4.3164 ms
08/24/2022 12:28:31 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:28:31 HTTP "POST" "/graphql" responded 200 in 4.3330 ms
08/24/2022 12:44:26 HTTP "GET" "/" responded 200 in 24.8644 ms
08/24/2022 12:44:29 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:29 HTTP "POST" "/graphql" responded 200 in 1021.2759 ms
08/24/2022 12:44:31 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:31 HTTP "POST" "/graphql" responded 200 in 8.1013 ms
08/24/2022 12:44:32 HTTP "POST" "/graphql" responded 200 in 47.5288 ms
08/24/2022 12:44:34 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:34 HTTP "POST" "/graphql" responded 200 in 26.8873 ms
08/24/2022 12:44:40 HTTP "POST" "/graphql" responded 200 in 1.0679 ms
08/24/2022 12:44:42 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:42 HTTP "POST" "/graphql" responded 200 in 4.3590 ms
08/24/2022 12:44:43 HTTP "POST" "/graphql" responded 200 in 0.7794 ms
08/24/2022 12:44:44 SQL: 
"SELECT * 
FROM product"
08/24/2022 12:44:44 HTTP "POST" "/graphql" responded 200 in 8.1220 ms
08/24/2022 12:44:45 HTTP "POST" "/graphql" responded 200 in 0.8424 ms
08/24/2022 12:44:48 HTTP "POST" "/graphql" responded 200 in 0.7891 ms
08/25/2022 13:27:34 HTTP "GET" "/" responded 200 in 27.9066 ms
08/25/2022 13:27:43 HTTP "POST" "/graphql" responded 200 in 596.8577 ms
08/25/2022 13:27:43 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:27:47 HTTP "POST" "/graphql" responded 500 in 4548.8667 ms
08/25/2022 13:27:49 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:27:53 HTTP "POST" "/graphql" responded 500 in 4134.5164 ms
08/25/2022 13:29:47 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:29:48 HTTP "POST" "/graphql" responded 200 in 430.9617 ms
08/25/2022 13:47:17 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:17 HTTP "POST" "/graphql" responded 200 in 1040.5982 ms
08/25/2022 13:47:19 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:19 HTTP "POST" "/graphql" responded 200 in 7.6769 ms
08/25/2022 13:47:23 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:47:23 HTTP "POST" "/graphql" responded 200 in 4.5361 ms
08/25/2022 13:52:41 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:52:42 HTTP "POST" "/graphql" responded 200 in 982.1267 ms
08/25/2022 13:52:45 SQL: 
"SELECT * 
FROM product"
08/25/2022 13:52:45 HTTP "POST" "/graphql" responded 200 in 7.9882 ms
08/25/2022 14:11:29 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:29 HTTP "POST" "/graphql" responded 200 in 964.9291 ms
08/25/2022 14:11:34 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:34 HTTP "POST" "/graphql" responded 200 in 38.1608 ms
08/25/2022 14:11:41 HTTP "POST" "/graphql" responded 200 in 52.8538 ms
08/25/2022 14:11:42 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:11:42 HTTP "POST" "/graphql" responded 200 in 26.1659 ms
08/25/2022 14:11:47 HTTP "POST" "/graphql" responded 200 in 1.0498 ms
08/25/2022 14:11:48 HTTP "POST" "/graphql" responded 200 in 0.7449 ms
08/25/2022 14:11:50 HTTP "POST" "/graphql" responded 200 in 1.0522 ms
08/25/2022 14:15:40 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:40 HTTP "POST" "/graphql" responded 200 in 1066.9206 ms
08/25/2022 14:15:45 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:45 HTTP "POST" "/graphql" responded 200 in 9.0637 ms
08/25/2022 14:15:56 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:56 HTTP "POST" "/graphql" responded 200 in 5.2609 ms
08/25/2022 14:15:57 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:15:57 HTTP "POST" "/graphql" responded 200 in 3.9194 ms
08/25/2022 14:16:00 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:00 HTTP "POST" "/graphql" responded 200 in 4.6391 ms
08/25/2022 14:16:01 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:01 HTTP "POST" "/graphql" responded 200 in 4.3101 ms
08/25/2022 14:16:15 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:15 HTTP "POST" "/graphql" responded 200 in 971.5449 ms
08/25/2022 14:16:17 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:17 HTTP "POST" "/graphql" responded 200 in 7.9383 ms
08/25/2022 14:16:53 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:54 HTTP "POST" "/graphql" responded 200 in 1092.2367 ms
08/25/2022 14:16:55 SQL: 
"SELECT * 
FROM product"
08/25/2022 14:16:55 HTTP "POST" "/graphql" responded 200 in 8.2452 ms
08/25/2022 14:33:10 HTTP "POST" "/graphql" responded 200 in 625.1890 ms
08/25/2022 14:33:11 SQL: 
"SELECT * 
FROM product
Where brand = {brand}"
08/25/2022 14:33:12 HTTP "POST" "/graphql" responded 500 in 476.2578 ms
08/25/2022 14:35:19 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:19 HTTP "POST" "/graphql" responded 200 in 75.6676 ms
08/25/2022 14:35:21 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:21 HTTP "POST" "/graphql" responded 200 in 4.2832 ms
08/25/2022 14:35:23 HTTP "POST" "/graphql" responded 200 in 1.2090 ms
08/25/2022 14:35:24 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:24 HTTP "POST" "/graphql" responded 200 in 13.3846 ms
08/25/2022 14:35:25 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:25 HTTP "POST" "/graphql" responded 200 in 3.7776 ms
08/25/2022 14:35:26 SQL: 
"SELECT * 
FROM product
Where brand = @brand"
08/25/2022 14:35:26 HTTP "POST" "/graphql" responded 200 in 4.3138 ms
08/25/2022 14:35:27 HTTP "POST" "/graphql" responded 200 in 0.8269 ms
08/25/2022 14:50:57 HTTP "POST" "/graphql" responded 200 in 957.9485 ms
08/25/2022 14:51:05 HTTP "POST" "/graphql" responded 200 in 7.2780 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.9968 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3372 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3412 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.2109 ms
08/25/2022 14:51:06 HTTP "POST" "/graphql" responded 200 in 3.3238 ms
08/25/2022 14:51:07 HTTP "POST" "/graphql" responded 200 in 3.5281 ms
08/25/2022 14:51:07 HTTP "POST" "/graphql" responded 200 in 2.8210 ms
08/25/2022 14:51:10 HTTP "POST" "/graphql" responded 200 in 48.5104 ms
08/25/2022 14:51:11 HTTP "POST" "/graphql" responded 200 in 3.3945 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 2.7546 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 2.9713 ms
08/25/2022 14:51:12 HTTP "POST" "/graphql" responded 200 in 3.1718 ms
08/25/2022 14:51:13 HTTP "POST" "/graphql" responded 200 in 2.7712 ms
08/25/2022 14:51:13 HTTP "POST" "/graphql" responded 200 in 2.9452 ms
08/25/2022 14:51:15 HTTP "POST" "/graphql" responded 200 in 3.3103 ms
08/25/2022 14:52:29 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:29 HTTP "POST" "/graphql" responded 200 in 987.2373 ms
08/25/2022 14:52:37 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:37 HTTP "POST" "/graphql" responded 200 in 8.5888 ms
08/25/2022 14:52:39 ====== Postgres Call -> Stored Function ======
"sf_product_get_all"
08/25/2022 14:52:39 HTTP "POST" "/graphql" responded 200 in 4.8238 ms
08/25/2022 14:53:04 ====== Postgres Call -> Stored Function ======
		"sf_product_get_all"
08/25/2022 14:53:04 HTTP "POST" "/graphql" responded 200 in 991.1210 ms
08/25/2022 14:53:26 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 14:53:27 HTTP "POST" "/graphql" responded 200 in 996.3529 ms
08/25/2022 14:54:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 14:54:15 HTTP "POST" "/graphql" responded 200 in 1038.5308 ms
08/25/2022 16:26:54 HTTP "POST" "/graphql" responded 200 in 625.6003 ms
08/25/2022 16:26:54 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:26:55 HTTP "POST" "/graphql" responded 200 in 455.0724 ms
08/25/2022 16:26:56 HTTP "POST" "/graphql" responded 200 in 1.9149 ms
08/25/2022 16:26:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:26:57 HTTP "POST" "/graphql" responded 200 in 27.7118 ms
08/25/2022 16:26:59 HTTP "POST" "/graphql" responded 200 in 0.8519 ms
08/25/2022 16:27:14 HTTP "POST" "/graphql" responded 200 in 0.9752 ms
08/25/2022 16:27:28 HTTP "POST" "/graphql" responded 200 in 0.7660 ms
08/25/2022 16:27:32 HTTP "POST" "/graphql" responded 200 in 1.1854 ms
08/25/2022 16:27:36 HTTP "POST" "/graphql" responded 200 in 0.9049 ms
08/25/2022 16:28:58 HTTP "GET" "/graphql-voyager" responded 404 in 0.0309 ms
08/25/2022 16:32:49 HTTP "POST" "/graphql" responded 200 in 619.5005 ms
08/25/2022 16:32:52 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:32:52 HTTP "POST" "/graphql" responded 200 in 382.4042 ms
08/25/2022 16:33:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:33:58 HTTP "POST" "/graphql" responded 200 in 7.9051 ms
08/25/2022 16:34:01 HTTP "POST" "/graphql" responded 200 in 1.0318 ms
08/25/2022 16:34:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:02 HTTP "POST" "/graphql" responded 200 in 3.9455 ms
08/25/2022 16:34:04 HTTP "POST" "/graphql" responded 200 in 0.7846 ms
08/25/2022 16:34:05 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:05 HTTP "POST" "/graphql" responded 200 in 22.2866 ms
08/25/2022 16:34:08 HTTP "POST" "/graphql" responded 200 in 0.7596 ms
08/25/2022 16:34:09 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 16:34:09 HTTP "POST" "/graphql" responded 200 in 4.0992 ms
08/25/2022 16:37:30 HTTP "GET" "/graphql-voyager" responded 200 in 101.5100 ms
08/25/2022 16:37:31 HTTP "POST" "/graphql" responded 200 in 648.2033 ms
08/25/2022 16:39:05 HTTP "GET" "/graphql-voyager" responded 200 in 66.0717 ms
08/25/2022 16:39:06 HTTP "POST" "/graphql" responded 200 in 648.3458 ms
08/25/2022 16:39:45 HTTP "POST" "/graphql" responded 200 in 6.2942 ms
08/25/2022 16:39:46 HTTP "POST" "/graphql" responded 200 in 2.8205 ms
08/25/2022 18:08:04 HTTP "POST" "/graphql" responded 200 in 675.1871 ms
08/25/2022 18:08:07 HTTP "POST" "/graphql" responded 200 in 1.6886 ms
08/25/2022 18:08:08 HTTP "POST" "/graphql" responded 200 in 2.1443 ms
08/25/2022 18:08:10 HTTP "POST" "/graphql" responded 200 in 0.8320 ms
08/25/2022 18:08:11 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:16 HTTP "POST" "/graphql" responded 500 in 4586.2233 ms
08/25/2022 18:08:19 HTTP "POST" "/graphql" responded 200 in 4080.6926 ms
08/25/2022 18:08:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:08:58 HTTP "POST" "/graphql" responded 200 in 374.1224 ms
08/25/2022 18:09:09 HTTP "POST" "/graphql" responded 200 in 1.0114 ms
08/25/2022 18:09:11 HTTP "POST" "/graphql" responded 200 in 1.0633 ms
08/25/2022 18:09:33 HTTP "GET" "/graphql-voyager" responded 200 in 77.2143 ms
08/25/2022 18:09:33 HTTP "POST" "/graphql" responded 200 in 1.3252 ms
08/25/2022 18:09:33 HTTP "GET" "/favicon.ico" responded 404 in 0.0618 ms
08/25/2022 18:12:09 HTTP "GET" "/graphql-voyager" responded 200 in 130.4715 ms
08/25/2022 18:12:10 HTTP "POST" "/graphql" responded 200 in 669.9622 ms
08/25/2022 18:19:55 HTTP "POST" "/graphql" responded 500 in 148.3774 ms
08/25/2022 18:22:33 HTTP "POST" "/graphql" responded 500 in 611.2510 ms
08/25/2022 18:22:35 HTTP "POST" "/graphql" responded 500 in 1.7959 ms
08/25/2022 18:22:37 HTTP "POST" "/graphql" responded 500 in 1.7800 ms
08/25/2022 18:22:45 HTTP "POST" "/graphql" responded 500 in 0.7732 ms
08/25/2022 18:23:44 HTTP "POST" "/graphql" responded 200 in 609.6548 ms
08/25/2022 18:23:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:45 HTTP "POST" "/graphql" responded 200 in 556.6983 ms
08/25/2022 18:23:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:46 HTTP "POST" "/graphql" responded 200 in 8.5113 ms
08/25/2022 18:23:47 HTTP "POST" "/graphql" responded 200 in 1.1425 ms
08/25/2022 18:23:48 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:48 HTTP "POST" "/graphql" responded 200 in 4.1988 ms
08/25/2022 18:23:49 HTTP "POST" "/graphql" responded 200 in 0.8951 ms
08/25/2022 18:23:50 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:50 HTTP "POST" "/graphql" responded 200 in 26.9644 ms
08/25/2022 18:23:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:23:58 HTTP "POST" "/graphql" responded 200 in 4.8842 ms
08/25/2022 18:24:34 HTTP "POST" "/graphql" responded 200 in 0.8100 ms
08/25/2022 18:24:35 HTTP "POST" "/graphql" responded 500 in 30.1779 ms
08/25/2022 18:25:50 HTTP "POST" "/graphql" responded 200 in 620.9402 ms
08/25/2022 18:25:50 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:25:51 HTTP "POST" "/graphql" responded 200 in 380.8893 ms
08/25/2022 18:25:53 HTTP "POST" "/graphql" responded 200 in 2.3020 ms
08/25/2022 18:25:54 HTTP "POST" "/graphql" responded 200 in 0.9510 ms
08/25/2022 18:25:59 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:25:59 HTTP "POST" "/graphql" responded 200 in 25.7345 ms
08/25/2022 18:26:01 HTTP "POST" "/graphql" responded 200 in 1.2998 ms
08/25/2022 18:26:08 ====== Postgres Call -> SQL ======
	"INSERT INTO product(name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:26:08 HTTP "POST" "/graphql" responded 500 in 6549.9400 ms
08/25/2022 18:27:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product(name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:27:48 HTTP "POST" "/graphql" responded 500 in 45.3235 ms
08/25/2022 18:28:24 HTTP "POST" "/graphql" responded 200 in 611.9720 ms
08/25/2022 18:28:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:28:24 HTTP "POST" "/graphql" responded 200 in 379.7459 ms
08/25/2022 18:28:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:28:45 HTTP "POST" "/graphql" responded 200 in 8.2010 ms
08/25/2022 18:28:46 HTTP "POST" "/graphql" responded 200 in 0.9536 ms
08/25/2022 18:28:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:28:47 HTTP "POST" "/graphql" responded 500 in 116.1132 ms
08/25/2022 18:29:06 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:29:20 HTTP "POST" "/graphql" responded 500 in 22740.9618 ms
08/25/2022 18:29:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:45:40 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:45:41 HTTP "POST" "/graphql" responded 500 in 5331.6570 ms
08/25/2022 18:46:33 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:46:33 HTTP "POST" "/graphql" responded 500 in 747.2145 ms
08/25/2022 18:46:40 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:46:40 HTTP "POST" "/graphql" responded 500 in 52.8246 ms
08/25/2022 18:47:05 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:47:16 HTTP "POST" "/graphql" responded 500 in 17012.8669 ms
08/25/2022 18:47:20 HTTP "POST" "/graphql" responded 200 in 39.7964 ms
08/25/2022 18:47:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:21 HTTP "POST" "/graphql" responded 200 in 347.9557 ms
08/25/2022 18:47:23 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:23 HTTP "POST" "/graphql" responded 200 in 6.9458 ms
08/25/2022 18:47:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:47:24 HTTP "POST" "/graphql" responded 200 in 3.4823 ms
08/25/2022 18:47:34 HTTP "POST" "/graphql" responded 200 in 1.0256 ms
08/25/2022 18:48:04 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:50:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:50:25 HTTP "POST" "/graphql" responded 200 in 954.0186 ms
08/25/2022 18:50:30 HTTP "POST" "/graphql" responded 200 in 80.3832 ms
08/25/2022 18:50:31 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:50:31 HTTP "POST" "/graphql" responded 200 in 25.3695 ms
08/25/2022 18:50:35 HTTP "POST" "/graphql" responded 200 in 1.4703 ms
08/25/2022 18:50:44 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:52:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:25 HTTP "POST" "/graphql" responded 200 in 639.5585 ms
08/25/2022 18:52:25 HTTP "POST" "/graphql" responded 200 in 410.8815 ms
08/25/2022 18:52:31 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:31 HTTP "POST" "/graphql" responded 200 in 8.0798 ms
08/25/2022 18:52:34 HTTP "POST" "/graphql" responded 200 in 0.9985 ms
08/25/2022 18:52:34 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:34 HTTP "POST" "/graphql" responded 200 in 3.9263 ms
08/25/2022 18:52:40 HTTP "POST" "/graphql" responded 200 in 0.8912 ms
08/25/2022 18:52:43 HTTP "POST" "/graphql" responded 200 in 0.8804 ms
08/25/2022 18:52:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:52:46 HTTP "POST" "/graphql" responded 200 in 3.9800 ms
08/25/2022 18:52:49 HTTP "POST" "/graphql" responded 200 in 0.8563 ms
08/25/2022 18:52:53 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:53:42 Format of the initialization string does not conform to specification starting at index 0.
08/25/2022 18:53:43 HTTP "POST" "/graphql" responded 500 in 52921.5026 ms
08/25/2022 18:55:35 HTTP "POST" "/graphql" responded 200 in 622.6155 ms
08/25/2022 18:55:35 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 18:55:35 HTTP "POST" "/graphql" responded 200 in 374.7051 ms
08/25/2022 18:55:37 HTTP "POST" "/graphql" responded 200 in 2.0431 ms
08/25/2022 18:55:42 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 18:56:20 23505: duplicate key value violates unique constraint "product_pkey"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
08/25/2022 18:56:20 HTTP "POST" "/graphql" responded 500 in 42302.0389 ms
08/25/2022 19:05:02 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:05:23 HTTP "POST" "/graphql" responded 500 in 21300.4109 ms
08/25/2022 19:05:47 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:05:47 HTTP "POST" "/graphql" responded 500 in 1079.4120 ms
08/25/2022 19:06:24 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:06:24 HTTP "POST" "/graphql" responded 500 in 29.0458 ms
08/25/2022 19:08:01 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:08:01 HTTP "POST" "/graphql" responded 500 in 20.7919 ms
08/25/2022 19:09:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:09:35 HTTP "POST" "/graphql" responded 500 in 1040.1120 ms
08/25/2022 19:11:23 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:11:23 HTTP "POST" "/graphql" responded 500 in 30.5118 ms
08/25/2022 19:11:29 HTTP "POST" "/graphql" responded 200 in 39.8724 ms
08/25/2022 19:11:30 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:11:30 HTTP "POST" "/graphql" responded 200 in 31.2915 ms
08/25/2022 19:11:46 HTTP "POST" "/graphql" responded 200 in 1.4716 ms
08/25/2022 19:13:03 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:14:11 HTTP "POST" "/graphql" responded 500 in 84179.2029 ms
08/25/2022 19:15:34 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:15:39 HTTP "POST" "/graphql" responded 500 in 12993.2738 ms
08/25/2022 19:18:10 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:18:26 HTTP "POST" "/graphql" responded 500 in 24232.3318 ms
08/25/2022 19:20:35 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:20:56 HTTP "POST" "/graphql" responded 500 in 20795.1529 ms
08/25/2022 19:21:48 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:21:56 HTTP "POST" "/graphql" responded 200 in 8344.6707 ms
08/25/2022 19:27:53 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:53 HTTP "POST" "/graphql" responded 200 in 977.4108 ms
08/25/2022 19:27:57 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:57 HTTP "POST" "/graphql" responded 200 in 7.6635 ms
08/25/2022 19:27:59 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:27:59 HTTP "POST" "/graphql" responded 200 in 6.3289 ms
08/25/2022 19:28:09 HTTP "POST" "/graphql" responded 200 in 59.2412 ms
08/25/2022 19:28:50 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
08/25/2022 19:28:50 HTTP "POST" "/graphql" responded 200 in 85.2548 ms
08/25/2022 19:28:52 HTTP "POST" "/graphql" responded 200 in 1.0310 ms
08/25/2022 19:28:53 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:28:53 HTTP "POST" "/graphql" responded 200 in 4.1186 ms
08/25/2022 19:36:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 19:36:03 HTTP "POST" "/graphql" responded 200 in 966.9424 ms
08/25/2022 20:38:30 HTTP "POST" "/graphql" responded 200 in 669.2980 ms
08/25/2022 20:38:32 HTTP "POST" "/graphql" responded 200 in 2.0352 ms
08/25/2022 20:38:42 HTTP "POST" "/graphql" responded 200 in 2.2908 ms
08/25/2022 20:38:45 HTTP "POST" "/graphql" responded 200 in 1.5193 ms
08/25/2022 20:38:46 HTTP "POST" "/graphql" responded 200 in 0.8501 ms
08/25/2022 20:39:22 HTTP "POST" "/graphql" responded 200 in 0.9210 ms
08/25/2022 20:39:24 HTTP "POST" "/graphql" responded 200 in 1.2989 ms
08/25/2022 20:39:26 HTTP "POST" "/graphql" responded 200 in 0.9185 ms
08/25/2022 20:39:29 HTTP "POST" "/graphql" responded 200 in 0.9284 ms
08/25/2022 20:39:37 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:39:38 HTTP "POST" "/graphql" responded 500 in 857.9580 ms
08/25/2022 20:44:00 HTTP "POST" "/graphql" responded 200 in 1.2417 ms
08/25/2022 20:44:01 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:44:01 HTTP "POST" "/graphql" responded 200 in 74.1984 ms
08/25/2022 20:44:07 HTTP "POST" "/graphql" responded 200 in 0.8660 ms
08/25/2022 20:44:12 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:44:12 HTTP "POST" "/graphql" responded 500 in 54.5612 ms
08/25/2022 20:44:16 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender)
WHERE id = @id 
RETURNING *"
08/25/2022 20:44:16 HTTP "POST" "/graphql" responded 500 in 52.6213 ms
08/25/2022 20:45:03 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:45:03 HTTP "POST" "/graphql" responded 200 in 650.6218 ms
08/25/2022 20:45:03 HTTP "POST" "/graphql" responded 200 in 474.7347 ms
08/25/2022 20:45:07 HTTP "POST" "/graphql" responded 200 in 1.9728 ms
08/25/2022 20:45:08 ====== Postgres Call -> SQL ======
	"Update product
SET name = '@name', original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = '@brand', gender = '@gender'
WHERE id = @id 
RETURNING *"
08/25/2022 20:45:08 HTTP "POST" "/graphql" responded 500 in 151.3847 ms
08/25/2022 20:45:35 HTTP "POST" "/graphql" responded 200 in 639.8537 ms
08/25/2022 20:45:35 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/25/2022 20:45:36 HTTP "POST" "/graphql" responded 200 in 378.4239 ms
08/25/2022 20:45:38 HTTP "POST" "/graphql" responded 200 in 2.0772 ms
08/25/2022 20:45:43 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:45:43 HTTP "POST" "/graphql" responded 200 in 103.1180 ms
08/25/2022 20:46:10 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:46:10 HTTP "POST" "/graphql" responded 200 in 5.8469 ms
08/25/2022 20:47:25 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/25/2022 20:47:25 HTTP "POST" "/graphql" responded 500 in 110.1035 ms
08/26/2022 11:44:31 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:44:32 HTTP "POST" "/graphql" responded 200 in 1226.2334 ms
08/26/2022 11:44:41 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:44:41 HTTP "POST" "/graphql" responded 200 in 9.9021 ms
08/26/2022 11:44:44 HTTP "POST" "/graphql" responded 200 in 42.0275 ms
08/26/2022 11:44:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/26/2022 11:44:45 HTTP "POST" "/graphql" responded 200 in 33.6763 ms
08/26/2022 11:44:48 HTTP "POST" "/graphql" responded 200 in 1.5926 ms
08/26/2022 11:45:00 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/26/2022 11:45:00 HTTP "POST" "/graphql" responded 200 in 5.7039 ms
08/29/2022 15:41:10 HTTP "POST" "/graphql" responded 200 in 776.1513 ms
08/29/2022 15:41:10 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:10 HTTP "POST" "/graphql" responded 200 in 1290.6767 ms
08/29/2022 15:41:15 HTTP "POST" "/graphql" responded 200 in 2.3092 ms
08/29/2022 15:41:20 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
08/29/2022 15:41:20 HTTP "POST" "/graphql" responded 200 in 145.0702 ms
08/29/2022 15:41:23 HTTP "POST" "/graphql" responded 200 in 1.4678 ms
08/29/2022 15:41:24 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:24 HTTP "POST" "/graphql" responded 200 in 4.4391 ms
08/29/2022 15:41:28 HTTP "POST" "/graphql" responded 200 in 1.2761 ms
08/29/2022 15:41:29 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:29 HTTP "POST" "/graphql" responded 200 in 3.8827 ms
08/29/2022 15:41:35 HTTP "POST" "/graphql" responded 200 in 1.1724 ms
08/29/2022 15:41:36 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
08/29/2022 15:41:36 HTTP "POST" "/graphql" responded 200 in 19.3471 ms
09/13/2022 15:54:06 HTTP "POST" "/graphql" responded 200 in 792.6177 ms
09/13/2022 15:56:47 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/13/2022 15:56:52 HTTP "POST" "/graphql" responded 500 in 4622.8438 ms
09/13/2022 16:01:46 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/13/2022 16:01:50 HTTP "POST" "/graphql" responded 200 in 3937.1516 ms
09/14/2022 08:42:08 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:09 HTTP "POST" "/graphql" responded 200 in 1370.6445 ms
09/14/2022 08:42:12 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:12 HTTP "POST" "/graphql" responded 200 in 7.5976 ms
09/14/2022 08:42:13 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:13 HTTP "POST" "/graphql" responded 200 in 4.5774 ms
09/14/2022 08:42:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:14 HTTP "POST" "/graphql" responded 200 in 5.1431 ms
09/14/2022 08:42:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:15 HTTP "POST" "/graphql" responded 200 in 3.7901 ms
09/14/2022 08:42:16 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:42:16 HTTP "POST" "/graphql" responded 200 in 4.0122 ms
09/14/2022 08:44:34 HTTP "POST" "/graphql" responded 200 in 50.9096 ms
09/14/2022 08:44:41 HTTP "POST" "/graphql" responded 200 in 1.0449 ms
09/14/2022 08:44:43 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:44:43 HTTP "POST" "/graphql" responded 200 in 4.4136 ms
09/14/2022 08:44:45 HTTP "POST" "/graphql" responded 200 in 1.0739 ms
09/14/2022 08:44:49 HTTP "POST" "/graphql" responded 200 in 1.0285 ms
09/14/2022 08:44:50 HTTP "POST" "/graphql" responded 200 in 0.8898 ms
09/14/2022 08:44:51 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:44:52 HTTP "POST" "/graphql" responded 200 in 28.3526 ms
09/14/2022 08:44:56 HTTP "POST" "/graphql" responded 200 in 0.9073 ms
09/14/2022 08:45:02 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:45:02 HTTP "POST" "/graphql" responded 200 in 4.0843 ms
09/14/2022 08:45:05 HTTP "POST" "/graphql" responded 200 in 0.9344 ms
09/14/2022 08:45:19 HTTP "POST" "/graphql" responded 200 in 1.0120 ms
09/14/2022 08:45:20 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:45:20 HTTP "POST" "/graphql" responded 200 in 6.2921 ms
09/14/2022 08:45:30 HTTP "POST" "/graphql" responded 200 in 0.9517 ms
09/14/2022 08:45:41 HTTP "POST" "/graphql" responded 200 in 0.9701 ms
09/14/2022 08:45:42 HTTP "POST" "/graphql" responded 200 in 1.0281 ms
09/14/2022 08:45:54 HTTP "POST" "/graphql" responded 200 in 1.5659 ms
09/14/2022 08:45:58 HTTP "POST" "/graphql" responded 200 in 0.8656 ms
09/14/2022 08:45:59 HTTP "POST" "/graphql" responded 200 in 0.8789 ms
09/14/2022 08:46:01 HTTP "POST" "/graphql" responded 200 in 0.8552 ms
09/14/2022 08:46:01 HTTP "POST" "/graphql" responded 200 in 0.8795 ms
09/14/2022 08:46:19 HTTP "GET" "/graphql-voyager" responded 200 in 77.2210 ms
09/14/2022 08:46:21 HTTP "POST" "/graphql" responded 200 in 1.9633 ms
09/14/2022 08:46:21 HTTP "GET" "/favicon.ico" responded 404 in 0.0723 ms
09/14/2022 08:50:07 HTTP "POST" "/graphql" responded 200 in 1.6079 ms
09/14/2022 08:50:11 HTTP "POST" "/graphql" responded 200 in 0.9411 ms
09/14/2022 08:50:34 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
09/14/2022 08:50:34 HTTP "POST" "/graphql" responded 200 in 176.9125 ms
09/14/2022 08:50:46 HTTP "POST" "/graphql" responded 200 in 0.9223 ms
09/14/2022 08:50:47 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:50:47 HTTP "POST" "/graphql" responded 200 in 5.5568 ms
09/14/2022 08:50:55 HTTP "POST" "/graphql" responded 200 in 0.8938 ms
09/14/2022 08:51:10 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, original_price = @original_price, current_price = @current_price, quantity_in_stock = @quantity_in_stock, brand = @brand, gender = @gender
WHERE id = @id 
RETURNING *"
09/14/2022 08:51:10 HTTP "POST" "/graphql" responded 200 in 5.0191 ms
09/14/2022 08:51:13 HTTP "POST" "/graphql" responded 200 in 1.0283 ms
09/14/2022 08:51:15 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
09/14/2022 08:51:15 HTTP "POST" "/graphql" responded 200 in 4.1559 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql" responded 301 in 13.8901 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/index.html" responded 200 in 122.8028 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/main.b66740cb.js" responded 200 in 42.2166 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/css/main.91faccc5.css" responded 200 in 41.4888 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/601.725d3873.js" responded 200 in 46.0608 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/14.c7f124f0.chunk.js" responded 200 in 4.6038 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/996.e07faaf0.chunk.js" responded 200 in 4.7786 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/502.42e91a67.chunk.js" responded 200 in 23.0059 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/favicon.svg" responded 200 in 1.5894 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 1.0368 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/favicon.ico" responded 200 in 6.1261 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/696.37f75272.chunk.js" responded 200 in 0.5144 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/338.5d3af481.chunk.js" responded 200 in 0.8093 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/css/645.4594131c.chunk.css" responded 200 in 1.0123 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/27.ba4cc8cb.chunk.js" responded 200 in 2.2790 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/400.a44ded47.chunk.js" responded 200 in 0.5755 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/498.bacf030a.chunk.js" responded 200 in 4.6583 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/329.d8262f45.chunk.js" responded 200 in 17.3557 ms
10/18/2022 11:12:54 HTTP "GET" "/graphql/static/js/645.5c961458.chunk.js" responded 200 in 43.4097 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/808.4d7b0362.chunk.js" responded 200 in 0.3313 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/document.467d4add.chunk.js" responded 200 in 2.8722 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/257.affcdb08.chunk.js" responded 200 in 0.2531 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/css/899.21d34220.chunk.css" responded 200 in 0.5155 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/549.d94347d9.chunk.js" responded 200 in 5.0690 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/899.68673d25.chunk.js" responded 200 in 5.7715 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 30.1345 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/738.c7b92eac.chunk.js" responded 200 in 0.5368 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/160.19d20a8d.chunk.js" responded 200 in 0.2594 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/598.46d9e9a5.chunk.js" responded 200 in 0.5891 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/203.a2923d0a.chunk.js" responded 200 in 0.2463 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/619.8c24313d.chunk.js" responded 200 in 0.3644 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 2.6613 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 3.7439 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/json.45f3c3ad.js" responded 200 in 5.3801 ms
10/18/2022 11:12:55 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 17.1363 ms
10/18/2022 11:12:56 HTTP "POST" "/graphql" responded 200 in 823.5790 ms
10/18/2022 11:12:56 HTTP "POST" "/graphql" responded 200 in 40.2195 ms
10/18/2022 11:12:56 HTTP "GET" "/graphql/static/media/codicon.ade705761eb7e702770d.ttf" responded 200 in 4.0973 ms
10/18/2022 11:12:58 HTTP "POST" "/graphql" responded 400 in 16.9103 ms
10/18/2022 11:13:04 HTTP "POST" "/graphql" responded 400 in 0.4154 ms
10/18/2022 11:13:05 HTTP "POST" "/graphql" responded 400 in 1.0656 ms
10/18/2022 11:13:09 HTTP "GET" "/graphql/static/js/992.ed31c4da.chunk.js" responded 200 in 0.6858 ms
10/18/2022 11:13:09 HTTP "GET" "/graphql/static/js/301.87a89801.chunk.js" responded 200 in 0.8537 ms
10/18/2022 11:13:10 HTTP "GET" "/graphql/static/js/928.18f52343.chunk.js" responded 200 in 0.0838 ms
10/18/2022 11:13:10 HTTP "GET" "/graphql/static/js/646.03849ed1.chunk.js" responded 200 in 0.5385 ms
10/18/2022 11:13:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:25 HTTP "POST" "/graphql" responded 200 in 742.1462 ms
10/18/2022 11:13:40 HTTP "POST" "/graphql" responded 200 in 4.0549 ms
10/18/2022 11:13:44 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:44 HTTP "POST" "/graphql" responded 200 in 5.7958 ms
10/18/2022 11:13:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:45 HTTP "POST" "/graphql" responded 200 in 6.8224 ms
10/18/2022 11:13:48 HTTP "POST" "/graphql" responded 200 in 0.9162 ms
10/18/2022 11:13:49 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:49 HTTP "POST" "/graphql" responded 200 in 4.4718 ms
10/18/2022 11:13:51 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:51 HTTP "POST" "/graphql" responded 200 in 4.8932 ms
10/18/2022 11:13:52 HTTP "POST" "/graphql" responded 200 in 1.0188 ms
10/18/2022 11:13:54 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:54 HTTP "POST" "/graphql" responded 200 in 24.6167 ms
10/18/2022 11:13:55 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:13:55 HTTP "POST" "/graphql" responded 200 in 6.3244 ms
10/18/2022 11:13:59 HTTP "POST" "/graphql" responded 200 in 1.0335 ms
10/18/2022 11:14:00 HTTP "POST" "/graphql" responded 200 in 0.9383 ms
10/18/2022 11:14:01 HTTP "POST" "/graphql" responded 200 in 0.9155 ms
10/18/2022 11:14:12 HTTP "POST" "/graphql" responded 200 in 0.8922 ms
10/18/2022 11:14:14 HTTP "POST" "/graphql" responded 200 in 1.3469 ms
10/18/2022 11:14:31 HTTP "POST" "/graphql" responded 200 in 0.9800 ms
10/18/2022 11:14:32 HTTP "POST" "/graphql" responded 200 in 0.9313 ms
10/18/2022 11:14:37 HTTP "POST" "/graphql" responded 200 in 1.1699 ms
10/18/2022 11:14:41 HTTP "POST" "/graphql" responded 200 in 0.9723 ms
10/18/2022 11:14:52 HTTP "POST" "/graphql" responded 200 in 1.2889 ms
10/18/2022 11:14:54 HTTP "POST" "/graphql" responded 200 in 0.8707 ms
10/18/2022 11:15:08 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:08 HTTP "POST" "/graphql" responded 200 in 6.3842 ms
10/18/2022 11:15:09 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:09 HTTP "POST" "/graphql" responded 200 in 4.6285 ms
10/18/2022 11:15:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:14 HTTP "POST" "/graphql" responded 200 in 6.8618 ms
10/18/2022 11:15:20 HTTP "POST" "/graphql" responded 200 in 1.2393 ms
10/18/2022 11:15:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:21 HTTP "POST" "/graphql" responded 200 in 5.7129 ms
10/18/2022 11:15:36 HTTP "POST" "/graphql" responded 200 in 0.8839 ms
10/18/2022 11:15:37 HTTP "POST" "/graphql" responded 200 in 0.8751 ms
10/18/2022 11:15:40 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:40 HTTP "POST" "/graphql" responded 200 in 7.9105 ms
10/18/2022 11:15:45 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:45 HTTP "POST" "/graphql" responded 200 in 5.4070 ms
10/18/2022 11:15:52 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:52 HTTP "POST" "/graphql" responded 200 in 4.8464 ms
10/18/2022 11:15:58 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:15:58 HTTP "POST" "/graphql" responded 200 in 6.2734 ms
10/18/2022 11:27:39 HTTP "POST" "/graphql" responded 200 in 762.5949 ms
10/18/2022 11:27:39 HTTP "GET" "/graphql-voyager" responded 200 in 79.0937 ms
10/18/2022 11:27:40 HTTP "POST" "/graphql" responded 200 in 2.5361 ms
10/18/2022 11:27:40 HTTP "GET" "/favicon.ico" responded 404 in 0.0875 ms
10/18/2022 11:30:14 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:15 HTTP "POST" "/graphql" responded 500 in 1197.0659 ms
10/18/2022 11:30:21 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:21 HTTP "POST" "/graphql" responded 500 in 38.9273 ms
10/18/2022 11:30:23 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:30:23 HTTP "POST" "/graphql" responded 500 in 39.0755 ms
10/18/2022 11:39:48 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = {brand}"
10/18/2022 11:39:48 HTTP "POST" "/graphql" responded 200 in 351663.1735 ms
10/18/2022 11:39:49 HTTP "GET" "/graphql-voyager" responded 200 in 60.7544 ms
10/18/2022 11:39:49 HTTP "POST" "/graphql" responded 200 in 55.8368 ms
10/18/2022 11:39:56 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:39:56 HTTP "POST" "/graphql" responded 200 in 5577.3608 ms
10/18/2022 11:39:59 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:39:59 HTTP "POST" "/graphql" responded 200 in 14.9020 ms
10/18/2022 11:40:00 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:00 HTTP "POST" "/graphql" responded 200 in 4.0586 ms
10/18/2022 11:40:03 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:03 HTTP "POST" "/graphql" responded 200 in 4.4856 ms
10/18/2022 11:40:13 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:13 HTTP "POST" "/graphql" responded 200 in 8.4728 ms
10/18/2022 11:40:17 HTTP "POST" "/graphql" responded 200 in 2.5089 ms
10/18/2022 11:40:18 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:18 HTTP "POST" "/graphql" responded 200 in 43.7918 ms
10/18/2022 11:40:26 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:26 HTTP "POST" "/graphql" responded 500 in 44.0808 ms
10/18/2022 11:40:28 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:28 HTTP "POST" "/graphql" responded 200 in 75.7427 ms
10/18/2022 11:40:34 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/18/2022 11:40:34 HTTP "POST" "/graphql" responded 200 in 4.2604 ms
10/18/2022 11:40:37 HTTP "POST" "/graphql" responded 200 in 1.1732 ms
10/18/2022 11:40:38 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:40:38 HTTP "POST" "/graphql" responded 200 in 12.2488 ms
10/18/2022 11:42:43 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:42:43 HTTP "POST" "/graphql" responded 200 in 4.4684 ms
10/18/2022 11:43:40 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:43:56 HTTP "POST" "/graphql" responded 200 in 15574.9126 ms
10/18/2022 11:44:34 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = '@brand'"
10/18/2022 11:44:45 HTTP "POST" "/graphql" responded 200 in 11664.0855 ms
10/18/2022 11:44:46 HTTP "GET" "/graphql-voyager" responded 200 in 2.4477 ms
10/18/2022 11:44:46 HTTP "POST" "/graphql" responded 200 in 1.3578 ms
10/18/2022 11:44:47 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:44:55 HTTP "POST" "/graphql" responded 200 in 7827.2041 ms
10/18/2022 11:45:05 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:05 HTTP "POST" "/graphql" responded 200 in 7.4609 ms
10/18/2022 11:45:06 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:06 HTTP "POST" "/graphql" responded 200 in 5.4221 ms
10/18/2022 11:45:07 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:07 HTTP "POST" "/graphql" responded 200 in 8.4567 ms
10/18/2022 11:45:08 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:08 HTTP "POST" "/graphql" responded 200 in 9.8299 ms
10/18/2022 11:45:54 HTTP "GET" "/graphql-voyager" responded 200 in 3.7844 ms
10/18/2022 11:45:54 HTTP "POST" "/graphql" responded 200 in 1.2918 ms
10/18/2022 11:45:56 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:45:56 HTTP "POST" "/graphql" responded 200 in 32.7106 ms
10/18/2022 11:46:02 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/18/2022 11:46:02 HTTP "POST" "/graphql" responded 200 in 7.6212 ms
10/20/2022 13:37:18 HTTP "GET" "/graphql" responded 301 in 13.6226 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/index.html" responded 200 in 87.6271 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/polyfills.14223cd3.js" responded 200 in 36.7679 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/917.df80a314.js" responded 200 in 32.9193 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/main.7da7210f.js" responded 200 in 0.6833 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/568.71498544.chunk.js" responded 200 in 1.2851 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/927.0676b810.chunk.js" responded 200 in 61.2691 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/css/styles.d1755a82.chunk.css" responded 200 in 62.6187 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/7.ef194ce7.chunk.js" responded 200 in 10.3099 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/696.23e5e4e1.chunk.js" responded 200 in 61.5309 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/641.c7e5a908.chunk.js" responded 200 in 53.5481 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/243.082d6152.chunk.js" responded 200 in 14.1104 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/494.af2a9e30.chunk.js" responded 200 in 73.2668 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/693.b625e9eb.chunk.js" responded 200 in 91.2927 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 0.1639 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/favicon.svg" responded 200 in 0.5962 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 17.8887 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/95.4f7bae42.chunk.js" responded 200 in 0.2513 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/619.d2a9edb4.chunk.js" responded 200 in 0.4156 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/json.50fb813a.js" responded 200 in 6.0982 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/document.8402b2ae.chunk.js" responded 200 in 0.4297 ms
10/20/2022 13:37:19 HTTP "GET" "/graphql/static/js/schema.2a88d762.chunk.js" responded 200 in 0.5315 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/160.5700f964.chunk.js" responded 200 in 0.2722 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/13.6582dd74.chunk.js" responded 200 in 0.1945 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/523.9581171d.chunk.js" responded 200 in 0.1969 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/319.15add1dd.chunk.js" responded 200 in 0.3019 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/97.cee6a1a5.chunk.js" responded 200 in 0.2298 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/101.e5dcd65e.chunk.js" responded 200 in 0.1836 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 2.5711 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 3.0297 ms
10/20/2022 13:37:20 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 10.8850 ms
10/20/2022 13:37:20 HTTP "POST" "/graphql" responded 200 in 720.7100 ms
10/20/2022 13:37:20 HTTP "POST" "/graphql" responded 200 in 32.6652 ms
10/20/2022 13:37:21 HTTP "GET" "/graphql/static/media/codicon.b797181c93b3755f4fa1.ttf" responded 200 in 13.4983 ms
10/20/2022 13:37:21 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/20/2022 13:37:22 HTTP "POST" "/graphql" responded 200 in 486.4968 ms
10/20/2022 13:37:25 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/20/2022 13:37:25 HTTP "POST" "/graphql" responded 200 in 8.3426 ms
10/23/2022 12:01:21 HTTP "POST" "/graphql" responded 200 in 655.6275 ms
10/23/2022 12:01:24 HTTP "GET" "/voyagr" responded 404 in 0.0581 ms
10/23/2022 12:01:28 HTTP "GET" "/voyager" responded 404 in 0.0032 ms
10/23/2022 12:01:30 HTTP "GET" "/voyager" responded 404 in 0.0027 ms
10/23/2022 12:01:34 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/23/2022 12:01:35 HTTP "POST" "/graphql" responded 200 in 1124.9352 ms
10/23/2022 12:01:41 HTTP "GET" "/graphql-voyager" responded 200 in 77.0673 ms
10/23/2022 12:01:42 HTTP "POST" "/graphql" responded 200 in 3.0825 ms
10/23/2022 12:01:43 HTTP "GET" "/favicon.ico" responded 404 in 0.0051 ms
10/23/2022 12:02:06 HTTP "POST" "/graphql" responded 200 in 1.4359 ms
10/23/2022 12:02:13 HTTP "POST" "/graphql" responded 200 in 1.0218 ms
10/23/2022 12:02:14 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/23/2022 12:02:14 HTTP "POST" "/graphql" responded 200 in 7.9186 ms
10/23/2022 12:02:19 HTTP "POST" "/graphql" responded 200 in 0.9784 ms
10/23/2022 12:02:21 HTTP "POST" "/graphql" responded 200 in 0.9071 ms
10/23/2022 12:02:33 HTTP "POST" "/graphql" responded 200 in 0.8830 ms
10/23/2022 12:02:35 HTTP "POST" "/graphql" responded 200 in 1.0181 ms
10/23/2022 12:02:36 HTTP "POST" "/graphql" responded 200 in 0.9109 ms
10/23/2022 12:02:36 HTTP "POST" "/graphql" responded 200 in 1.0413 ms
10/23/2022 12:02:37 HTTP "POST" "/graphql" responded 200 in 0.9343 ms
10/24/2022 11:18:33 There was an exception checking if table "VersionInfo" in null exists
System.ArgumentException: Keyword not supported: 'host'.
   at Microsoft.Data.Common.DbConnectionOptions.ParseInternal(Dictionary`2 parsetable, String connectionString, Boolean buildChain, Dictionary`2 synonyms, Boolean firstKey)
   at Microsoft.Data.Common.DbConnectionOptions..ctor(String connectionString, Dictionary`2 synonyms)
   at Microsoft.Data.SqlClient.SqlConnectionString..ctor(String connectionString)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnectionOptions(String connectionString, DbConnectionOptions previous)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions)
   at Microsoft.Data.SqlClient.SqlConnection.ConnectionString_Set(DbConnectionPoolKey key)
   at Microsoft.Data.SqlClient.SqlConnection.set_ConnectionString(String value)
   at FluentMigrator.Runner.Processors.GenericProcessorBase.<>c__DisplayClass6_1.<.ctor>b__1()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at FluentMigrator.Runner.Processors.GenericProcessorBase.EnsureConnectionIsOpen()
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.Exists(String template, Object[] args)
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.TableExists(String schemaName, String tableName)
10/24/2022 11:18:33 VersionMigration migrating
10/24/2022 11:25:51 There was an exception checking if table "VersionInfo" in null exists
System.ArgumentException: Keyword not supported: 'host'.
   at Microsoft.Data.Common.DbConnectionOptions.ParseInternal(Dictionary`2 parsetable, String connectionString, Boolean buildChain, Dictionary`2 synonyms, Boolean firstKey)
   at Microsoft.Data.Common.DbConnectionOptions..ctor(String connectionString, Dictionary`2 synonyms)
   at Microsoft.Data.SqlClient.SqlConnectionString..ctor(String connectionString)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnectionOptions(String connectionString, DbConnectionOptions previous)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions)
   at Microsoft.Data.SqlClient.SqlConnection.ConnectionString_Set(DbConnectionPoolKey key)
   at Microsoft.Data.SqlClient.SqlConnection.set_ConnectionString(String value)
   at FluentMigrator.Runner.Processors.GenericProcessorBase.<>c__DisplayClass6_1.<.ctor>b__1()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at FluentMigrator.Runner.Processors.GenericProcessorBase.EnsureConnectionIsOpen()
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.Exists(String template, Object[] args)
   at FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor.TableExists(String schemaName, String tableName)
10/24/2022 11:25:51 VersionMigration migrating
10/24/2022 11:26:51 VersionMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 CreateTable VersionInfo
10/24/2022 11:26:51 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 11:26:51 => 0.0198852s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionMigration migrated
10/24/2022 11:26:51 => 0.0366419s
10/24/2022 11:26:51 VersionUniqueMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 CreateIndex VersionInfo (Version)
10/24/2022 11:26:51 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 11:26:51 => 0.0122108s
10/24/2022 11:26:51 AlterTable VersionInfo
10/24/2022 11:26:51 
10/24/2022 11:26:51 => 0.001106s
10/24/2022 11:26:51 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 11:26:51 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 11:26:51 => 0.0024643s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionUniqueMigration migrated
10/24/2022 11:26:51 => 0.0058253s
10/24/2022 11:26:51 VersionDescriptionMigration migrating
10/24/2022 11:26:51 Beginning Transaction
10/24/2022 11:26:51 AlterTable VersionInfo
10/24/2022 11:26:51 
10/24/2022 11:26:51 => 0.0003824s
10/24/2022 11:26:51 CreateColumn VersionInfo Description String
10/24/2022 11:26:51 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 11:26:51 => 0.0073897s
10/24/2022 11:26:51 Committing Transaction
10/24/2022 11:26:51 VersionDescriptionMigration migrated
10/24/2022 11:26:51 => 0.0106878s
10/24/2022 11:26:51 Migrations
10/24/2022 12:05:04 Migrations
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:05:04 Beginning Transaction
10/24/2022 12:05:04 CreateTable Product
10/24/2022 12:05:04 CREATE TABLE "public"."Product" ();
10/24/2022 12:05:04 => 0.0208623s
10/24/2022 12:05:04 CreateTable Brand
10/24/2022 12:05:04 CREATE TABLE "public"."Brand" ();
10/24/2022 12:05:04 => 0.0030177s
10/24/2022 12:05:04 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:05:04','InitialTables_20221023001');
10/24/2022 12:05:04 Committing Transaction
10/24/2022 12:05:04 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:05:04 => 0.020565s
10/24/2022 12:33:16 VersionMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateTable VersionInfo
10/24/2022 12:33:16 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:33:16 => 0.0206086s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionMigration migrated
10/24/2022 12:33:16 => 0.0353379s
10/24/2022 12:33:16 VersionUniqueMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateIndex VersionInfo (Version)
10/24/2022 12:33:16 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:33:16 => 0.0128885s
10/24/2022 12:33:16 AlterTable VersionInfo
10/24/2022 12:33:16 
10/24/2022 12:33:16 => 0.0008614s
10/24/2022 12:33:16 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:33:16 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:33:16 => 0.0027178s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionUniqueMigration migrated
10/24/2022 12:33:16 => 0.005418s
10/24/2022 12:33:16 VersionDescriptionMigration migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 AlterTable VersionInfo
10/24/2022 12:33:16 
10/24/2022 12:33:16 => 0.0003315s
10/24/2022 12:33:16 CreateColumn VersionInfo Description String
10/24/2022 12:33:16 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:33:16 => 0.0061083s
10/24/2022 12:33:16 Committing Transaction
10/24/2022 12:33:16 VersionDescriptionMigration migrated
10/24/2022 12:33:16 => 0.0094639s
10/24/2022 12:33:16 Migrations
10/24/2022 12:33:16 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:33:16 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:33:16 Beginning Transaction
10/24/2022 12:33:16 CreateTable product
10/24/2022 12:33:16 CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:33:16 An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 22023: identity column type must be smallint, integer, or bigint

System.Exception: An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" uuid NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" uuid NOT NULL, "typeId" uuid NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 22023: identity column type must be smallint, integer, or bigint

 ---> Npgsql.PostgresException (0x80004005): 22023: identity column type must be smallint, integer, or bigint
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 22023
    MessageText: identity column type must be smallint, integer, or bigint
    File: sequence.c
    Line: 1390
    Routine: init_params
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 12:33:16 Rolling back transaction
10/24/2022 12:35:09 VersionMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateTable VersionInfo
10/24/2022 12:35:09 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:35:09 => 0.0184109s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionMigration migrated
10/24/2022 12:35:09 => 0.0327407s
10/24/2022 12:35:09 VersionUniqueMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateIndex VersionInfo (Version)
10/24/2022 12:35:09 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:35:09 => 0.0106122s
10/24/2022 12:35:09 AlterTable VersionInfo
10/24/2022 12:35:09 
10/24/2022 12:35:09 => 0.0007914s
10/24/2022 12:35:09 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:35:09 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:35:09 => 0.0024624s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionUniqueMigration migrated
10/24/2022 12:35:09 => 0.0043216s
10/24/2022 12:35:09 VersionDescriptionMigration migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 AlterTable VersionInfo
10/24/2022 12:35:09 
10/24/2022 12:35:09 => 0.000331s
10/24/2022 12:35:09 CreateColumn VersionInfo Description String
10/24/2022 12:35:09 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:35:09 => 0.006356s
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 VersionDescriptionMigration migrated
10/24/2022 12:35:09 => 0.0086177s
10/24/2022 12:35:09 Migrations
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:35:09 Beginning Transaction
10/24/2022 12:35:09 CreateTable product
10/24/2022 12:35:09 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0224197s
10/24/2022 12:35:09 CreateTable brand
10/24/2022 12:35:09 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0113968s
10/24/2022 12:35:09 CreateTable type
10/24/2022 12:35:09 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 12:35:09 => 0.0104565s
10/24/2022 12:35:09 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:35:09','InitialTables_20221023001');
10/24/2022 12:35:09 Committing Transaction
10/24/2022 12:35:09 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:35:09 => 0.0273113s
10/24/2022 12:46:10 Migrations
10/24/2022 12:46:10 20221023001: InitialTables_20221023001 (current)
10/24/2022 12:47:42 Migrations
10/24/2022 12:47:42 20221023001: InitialTables_20221023001 (current)
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 migrating
10/24/2022 12:47:42 Beginning Transaction
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 12:47:42 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 12:47:42 -> 3 Insert operations completed in 00:00:00.0103818 taking an average of 00:00:00.0034606
10/24/2022 12:47:42 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T19:47:42','InitialSeed_20221024001');
10/24/2022 12:47:42 Committing Transaction
10/24/2022 12:47:42 20221024001: InitialSeed_20221024001 migrated
10/24/2022 12:47:42 => 0.0177995s
10/24/2022 12:56:24 VersionMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateTable VersionInfo
10/24/2022 12:56:24 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 12:56:24 => 0.0327488s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionMigration migrated
10/24/2022 12:56:24 => 0.0524366s
10/24/2022 12:56:24 VersionUniqueMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateIndex VersionInfo (Version)
10/24/2022 12:56:24 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 12:56:24 => 0.0134318s
10/24/2022 12:56:24 AlterTable VersionInfo
10/24/2022 12:56:24 
10/24/2022 12:56:24 => 0.0012617s
10/24/2022 12:56:24 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 12:56:24 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 12:56:24 => 0.0028454s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionUniqueMigration migrated
10/24/2022 12:56:24 => 0.0062464s
10/24/2022 12:56:24 VersionDescriptionMigration migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 AlterTable VersionInfo
10/24/2022 12:56:24 
10/24/2022 12:56:24 => 0.0003624s
10/24/2022 12:56:24 CreateColumn VersionInfo Description String
10/24/2022 12:56:24 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 12:56:24 => 0.0103403s
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 VersionDescriptionMigration migrated
10/24/2022 12:56:24 => 0.014545s
10/24/2022 12:56:24 Migrations
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 CreateTable product
10/24/2022 12:56:24 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0230106s
10/24/2022 12:56:24 CreateTable brand
10/24/2022 12:56:24 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0123939s
10/24/2022 12:56:24 CreateTable type
10/24/2022 12:56:24 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 12:56:24 => 0.0098126s
10/24/2022 12:56:24 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T19:56:24','InitialTables_20221023001');
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 20221023001: InitialTables_20221023001 migrated
10/24/2022 12:56:24 => 0.0201557s
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 migrating
10/24/2022 12:56:24 Beginning Transaction
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 12:56:24 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 12:56:24 INSERT INTO "public"."type" ("name") VALUES ('goggles');
10/24/2022 12:56:24 -> 12 Insert operations completed in 00:00:00.0147528 taking an average of 00:00:00.0012294
10/24/2022 12:56:24 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T19:56:24','InitialSeed_20221024001');
10/24/2022 12:56:24 Committing Transaction
10/24/2022 12:56:24 20221024001: InitialSeed_20221024001 migrated
10/24/2022 12:56:24 => 0.0054097s
10/24/2022 13:11:58 Migrations
10/24/2022 13:11:58 20221023001: InitialTables_20221023001
10/24/2022 13:11:58 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:11:58 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:11:58 Beginning Transaction
10/24/2022 13:11:58 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:11:58 Committing Transaction
10/24/2022 13:11:59 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:11:59 => 0.0252701s
10/24/2022 13:12:41 Migrations
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:12:41 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:12:41 Beginning Transaction
10/24/2022 13:12:41 DeleteTable product
10/24/2022 13:12:41 DROP TABLE "public"."product";
10/24/2022 13:12:41 => 0.0081313s
10/24/2022 13:12:41 DeleteTable brand
10/24/2022 13:12:41 DROP TABLE "public"."brand";
10/24/2022 13:12:41 => 0.0019414s
10/24/2022 13:12:41 DeleteTable type
10/24/2022 13:12:41 DROP TABLE "public"."type";
10/24/2022 13:12:41 => 0.001963s
10/24/2022 13:12:41 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:12:41 Committing Transaction
10/24/2022 13:12:41 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:12:41 => 0.0298988s
10/24/2022 13:13:23 Migrations
10/24/2022 13:13:23 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:13:23 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:13:23 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:13:23 Beginning Transaction
10/24/2022 13:13:23 CreateTable product
10/24/2022 13:13:23 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:13:23 => 0.0288282s
10/24/2022 13:13:23 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:13:23 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:13:23 An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
The error was 42P01: relation "public.brand" does not exist

System.Exception: An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
The error was 42P01: relation "public.brand" does not exist

 ---> Npgsql.PostgresException (0x80004005): 42P01: relation "public.brand" does not exist
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P01
    MessageText: relation "public.brand" does not exist
    File: namespace.c
    Line: 428
    Routine: RangeVarGetRelidExtended
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:13:23 Rolling back transaction
10/24/2022 13:13:59 Migrations
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:13:59 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:13:59 Beginning Transaction
10/24/2022 13:13:59 CreateTable brand
10/24/2022 13:13:59 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.0411977s
10/24/2022 13:13:59 CreateTable type
10/24/2022 13:13:59 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.0108904s
10/24/2022 13:13:59 CreateTable product
10/24/2022 13:13:59 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:13:59 => 0.016864s
10/24/2022 13:13:59 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:13:59 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:13:59 => 0.009025s
10/24/2022 13:13:59 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:13:59 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:13:59 => 0.0030817s
10/24/2022 13:13:59 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:13:59','InitialTables_20221023001');
10/24/2022 13:13:59 Committing Transaction
10/24/2022 13:13:59 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:13:59 => 0.0207363s
10/24/2022 13:13:59 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:13:59 Beginning Transaction
10/24/2022 13:14:07 Rolling back transaction
10/24/2022 13:15:01 Migrations
10/24/2022 13:15:01 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:15:01 Beginning Transaction
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:15:01 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:15:01 INSERT INTO "public"."type" ("name") VALUES ('goggles');
10/24/2022 13:15:01 -> 12 Insert operations completed in 00:00:00.0186800 taking an average of 00:00:00.0015566
10/24/2022 13:15:01 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:15:01','InitialSeed_20221024001');
10/24/2022 13:15:01 Committing Transaction
10/24/2022 13:15:01 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:15:01 => 0.0134119s
10/24/2022 13:26:07 Migrations
10/24/2022 13:26:07 20221023001: InitialTables_20221023001
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:26:07 Beginning Transaction
10/24/2022 13:26:07 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:26:07 Committing Transaction
10/24/2022 13:26:07 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:26:07 => 0.022628s
10/24/2022 13:26:07 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:26:07 Beginning Transaction
10/24/2022 13:26:07 DeleteTable product
10/24/2022 13:26:07 DROP TABLE "public"."product";
10/24/2022 13:26:07 => 0.0039193s
10/24/2022 13:26:07 DeleteTable brand
10/24/2022 13:26:07 DROP TABLE "public"."brand";
10/24/2022 13:26:07 => 0.0012841s
10/24/2022 13:26:07 DeleteTable type
10/24/2022 13:26:07 DROP TABLE "public"."type";
10/24/2022 13:26:07 => 0.0013738s
10/24/2022 13:26:07 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:26:07 Committing Transaction
10/24/2022 13:26:07 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:26:07 => 0.0168213s
10/24/2022 13:26:26 Migrations
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:26:26 Beginning Transaction
10/24/2022 13:26:26 CreateTable brand
10/24/2022 13:26:26 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0335107s
10/24/2022 13:26:26 CreateTable type
10/24/2022 13:26:26 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0267051s
10/24/2022 13:26:26 CreateTable product
10/24/2022 13:26:26 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:26:26 => 0.0145098s
10/24/2022 13:26:26 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:26:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:26:26 => 0.0046468s
10/24/2022 13:26:26 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:26:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:26:26 => 0.0026408s
10/24/2022 13:26:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:26:26','InitialTables_20221023001');
10/24/2022 13:26:26 Committing Transaction
10/24/2022 13:26:26 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:26:26 => 0.0201861s
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:26:26 Beginning Transaction
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:26:26 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:26:26 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:26:26 -> 12 Insert operations completed in 00:00:00.0167659 taking an average of 00:00:00.0013971
10/24/2022 13:26:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:26:26','InitialSeed_20221024001');
10/24/2022 13:26:26 Committing Transaction
10/24/2022 13:26:26 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:26:26 => 0.0058736s
10/24/2022 13:45:52 Migrations
10/24/2022 13:45:52 20221023001: InitialTables_20221023001
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 (current)
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 reverting
10/24/2022 13:45:52 Beginning Transaction
10/24/2022 13:45:52 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221024001;
10/24/2022 13:45:52 Committing Transaction
10/24/2022 13:45:52 20221024001: InitialSeed_20221024001 reverted
10/24/2022 13:45:52 => 0.02532s
10/24/2022 13:45:52 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:45:52 Beginning Transaction
10/24/2022 13:45:52 DeleteTable product
10/24/2022 13:45:52 DROP TABLE "public"."product";
10/24/2022 13:45:52 => 0.0048194s
10/24/2022 13:45:52 DeleteTable brand
10/24/2022 13:45:52 DROP TABLE "public"."brand";
10/24/2022 13:45:52 => 0.0013803s
10/24/2022 13:45:52 DeleteTable type
10/24/2022 13:45:52 DROP TABLE "public"."type";
10/24/2022 13:45:52 => 0.0015585s
10/24/2022 13:45:52 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:45:52 Committing Transaction
10/24/2022 13:45:52 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:45:52 => 0.0251036s
10/24/2022 13:46:18 Migrations
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:46:18 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:46:18 Beginning Transaction
10/24/2022 13:46:18 CreateTable brand
10/24/2022 13:46:18 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0269408s
10/24/2022 13:46:18 CreateTable type
10/24/2022 13:46:18 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0135083s
10/24/2022 13:46:18 CreateTable product
10/24/2022 13:46:18 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brandId" integer NOT NULL, "typeId" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:46:18 => 0.0154011s
10/24/2022 13:46:18 CreateForeignKey FK_product_brandId_brand_id product(brandId) brand(id)
10/24/2022 13:46:18 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brandId_brand_id" FOREIGN KEY ("brandId") REFERENCES "public"."brand" ("id");
10/24/2022 13:46:18 => 0.0048814s
10/24/2022 13:46:18 CreateForeignKey FK_product_typeId_type_id product(typeId) type(id)
10/24/2022 13:46:18 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_typeId_type_id" FOREIGN KEY ("typeId") REFERENCES "public"."type" ("id");
10/24/2022 13:46:18 => 0.0028637s
10/24/2022 13:46:18 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:46:18','InitialTables_20221023001');
10/24/2022 13:46:18 Committing Transaction
10/24/2022 13:46:18 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:46:18 => 0.0214017s
10/24/2022 13:46:18 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:46:18 Beginning Transaction
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:46:18 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:46:18 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:46:18 INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:46:18 An error occured executing the following sql:
INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Id" of relation "product" does not exist

POSITION: 33

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("Id","Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES (0,'Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Id" of relation "product" does not exist

POSITION: 33

 ---> Npgsql.PostgresException (0x80004005): 42703: column "Id" of relation "product" does not exist

POSITION: 33
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "Id" of relation "product" does not exist
    Position: 33
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:46:18 Rolling back transaction
10/24/2022 13:47:50 Migrations
10/24/2022 13:47:50 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:47:50 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:47:50 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:47:50 Beginning Transaction
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:47:50 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:47:50 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:47:50 INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:47:50 An error occured executing the following sql:
INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Name" of relation "product" does not exist

POSITION: 33

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("Name","RetailPrice","CurrentPrice","Description","Features","Sku","BrandId","TypeId","Gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 42703: column "Name" of relation "product" does not exist

POSITION: 33

 ---> Npgsql.PostgresException (0x80004005): 42703: column "Name" of relation "product" does not exist

POSITION: 33
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "Name" of relation "product" does not exist
    Position: 33
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:47:50 Rolling back transaction
10/24/2022 13:55:09 Migrations
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:55:09 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 reverting
10/24/2022 13:55:09 Beginning Transaction
10/24/2022 13:55:09 DeleteTable product
10/24/2022 13:55:09 DROP TABLE "public"."product";
10/24/2022 13:55:09 => 0.0074402s
10/24/2022 13:55:09 DeleteTable brand
10/24/2022 13:55:09 DROP TABLE "public"."brand";
10/24/2022 13:55:09 => 0.0014885s
10/24/2022 13:55:09 DeleteTable type
10/24/2022 13:55:09 DROP TABLE "public"."type";
10/24/2022 13:55:09 => 0.0014085s
10/24/2022 13:55:09 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221023001;
10/24/2022 13:55:09 Committing Transaction
10/24/2022 13:55:09 20221023001: InitialTables_20221023001 reverted
10/24/2022 13:55:09 => 0.0269204s
10/24/2022 13:55:25 Migrations
10/24/2022 13:55:25 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 13:55:25 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:55:25 20221023001: InitialTables_20221023001 migrating
10/24/2022 13:55:25 Beginning Transaction
10/24/2022 13:55:25 CreateTable brand
10/24/2022 13:55:25 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 13:55:25 => 0.024759s
10/24/2022 13:55:25 CreateTable type
10/24/2022 13:55:25 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 13:55:26 => 0.0156208s
10/24/2022 13:55:26 CreateTable product
10/24/2022 13:55:26 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 13:55:26 => 0.01535s
10/24/2022 13:55:26 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 13:55:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 13:55:26 => 0.0057028s
10/24/2022 13:55:26 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 13:55:26 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 13:55:26 => 0.0032447s
10/24/2022 13:55:26 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T20:55:26','InitialTables_20221023001');
10/24/2022 13:55:26 Committing Transaction
10/24/2022 13:55:26 20221023001: InitialTables_20221023001 migrated
10/24/2022 13:55:26 => 0.0196977s
10/24/2022 13:55:26 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:55:26 Beginning Transaction
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:55:26 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:55:26 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 13:55:26 INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 13:55:26 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
The error was 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","CurrentPricurrent_pricece","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
The error was 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55

 ---> Npgsql.PostgresException (0x80004005): 42703: column "CurrentPricurrent_pricece" of relation "product" does not exist

POSITION: 55
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42703
    MessageText: column "CurrentPricurrent_pricece" of relation "product" does not exist
    Position: 55
    File: parse_target.c
    Line: 1061
    Routine: checkInsertTargets
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:55:26 Rolling back transaction
10/24/2022 13:56:03 Migrations
10/24/2022 13:56:03 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:56:03 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:56:03 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:56:03 Beginning Transaction
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:56:03 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:56:03 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:56:03 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:56:03 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: product
    ConstraintName: FK_product_brand_id_brand_id
    File: ri_triggers.c
    Line: 2528
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:56:03 Rolling back transaction
10/24/2022 13:57:42 Migrations
10/24/2022 13:57:42 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:57:42 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:57:42 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:57:42 Beginning Transaction
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:57:42 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:57:42 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:57:42 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 13:57:42 An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
The error was 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.

 ---> Npgsql.PostgresException (0x80004005): 23503: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"

DETAIL: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 23503
    MessageText: insert or update on table "product" violates foreign key constraint "FK_product_brand_id_brand_id"
    Detail: Detail redacted as it may contain sensitive data. Specify 'Include Error Detail' in the connection string to include this information.
    SchemaName: public
    TableName: product
    ConstraintName: FK_product_brand_id_brand_id
    File: ri_triggers.c
    Line: 2528
    Routine: ri_ReportViolation
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 13:57:42 Rolling back transaction
10/24/2022 13:59:08 Migrations
10/24/2022 13:59:08 20221023001: InitialTables_20221023001 (current)
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 migrating
10/24/2022 13:59:08 Beginning Transaction
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 13:59:08 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 13:59:08 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 13:59:08 -> 12 Insert operations completed in 00:00:00.0171811 taking an average of 00:00:00.0014317
10/24/2022 13:59:08 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T20:59:08','InitialSeed_20221024001');
10/24/2022 13:59:08 Committing Transaction
10/24/2022 13:59:08 20221024001: InitialSeed_20221024001 migrated
10/24/2022 13:59:08 => 0.0172756s
10/24/2022 14:00:11 VersionMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateTable VersionInfo
10/24/2022 14:00:11 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:00:11 => 0.019921s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionMigration migrated
10/24/2022 14:00:11 => 0.0350856s
10/24/2022 14:00:11 VersionUniqueMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateIndex VersionInfo (Version)
10/24/2022 14:00:11 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:00:11 => 0.0108161s
10/24/2022 14:00:11 AlterTable VersionInfo
10/24/2022 14:00:11 
10/24/2022 14:00:11 => 0.0009273s
10/24/2022 14:00:11 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:00:11 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:00:11 => 0.0025425s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionUniqueMigration migrated
10/24/2022 14:00:11 => 0.0044829s
10/24/2022 14:00:11 VersionDescriptionMigration migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 AlterTable VersionInfo
10/24/2022 14:00:11 
10/24/2022 14:00:11 => 0.0003313s
10/24/2022 14:00:11 CreateColumn VersionInfo Description String
10/24/2022 14:00:11 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:00:11 => 0.0067056s
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 VersionDescriptionMigration migrated
10/24/2022 14:00:11 => 0.0088862s
10/24/2022 14:00:11 Migrations
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 CreateTable brand
10/24/2022 14:00:11 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0142696s
10/24/2022 14:00:11 CreateTable type
10/24/2022 14:00:11 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0099297s
10/24/2022 14:00:11 CreateTable product
10/24/2022 14:00:11 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:00:11 => 0.0137711s
10/24/2022 14:00:11 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 14:00:11 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 14:00:11 => 0.0080502s
10/24/2022 14:00:11 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 14:00:11 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 14:00:11 => 0.003104s
10/24/2022 14:00:11 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T21:00:11','InitialTables_20221023001');
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 20221023001: InitialTables_20221023001 migrated
10/24/2022 14:00:11 => 0.0103362s
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 migrating
10/24/2022 14:00:11 Beginning Transaction
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 14:00:11 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 14:00:11 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 14:00:11 -> 12 Insert operations completed in 00:00:00.0149303 taking an average of 00:00:00.0012441
10/24/2022 14:00:11 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T21:00:11','InitialSeed_20221024001');
10/24/2022 14:00:11 Committing Transaction
10/24/2022 14:00:11 20221024001: InitialSeed_20221024001 migrated
10/24/2022 14:00:11 => 0.0041234s
10/24/2022 14:00:29 Migrations
10/24/2022 14:00:29 20221023001: InitialTables_20221023001
10/24/2022 14:00:29 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:01:10 VersionMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateTable VersionInfo
10/24/2022 14:01:10 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:01:10 => 0.0197624s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionMigration migrated
10/24/2022 14:01:10 => 0.035066s
10/24/2022 14:01:10 VersionUniqueMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateIndex VersionInfo (Version)
10/24/2022 14:01:10 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:01:10 => 0.0128856s
10/24/2022 14:01:10 AlterTable VersionInfo
10/24/2022 14:01:10 
10/24/2022 14:01:10 => 0.0013309s
10/24/2022 14:01:10 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:01:10 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:01:10 => 0.003411s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionUniqueMigration migrated
10/24/2022 14:01:10 => 0.005906s
10/24/2022 14:01:10 VersionDescriptionMigration migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 AlterTable VersionInfo
10/24/2022 14:01:10 
10/24/2022 14:01:10 => 0.0004251s
10/24/2022 14:01:10 CreateColumn VersionInfo Description String
10/24/2022 14:01:10 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:01:10 => 0.0078545s
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 VersionDescriptionMigration migrated
10/24/2022 14:01:10 => 0.0104471s
10/24/2022 14:01:10 Migrations
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 CreateTable brand
10/24/2022 14:01:10 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0131342s
10/24/2022 14:01:10 CreateTable type
10/24/2022 14:01:10 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0097104s
10/24/2022 14:01:10 CreateTable product
10/24/2022 14:01:10 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:01:10 => 0.0124829s
10/24/2022 14:01:10 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 14:01:10 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 14:01:10 => 0.0153237s
10/24/2022 14:01:10 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 14:01:10 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 14:01:10 => 0.0030949s
10/24/2022 14:01:10 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T21:01:10','InitialTables_20221023001');
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 20221023001: InitialTables_20221023001 migrated
10/24/2022 14:01:10 => 0.0109534s
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 migrating
10/24/2022 14:01:10 Beginning Transaction
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 14:01:10 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 14:01:10 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 14:01:10 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 14:01:10 -> 15 Insert operations completed in 00:00:00.0220774 taking an average of 00:00:00.0014718
10/24/2022 14:01:10 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T21:01:10','InitialSeed_20221024001');
10/24/2022 14:01:10 Committing Transaction
10/24/2022 14:01:10 20221024001: InitialSeed_20221024001 migrated
10/24/2022 14:01:10 => 0.004683s
10/24/2022 14:15:46 Migrations
10/24/2022 14:15:46 20221023001: InitialTables_20221023001
10/24/2022 14:15:46 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:18:56 Migrations
10/24/2022 14:18:56 20221023001: InitialTables_20221023001
10/24/2022 14:18:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:19:07 HTTP "GET" "/graphql-voyager" responded 200 in 102.3373 ms
10/24/2022 14:19:08 HTTP "GET" "/favicon.ico" responded 404 in 0.0480 ms
10/24/2022 14:19:08 HTTP "POST" "/graphql" responded 500 in 372.8273 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:08 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:16 HTTP "POST" "/graphql" responded 500 in 20.3817 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:16 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:17 HTTP "GET" "/graphql-voyager" responded 200 in 5.6345 ms
10/24/2022 14:19:17 HTTP "POST" "/graphql" responded 500 in 12.9604 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:17 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:22 HTTP "POST" "/graphql" responded 500 in 12.8533 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:22 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:23 HTTP "POST" "/graphql" responded 500 in 12.1632 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:23 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:24 HTTP "POST" "/graphql" responded 500 in 11.9318 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:24 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:24 HTTP "POST" "/graphql" responded 500 in 13.0506 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:24 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:39 HTTP "POST" "/graphql" responded 500 in 12.2665 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:39 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:19:51 Migrations
10/24/2022 14:19:51 20221023001: InitialTables_20221023001
10/24/2022 14:19:51 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:19:53 HTTP "POST" "/graphql" responded 500 in 346.6259 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:19:53 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:20:52 Migrations
10/24/2022 14:20:52 20221023001: InitialTables_20221023001
10/24/2022 14:20:52 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:20:56 HTTP "POST" "/graphql" responded 500 in 344.3652 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:20:56 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:21:56 Migrations
10/24/2022 14:21:56 20221023001: InitialTables_20221023001
10/24/2022 14:21:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:23:03 Migrations
10/24/2022 14:23:03 20221023001: InitialTables_20221023001
10/24/2022 14:23:03 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:23:10 HTTP "POST" "/graphql" responded 500 in 327.1499 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:23:10 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:24:42 Migrations
10/24/2022 14:24:42 20221023001: InitialTables_20221023001
10/24/2022 14:24:42 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:24:43 HTTP "POST" "/graphql" responded 500 in 337.6885 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:24:43 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:24:44 HTTP "POST" "/graphql" responded 500 in 11.3554 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 14:24:44 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. The name `Product` was already registered by another type. (HotChocolate.Types.ObjectType<SwimStoreApi.Models.Product>)

   at HotChocolate.Configuration.TypeRegistry.Register(NameString typeName, RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.CompleteTypeName(RegisteredType registeredType)
   at HotChocolate.Configuration.TypeInitializer.ProcessTypes(TypeDependencyKind kind, Func`2 action)
   at HotChocolate.Configuration.TypeInitializer.CompleteNames()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 14:26:10 Migrations
10/24/2022 14:26:10 20221023001: InitialTables_20221023001
10/24/2022 14:26:10 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:26:12 HTTP "POST" "/graphql" responded 400 in 561.1933 ms
10/24/2022 14:26:14 HTTP "POST" "/graphql" responded 400 in 0.5335 ms
10/24/2022 14:26:15 HTTP "POST" "/graphql" responded 400 in 0.2791 ms
10/24/2022 14:26:29 HTTP "POST" "/graphql" responded 400 in 0.2628 ms
10/24/2022 14:26:30 HTTP "POST" "/graphql" responded 400 in 0.2963 ms
10/24/2022 14:26:31 HTTP "POST" "/graphql" responded 400 in 0.2603 ms
10/24/2022 14:26:31 HTTP "POST" "/graphql" responded 400 in 0.2625 ms
10/24/2022 14:26:39 Migrations
10/24/2022 14:26:39 20221023001: InitialTables_20221023001
10/24/2022 14:26:39 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:26:40 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/24/2022 14:26:40 HTTP "POST" "/graphql" responded 200 in 718.1005 ms
10/24/2022 14:26:43 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/24/2022 14:26:43 HTTP "POST" "/graphql" responded 200 in 6.8174 ms
10/24/2022 14:26:44 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/24/2022 14:26:44 HTTP "POST" "/graphql" responded 200 in 5.2839 ms
10/24/2022 14:29:30 VersionMigration migrating
10/24/2022 14:29:31 Beginning Transaction
10/24/2022 14:29:31 CreateTable VersionInfo
10/24/2022 14:29:31 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:29:31 => 0.0425632s
10/24/2022 14:29:31 Committing Transaction
10/24/2022 14:29:31 VersionMigration migrated
10/24/2022 14:29:31 => 0.0621777s
10/24/2022 14:29:31 VersionUniqueMigration migrating
10/24/2022 14:29:31 Beginning Transaction
10/24/2022 14:29:31 CreateIndex VersionInfo (Version)
10/24/2022 14:29:31 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:29:31 => 0.0189314s
10/24/2022 14:29:31 AlterTable VersionInfo
10/24/2022 14:29:31 
10/24/2022 14:29:31 => 0.0009357s
10/24/2022 14:29:31 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:29:31 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:29:31 => 0.0029268s
10/24/2022 14:29:31 Committing Transaction
10/24/2022 14:29:31 VersionUniqueMigration migrated
10/24/2022 14:29:31 => 0.0070144s
10/24/2022 14:29:31 VersionDescriptionMigration migrating
10/24/2022 14:29:31 Beginning Transaction
10/24/2022 14:29:31 AlterTable VersionInfo
10/24/2022 14:29:31 
10/24/2022 14:29:31 => 0.0005015s
10/24/2022 14:29:31 CreateColumn VersionInfo Description String
10/24/2022 14:29:31 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:29:31 => 0.0093054s
10/24/2022 14:29:31 Committing Transaction
10/24/2022 14:29:31 VersionDescriptionMigration migrated
10/24/2022 14:29:31 => 0.0135711s
10/24/2022 14:29:31 Migrations
10/24/2022 14:29:31 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:29:31 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:29:31 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:29:31 Beginning Transaction
10/24/2022 14:29:31 CreateTable brand
10/24/2022 14:29:31 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:29:31 => 0.0264584s
10/24/2022 14:29:31 CreateTable type
10/24/2022 14:29:31 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:29:31 => 0.0121622s
10/24/2022 14:29:31 CreateTable product
10/24/2022 14:29:31 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:29:31 An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 42P07: relation "product" already exists

System.Exception: An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 42P07: relation "product" already exists

 ---> Npgsql.PostgresException (0x80004005): 42P07: relation "product" already exists
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P07
    MessageText: relation "product" already exists
    File: heap.c
    Line: 1200
    Routine: heap_create_with_catalog
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 14:29:31 Rolling back transaction
10/24/2022 14:29:50 Migrations
10/24/2022 14:29:50 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:29:50 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:29:50 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:29:50 Beginning Transaction
10/24/2022 14:29:50 CreateTable brand
10/24/2022 14:29:50 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:29:50 => 0.0250949s
10/24/2022 14:29:50 CreateTable type
10/24/2022 14:29:50 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:29:50 => 0.0132819s
10/24/2022 14:29:50 CreateTable product
10/24/2022 14:29:50 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:29:50 An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 42P07: relation "product" already exists

System.Exception: An error occured executing the following sql:
CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
The error was 42P07: relation "product" already exists

 ---> Npgsql.PostgresException (0x80004005): 42P07: relation "product" already exists
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P07
    MessageText: relation "product" already exists
    File: heap.c
    Line: 1200
    Routine: heap_create_with_catalog
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 14:29:50 Rolling back transaction
10/24/2022 14:32:12 VersionMigration migrating
10/24/2022 14:32:12 Beginning Transaction
10/24/2022 14:32:12 CreateTable VersionInfo
10/24/2022 14:32:12 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 14:32:12 => 0.017877s
10/24/2022 14:32:12 Committing Transaction
10/24/2022 14:32:12 VersionMigration migrated
10/24/2022 14:32:12 => 0.0341547s
10/24/2022 14:32:13 VersionUniqueMigration migrating
10/24/2022 14:32:13 Beginning Transaction
10/24/2022 14:32:13 CreateIndex VersionInfo (Version)
10/24/2022 14:32:13 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 14:32:13 => 0.0117039s
10/24/2022 14:32:13 AlterTable VersionInfo
10/24/2022 14:32:13 
10/24/2022 14:32:13 => 0.000801s
10/24/2022 14:32:13 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 14:32:13 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 14:32:13 => 0.00243s
10/24/2022 14:32:13 Committing Transaction
10/24/2022 14:32:13 VersionUniqueMigration migrated
10/24/2022 14:32:13 => 0.0055645s
10/24/2022 14:32:13 VersionDescriptionMigration migrating
10/24/2022 14:32:13 Beginning Transaction
10/24/2022 14:32:13 AlterTable VersionInfo
10/24/2022 14:32:13 
10/24/2022 14:32:13 => 0.0003837s
10/24/2022 14:32:13 CreateColumn VersionInfo Description String
10/24/2022 14:32:13 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 14:32:13 => 0.0071955s
10/24/2022 14:32:13 Committing Transaction
10/24/2022 14:32:13 VersionDescriptionMigration migrated
10/24/2022 14:32:13 => 0.0107677s
10/24/2022 14:32:13 Migrations
10/24/2022 14:32:13 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 14:32:13 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 14:32:13 20221023001: InitialTables_20221023001 migrating
10/24/2022 14:32:13 Beginning Transaction
10/24/2022 14:32:13 CreateTable brand
10/24/2022 14:32:13 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 14:32:13 => 0.0141182s
10/24/2022 14:32:13 CreateTable type
10/24/2022 14:32:13 CREATE TABLE "public"."type" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_type" PRIMARY KEY ("id"));
10/24/2022 14:32:13 => 0.0103667s
10/24/2022 14:32:13 CreateTable product
10/24/2022 14:32:13 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "type_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 14:32:13 => 0.0130608s
10/24/2022 14:32:13 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 14:32:13 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 14:32:13 => 0.0078805s
10/24/2022 14:32:13 CreateForeignKey FK_product_type_id_type_id product(type_id) type(id)
10/24/2022 14:32:13 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_type_id_type_id" FOREIGN KEY ("type_id") REFERENCES "public"."type" ("id");
10/24/2022 14:32:13 => 0.0028885s
10/24/2022 14:32:13 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-24T21:32:13','InitialTables_20221023001');
10/24/2022 14:32:13 Committing Transaction
10/24/2022 14:32:13 20221023001: InitialTables_20221023001 migrated
10/24/2022 14:32:13 => 0.0107582s
10/24/2022 14:32:13 20221024001: InitialSeed_20221024001 migrating
10/24/2022 14:32:13 Beginning Transaction
10/24/2022 14:32:13 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 14:32:13 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 14:32:13 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 14:32:13 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 14:32:13 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('briefs');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('wetsuits');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('racing suits');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('training suits');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name") VALUES ('lesuire');
10/24/2022 14:32:13 INSERT INTO "public"."type" ("name","accessory") VALUES ('goggles',true);
10/24/2022 14:32:13 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 14:32:13 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 14:32:13 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","type_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 14:32:13 -> 15 Insert operations completed in 00:00:00.0187398 taking an average of 00:00:00.0012493
10/24/2022 14:32:13 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-24T21:32:13','InitialSeed_20221024001');
10/24/2022 14:32:13 Committing Transaction
10/24/2022 14:32:13 20221024001: InitialSeed_20221024001 migrated
10/24/2022 14:32:13 => 0.0053326s
10/24/2022 14:32:48 HTTP "GET" "/graphql-voyager" responded 200 in 61.3290 ms
10/24/2022 14:32:49 HTTP "POST" "/graphql" responded 200 in 687.2611 ms
10/24/2022 14:33:07 ====== Postgres Call -> Stored Function ======
	"sf_product_get_all"
10/24/2022 14:33:08 HTTP "POST" "/graphql" responded 500 in 561.7685 ms
10/24/2022 14:44:12 Migrations
10/24/2022 14:44:12 20221023001: InitialTables_20221023001
10/24/2022 14:44:12 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:44:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:44:19 HTTP "POST" "/graphql" responded 200 in 676.2238 ms
10/24/2022 14:45:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:28 HTTP "POST" "/graphql" responded 200 in 11.5748 ms
10/24/2022 14:45:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:29 HTTP "POST" "/graphql" responded 200 in 4.4867 ms
10/24/2022 14:45:30 HTTP "POST" "/graphql" responded 200 in 55.5469 ms
10/24/2022 14:45:31 HTTP "POST" "/graphql" responded 200 in 1.0926 ms
10/24/2022 14:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:32 HTTP "POST" "/graphql" responded 200 in 5.9109 ms
10/24/2022 14:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:32 HTTP "POST" "/graphql" responded 200 in 4.1647 ms
10/24/2022 14:45:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:33 HTTP "POST" "/graphql" responded 200 in 4.0139 ms
10/24/2022 14:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:34 HTTP "POST" "/graphql" responded 200 in 3.7746 ms
10/24/2022 14:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:34 HTTP "POST" "/graphql" responded 200 in 3.6391 ms
10/24/2022 14:45:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:37 HTTP "POST" "/graphql" responded 200 in 4.0508 ms
10/24/2022 14:45:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:45:39 HTTP "POST" "/graphql" responded 200 in 3.9900 ms
10/24/2022 14:45:47 HTTP "GET" "/graphql-voyager" responded 200 in 55.7773 ms
10/24/2022 14:45:47 HTTP "POST" "/graphql" responded 200 in 1.7713 ms
10/24/2022 14:46:58 Migrations
10/24/2022 14:46:59 20221023001: InitialTables_20221023001
10/24/2022 14:46:59 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:47:04 HTTP "GET" "/graphql-voyager" responded 200 in 61.1878 ms
10/24/2022 14:47:05 HTTP "POST" "/graphql" responded 200 in 685.6458 ms
10/24/2022 14:48:12 HTTP "POST" "/graphql" responded 200 in 6.8411 ms
10/24/2022 14:48:15 HTTP "POST" "/graphql" responded 400 in 10.1132 ms
10/24/2022 14:49:27 Migrations
10/24/2022 14:49:27 20221023001: InitialTables_20221023001
10/24/2022 14:49:27 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:49:35 HTTP "GET" "/graphql-voyager" responded 200 in 67.4213 ms
10/24/2022 14:49:36 HTTP "POST" "/graphql" responded 200 in 710.3664 ms
10/24/2022 14:49:45 HTTP "POST" "/graphql" responded 400 in 10.7819 ms
10/24/2022 14:49:52 HTTP "GET" "/graphql" responded 301 in 7.4026 ms
10/24/2022 14:49:52 HTTP "GET" "/graphql/index.html" responded 200 in 16.9899 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/polyfills.14223cd3.js" responded 200 in 1.4120 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/917.df80a314.js" responded 200 in 2.9760 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/main.7da7210f.js" responded 200 in 6.3264 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/641.c7e5a908.chunk.js" responded 200 in 13.1525 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/696.23e5e4e1.chunk.js" responded 200 in 27.7945 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/css/styles.d1755a82.chunk.css" responded 200 in 28.4719 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/927.0676b810.chunk.js" responded 200 in 28.0521 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/568.71498544.chunk.js" responded 200 in 5.1797 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/7.ef194ce7.chunk.js" responded 200 in 9.2707 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/494.af2a9e30.chunk.js" responded 200 in 43.6787 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/243.082d6152.chunk.js" responded 200 in 22.3203 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/693.b625e9eb.chunk.js" responded 200 in 62.0129 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/favicon.svg" responded 200 in 0.4510 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 0.2667 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 9.1174 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/95.4f7bae42.chunk.js" responded 200 in 0.4187 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/619.d2a9edb4.chunk.js" responded 200 in 0.5805 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/document.8402b2ae.chunk.js" responded 200 in 0.5012 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/schema.2a88d762.chunk.js" responded 200 in 0.4842 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/json.50fb813a.js" responded 200 in 8.1301 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/160.5700f964.chunk.js" responded 200 in 0.2479 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/13.6582dd74.chunk.js" responded 200 in 0.3199 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/319.15add1dd.chunk.js" responded 200 in 0.3097 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/523.9581171d.chunk.js" responded 200 in 0.2917 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/97.cee6a1a5.chunk.js" responded 200 in 0.2819 ms
10/24/2022 14:49:53 HTTP "GET" "/graphql/static/js/101.e5dcd65e.chunk.js" responded 200 in 0.1277 ms
10/24/2022 14:49:54 HTTP "POST" "/graphql" responded 200 in 3.7440 ms
10/24/2022 14:49:54 HTTP "POST" "/graphql" responded 200 in 2.4414 ms
10/24/2022 14:49:54 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 2.4624 ms
10/24/2022 14:49:54 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 3.0957 ms
10/24/2022 14:49:54 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 9.3773 ms
10/24/2022 14:49:55 HTTP "GET" "/graphql/static/media/codicon.b797181c93b3755f4fa1.ttf" responded 200 in 13.4328 ms
10/24/2022 14:50:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:50:23 HTTP "POST" "/graphql" responded 200 in 59.2134 ms
10/24/2022 14:50:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:50:46 HTTP "POST" "/graphql" responded 200 in 6.4931 ms
10/24/2022 14:51:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:05 HTTP "POST" "/graphql" responded 200 in 6.1455 ms
10/24/2022 14:51:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:17 HTTP "POST" "/graphql" responded 200 in 5.7232 ms
10/24/2022 14:51:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:17 HTTP "POST" "/graphql" responded 200 in 8.0099 ms
10/24/2022 14:51:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:17 HTTP "POST" "/graphql" responded 200 in 6.1208 ms
10/24/2022 14:51:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:40 HTTP "POST" "/graphql" responded 200 in 5.0129 ms
10/24/2022 14:51:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:51:40 HTTP "POST" "/graphql" responded 200 in 4.1069 ms
10/24/2022 14:51:42 HTTP "POST" "/graphql" responded 200 in 1.5330 ms
10/24/2022 14:51:43 HTTP "POST" "/graphql" responded 200 in 0.9572 ms
10/24/2022 14:51:43 HTTP "POST" "/graphql" responded 200 in 0.9963 ms
10/24/2022 14:52:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:52:21 HTTP "POST" "/graphql" responded 200 in 4.6374 ms
10/24/2022 14:52:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:52:45 HTTP "POST" "/graphql" responded 200 in 4.3909 ms
10/24/2022 14:52:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:52:47 HTTP "POST" "/graphql" responded 200 in 5.5516 ms
10/24/2022 14:52:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:52:47 HTTP "POST" "/graphql" responded 200 in 5.7929 ms
10/24/2022 14:52:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:52:47 HTTP "POST" "/graphql" responded 200 in 6.7221 ms
10/24/2022 14:53:50 Migrations
10/24/2022 14:53:50 20221023001: InitialTables_20221023001
10/24/2022 14:53:50 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:53:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:53:58 HTTP "POST" "/graphql" responded 200 in 712.1484 ms
10/24/2022 14:53:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:53:59 HTTP "POST" "/graphql" responded 200 in 5.7791 ms
10/24/2022 14:54:48 Migrations
10/24/2022 14:54:48 20221023001: InitialTables_20221023001
10/24/2022 14:54:48 20221024001: InitialSeed_20221024001 (current)
10/24/2022 14:54:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:54:55 HTTP "POST" "/graphql" responded 200 in 671.1502 ms
10/24/2022 14:54:58 HTTP "POST" "/graphql" responded 200 in 49.0111 ms
10/24/2022 14:54:59 HTTP "POST" "/graphql" responded 200 in 2.1269 ms
10/24/2022 14:55:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:00 HTTP "POST" "/graphql" responded 200 in 4.1172 ms
10/24/2022 14:55:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:02 HTTP "POST" "/graphql" responded 200 in 7.2860 ms
10/24/2022 14:55:09 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:09 HTTP "POST" "/graphql" responded 200 in 3.7997 ms
10/24/2022 14:55:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:13 HTTP "POST" "/graphql" responded 200 in 3.8990 ms
10/24/2022 14:55:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:13 HTTP "POST" "/graphql" responded 200 in 3.6646 ms
10/24/2022 14:55:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 14:55:39 HTTP "POST" "/graphql" responded 200 in 3.7971 ms
10/24/2022 15:04:43 Migrations
10/24/2022 15:04:43 20221023001: InitialTables_20221023001
10/24/2022 15:04:43 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:04:48 HTTP "GET" "/graphql-voyager" responded 200 in 59.9264 ms
10/24/2022 15:04:49 HTTP "POST" "/graphql" responded 200 in 651.0266 ms
10/24/2022 15:05:13 HTTP "GET" "/graphql/static/js/767.d422d435.chunk.js" responded 200 in 12.3114 ms
10/24/2022 15:05:13 HTTP "GET" "/graphql/static/js/625.6e2228cf.chunk.js" responded 200 in 0.9449 ms
10/24/2022 15:05:16 HTTP "GET" "/graphql/index.html" responded 200 in 10.5694 ms
10/24/2022 15:05:16 HTTP "GET" "/graphql/favicon.ico" responded 200 in 0.1147 ms
10/24/2022 15:05:16 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 7.6444 ms
10/24/2022 15:05:17 HTTP "POST" "/graphql" responded 200 in 7.5985 ms
10/24/2022 15:05:17 HTTP "POST" "/graphql" responded 200 in 2.6277 ms
10/24/2022 15:05:49 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE id = '@id'"
10/24/2022 15:05:49 HTTP "POST" "/graphql" responded 500 in 192.8595 ms
10/24/2022 15:05:59 HTTP "POST" "/graphql" responded 200 in 1.4496 ms
10/24/2022 15:06:50 HTTP "GET" "/graphql/index.html" responded 200 in 5.7470 ms
10/24/2022 15:06:50 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 1.0989 ms
10/24/2022 15:06:51 HTTP "POST" "/graphql" responded 200 in 0.7538 ms
10/24/2022 15:06:51 HTTP "POST" "/graphql" responded 200 in 1.3158 ms
10/24/2022 15:06:52 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM product WHERE product.id = '@id'"
10/24/2022 15:06:52 HTTP "POST" "/graphql" responded 500 in 83.5031 ms
10/24/2022 15:07:52 HTTP "GET" "/graphql/index.html" responded 200 in 6.9885 ms
10/24/2022 15:07:53 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 1.0063 ms
10/24/2022 15:07:53 HTTP "POST" "/graphql" responded 200 in 0.2326 ms
10/24/2022 15:07:53 HTTP "POST" "/graphql" responded 200 in 0.9204 ms
10/24/2022 15:07:54 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:07:54 HTTP "POST" "/graphql" responded 500 in 56.9678 ms
10/24/2022 15:07:56 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:07:56 HTTP "POST" "/graphql" responded 500 in 58.6012 ms
10/24/2022 15:07:56 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:07:56 HTTP "POST" "/graphql" responded 500 in 56.0798 ms
10/24/2022 15:07:57 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:07:57 HTTP "POST" "/graphql" responded 500 in 55.9749 ms
10/24/2022 15:07:57 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:07:57 HTTP "POST" "/graphql" responded 500 in 55.0734 ms
10/24/2022 15:08:08 HTTP "GET" "/graphql/index.html" responded 200 in 2.8120 ms
10/24/2022 15:08:08 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 1.2083 ms
10/24/2022 15:08:09 HTTP "POST" "/graphql" responded 200 in 0.3051 ms
10/24/2022 15:08:09 HTTP "POST" "/graphql" responded 200 in 0.8788 ms
10/24/2022 15:08:10 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:08:10 HTTP "POST" "/graphql" responded 500 in 61.6103 ms
10/24/2022 15:08:28 Migrations
10/24/2022 15:08:28 20221023001: InitialTables_20221023001
10/24/2022 15:08:28 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:08:37 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:08:37 HTTP "POST" "/graphql" responded 500 in 772.3433 ms
10/24/2022 15:09:26 HTTP "GET" "/graphql/index.html" responded 200 in 63.9741 ms
10/24/2022 15:09:27 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 12.6650 ms
10/24/2022 15:09:27 HTTP "POST" "/graphql" responded 200 in 17.9829 ms
10/24/2022 15:09:27 HTTP "POST" "/graphql" responded 200 in 28.9553 ms
10/24/2022 15:09:29 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:29 HTTP "POST" "/graphql" responded 500 in 57.6426 ms
10/24/2022 15:09:30 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:30 HTTP "POST" "/graphql" responded 500 in 56.6540 ms
10/24/2022 15:09:30 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:30 HTTP "POST" "/graphql" responded 500 in 52.8141 ms
10/24/2022 15:09:31 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:31 HTTP "POST" "/graphql" responded 500 in 51.7811 ms
10/24/2022 15:09:37 Migrations
10/24/2022 15:09:37 20221023001: InitialTables_20221023001
10/24/2022 15:09:37 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:09:52 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:52 HTTP "POST" "/graphql" responded 500 in 790.0048 ms
10/24/2022 15:09:53 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:09:53 HTTP "POST" "/graphql" responded 500 in 54.2973 ms
10/24/2022 15:10:32 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:10:32 HTTP "POST" "/graphql" responded 500 in 11289.3147 ms
10/24/2022 15:10:52 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = '@id'"
10/24/2022 15:11:18 HTTP "POST" "/graphql" responded 500 in 32345.5320 ms
10/24/2022 15:11:35 HTTP "GET" "/graphql/index.html" responded 200 in 64.9236 ms
10/24/2022 15:11:35 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 11.9046 ms
10/24/2022 15:11:36 HTTP "POST" "/graphql" responded 200 in 13.4593 ms
10/24/2022 15:11:36 HTTP "POST" "/graphql" responded 200 in 29.3053 ms
10/24/2022 15:11:40 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:11:40 HTTP "POST" "/graphql" responded 500 in 4073.0742 ms
10/24/2022 15:12:10 HTTP "GET" "/graphql/index.html" responded 200 in 5.2040 ms
10/24/2022 15:12:11 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 1.0294 ms
10/24/2022 15:12:11 HTTP "POST" "/graphql" responded 200 in 0.1928 ms
10/24/2022 15:12:11 HTTP "POST" "/graphql" responded 200 in 1.0018 ms
10/24/2022 15:12:22 ====== Postgres Call -> Stored Function ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:12:31 HTTP "POST" "/graphql" responded 500 in 19657.9882 ms
10/24/2022 15:13:08 HTTP "GET" "/graphql/index.html" responded 200 in 2.8533 ms
10/24/2022 15:13:09 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 0.9629 ms
10/24/2022 15:13:09 HTTP "POST" "/graphql" responded 200 in 0.2247 ms
10/24/2022 15:13:09 HTTP "POST" "/graphql" responded 200 in 0.8157 ms
10/24/2022 15:13:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:10 HTTP "POST" "/graphql" responded 500 in 63.2947 ms
10/24/2022 15:13:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:11 HTTP "POST" "/graphql" responded 500 in 53.8655 ms
10/24/2022 15:13:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:11 HTTP "POST" "/graphql" responded 500 in 58.8914 ms
10/24/2022 15:13:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:12 HTTP "POST" "/graphql" responded 500 in 148.1724 ms
10/24/2022 15:13:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:12 HTTP "POST" "/graphql" responded 500 in 57.3474 ms
10/24/2022 15:13:21 Migrations
10/24/2022 15:13:21 20221023001: InitialTables_20221023001
10/24/2022 15:13:21 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:13:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:13:37 HTTP "POST" "/graphql" responded 500 in 15244.9522 ms
10/24/2022 15:14:10 Migrations
10/24/2022 15:14:10 20221023001: InitialTables_20221023001
10/24/2022 15:14:10 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:14:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:14:13 HTTP "POST" "/graphql" responded 200 in 686.8481 ms
10/24/2022 15:14:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:14:14 HTTP "POST" "/graphql" responded 200 in 5.4278 ms
10/24/2022 15:14:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:14:29 HTTP "POST" "/graphql" responded 500 in 15.5080 ms
10/24/2022 15:14:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:14:31 HTTP "POST" "/graphql" responded 500 in 5.7666 ms
10/24/2022 15:14:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:14:31 HTTP "POST" "/graphql" responded 500 in 3.6597 ms
10/24/2022 15:16:02 Migrations
10/24/2022 15:16:02 20221023001: InitialTables_20221023001
10/24/2022 15:16:02 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:16:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:06 HTTP "POST" "/graphql" responded 500 in 679.3550 ms
10/24/2022 15:16:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:07 HTTP "POST" "/graphql" responded 500 in 6.9372 ms
10/24/2022 15:16:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:07 HTTP "POST" "/graphql" responded 500 in 4.7932 ms
10/24/2022 15:16:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:07 HTTP "POST" "/graphql" responded 500 in 3.8307 ms
10/24/2022 15:16:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:07 HTTP "POST" "/graphql" responded 500 in 3.7379 ms
10/24/2022 15:16:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:08 HTTP "POST" "/graphql" responded 500 in 3.8779 ms
10/24/2022 15:16:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:08 HTTP "POST" "/graphql" responded 500 in 3.9545 ms
10/24/2022 15:16:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:14 HTTP "POST" "/graphql" responded 500 in 4.1120 ms
10/24/2022 15:16:37 HTTP "GET" "/graphql/index.html" responded 200 in 62.7049 ms
10/24/2022 15:16:38 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 10.0683 ms
10/24/2022 15:16:38 HTTP "POST" "/graphql" responded 200 in 12.8983 ms
10/24/2022 15:16:38 HTTP "POST" "/graphql" responded 200 in 27.7910 ms
10/24/2022 15:16:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:39 HTTP "POST" "/graphql" responded 500 in 4.6299 ms
10/24/2022 15:16:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:40 HTTP "POST" "/graphql" responded 500 in 4.0209 ms
10/24/2022 15:16:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:40 HTTP "POST" "/graphql" responded 500 in 3.9235 ms
10/24/2022 15:16:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:40 HTTP "POST" "/graphql" responded 500 in 4.1082 ms
10/24/2022 15:16:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:16:40 HTTP "POST" "/graphql" responded 500 in 4.2665 ms
10/24/2022 15:17:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:17:59 HTTP "POST" "/graphql" responded 500 in 51993.4570 ms
10/24/2022 15:19:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:19:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:19:37 HTTP "POST" "/graphql" responded 200 in 9.7556 ms
10/24/2022 15:19:37 HTTP "POST" "/graphql" responded 200 in 10.4596 ms
10/24/2022 15:19:37 HTTP "POST" "/graphql" responded 200 in 12145.6995 ms
10/24/2022 15:19:37 HTTP "POST" "/graphql" responded 200 in 12.2441 ms
10/24/2022 15:19:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:19:39 HTTP "POST" "/graphql" responded 200 in 6.6928 ms
10/24/2022 15:21:58 Migrations
10/24/2022 15:21:58 20221023001: InitialTables_20221023001
10/24/2022 15:21:58 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:21:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:00 HTTP "POST" "/graphql" responded 200 in 710.4872 ms
10/24/2022 15:22:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:00 HTTP "POST" "/graphql" responded 200 in 27.1561 ms
10/24/2022 15:22:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:06 HTTP "POST" "/graphql" responded 200 in 4.9472 ms
10/24/2022 15:22:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:08 HTTP "POST" "/graphql" responded 200 in 3.5755 ms
10/24/2022 15:22:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:13 HTTP "POST" "/graphql" responded 200 in 3.8355 ms
10/24/2022 15:22:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:19 HTTP "POST" "/graphql" responded 200 in 3.5060 ms
10/24/2022 15:22:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:19 HTTP "POST" "/graphql" responded 200 in 3.8313 ms
10/24/2022 15:22:26 Migrations
10/24/2022 15:22:26 20221023001: InitialTables_20221023001
10/24/2022 15:22:26 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:22:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:29 HTTP "POST" "/graphql" responded 200 in 682.3196 ms
10/24/2022 15:22:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:33 HTTP "POST" "/graphql" responded 200 in 6.3291 ms
10/24/2022 15:22:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:37 HTTP "POST" "/graphql" responded 200 in 5.0494 ms
10/24/2022 15:22:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:41 HTTP "POST" "/graphql" responded 200 in 3.8766 ms
10/24/2022 15:22:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:22:46 HTTP "POST" "/graphql" responded 200 in 3.9636 ms
10/24/2022 15:23:23 Migrations
10/24/2022 15:23:23 20221023001: InitialTables_20221023001
10/24/2022 15:23:23 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:23:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:25 HTTP "POST" "/graphql" responded 200 in 685.2380 ms
10/24/2022 15:23:33 Migrations
10/24/2022 15:23:33 20221023001: InitialTables_20221023001
10/24/2022 15:23:33 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:23:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:35 HTTP "POST" "/graphql" responded 200 in 670.9131 ms
10/24/2022 15:23:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:35 HTTP "POST" "/graphql" responded 200 in 6.7375 ms
10/24/2022 15:23:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:36 HTTP "POST" "/graphql" responded 200 in 4.3799 ms
10/24/2022 15:23:42 Migrations
10/24/2022 15:23:42 20221023001: InitialTables_20221023001
10/24/2022 15:23:42 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:23:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:44 HTTP "POST" "/graphql" responded 200 in 674.3654 ms
10/24/2022 15:23:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:45 HTTP "POST" "/graphql" responded 200 in 6.2437 ms
10/24/2022 15:23:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:46 HTTP "POST" "/graphql" responded 200 in 4.7714 ms
10/24/2022 15:23:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:23:46 HTTP "POST" "/graphql" responded 200 in 3.5473 ms
10/24/2022 15:23:55 HTTP "GET" "/graphql/index.html" responded 200 in 61.5261 ms
10/24/2022 15:23:56 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 10.3944 ms
10/24/2022 15:25:55 Migrations
10/24/2022 15:25:55 20221023001: InitialTables_20221023001
10/24/2022 15:25:55 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:25:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:25:59 HTTP "POST" "/graphql" responded 200 in 691.4988 ms
10/24/2022 15:26:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:26:06 HTTP "POST" "/graphql" responded 200 in 6.4565 ms
10/24/2022 15:26:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:26:07 HTTP "POST" "/graphql" responded 200 in 6.6830 ms
10/24/2022 15:26:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:26:11 HTTP "POST" "/graphql" responded 200 in 3.8415 ms
10/24/2022 15:26:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:26:14 HTTP "POST" "/graphql" responded 200 in 3.7319 ms
10/24/2022 15:39:14 Migrations
10/24/2022 15:39:14 20221023001: InitialTables_20221023001
10/24/2022 15:39:14 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:39:20 HTTP "POST" "/graphql" responded 200 in 635.0451 ms
10/24/2022 15:39:36 HTTP "POST" "/graphql" responded 500 in 35.5721 ms
10/24/2022 15:39:37 HTTP "POST" "/graphql" responded 500 in 1.8442 ms
10/24/2022 15:39:37 HTTP "POST" "/graphql" responded 500 in 0.8295 ms
10/24/2022 15:39:38 HTTP "POST" "/graphql" responded 500 in 0.8375 ms
10/24/2022 15:39:38 HTTP "POST" "/graphql" responded 500 in 0.7396 ms
10/24/2022 15:39:43 HTTP "POST" "/graphql" responded 500 in 0.7431 ms
10/24/2022 15:39:44 HTTP "POST" "/graphql" responded 200 in 1.2269 ms
10/24/2022 15:39:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 15:39:45 HTTP "POST" "/graphql" responded 200 in 58.1333 ms
10/24/2022 15:39:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 15:39:46 HTTP "POST" "/graphql" responded 200 in 3.8165 ms
10/24/2022 15:39:47 HTTP "POST" "/graphql" responded 200 in 0.9840 ms
10/24/2022 15:39:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 15:39:48 HTTP "POST" "/graphql" responded 200 in 24.6163 ms
10/24/2022 15:39:49 HTTP "POST" "/graphql" responded 200 in 1.5583 ms
10/24/2022 15:39:50 HTTP "POST" "/graphql" responded 500 in 0.7419 ms
10/24/2022 15:40:39 Migrations
10/24/2022 15:40:39 20221023001: InitialTables_20221023001
10/24/2022 15:40:39 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:40:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
10/24/2022 15:40:40 HTTP "POST" "/graphql" responded 200 in 653.3711 ms
10/24/2022 15:40:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
10/24/2022 15:40:42 HTTP "POST" "/graphql" responded 200 in 4.4271 ms
10/24/2022 15:40:52 HTTP "POST" "/graphql" responded 200 in 48.0092 ms
10/24/2022 15:41:02 HTTP "POST" "/graphql" responded 200 in 1.4592 ms
10/24/2022 15:41:02 HTTP "POST" "/graphql" responded 200 in 3.9486 ms
10/24/2022 15:44:00 Migrations
10/24/2022 15:44:00 20221023001: InitialTables_20221023001
10/24/2022 15:44:00 20221024001: InitialSeed_20221024001 (current)
10/24/2022 15:44:03 HTTP "POST" "/graphql" responded 200 in 638.9955 ms
10/24/2022 15:44:07 HTTP "GET" "/graphql-voyager" responded 200 in 72.0300 ms
10/24/2022 15:44:07 HTTP "POST" "/graphql" responded 200 in 2.2956 ms
10/24/2022 15:44:16 HTTP "GET" "/graphql" responded 301 in 5.6172 ms
10/24/2022 15:44:16 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 8.5657 ms
10/24/2022 15:44:17 HTTP "POST" "/graphql" responded 200 in 3.1311 ms
10/24/2022 15:44:17 HTTP "POST" "/graphql" responded 200 in 1.4472 ms
10/24/2022 15:44:23 HTTP "POST" "/graphql" responded 200 in 1.6349 ms
10/24/2022 15:44:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 15:44:24 HTTP "POST" "/graphql" responded 200 in 75.5266 ms
10/24/2022 15:44:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 15:44:30 HTTP "POST" "/graphql" responded 200 in 4.7306 ms
10/24/2022 15:45:36 Migrations
10/24/2022 15:45:36 20221023001: InitialTables_20221023001
10/24/2022 15:45:36 20221024001: InitialSeed_20221024001 (current)
10/24/2022 16:13:33 Migrations
10/24/2022 16:13:33 20221023001: InitialTables_20221023001
10/24/2022 16:13:33 20221024001: InitialSeed_20221024001 (current)
10/24/2022 16:13:34 HTTP "POST" "/graphql" responded 400 in 525.6855 ms
10/24/2022 16:14:07 HTTP "POST" "/graphql" responded 400 in 0.6939 ms
10/24/2022 16:14:09 HTTP "POST" "/graphql" responded 400 in 0.1981 ms
10/24/2022 16:14:10 HTTP "POST" "/graphql" responded 400 in 0.2679 ms
10/24/2022 16:14:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:14:38 HTTP "POST" "/graphql" responded 200 in 137.7191 ms
10/24/2022 16:21:11 Migrations
10/24/2022 16:21:11 20221023001: InitialTables_20221023001
10/24/2022 16:21:11 20221024001: InitialSeed_20221024001 (current)
10/24/2022 16:21:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:21:27 HTTP "POST" "/graphql" responded 200 in 639.9551 ms
10/24/2022 16:25:12 Migrations
10/24/2022 16:25:12 20221023001: InitialTables_20221023001
10/24/2022 16:25:12 20221024001: InitialSeed_20221024001 (current)
10/24/2022 16:25:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:25:13 HTTP "POST" "/graphql" responded 200 in 670.6977 ms
10/24/2022 16:25:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:25:13 HTTP "POST" "/graphql" responded 200 in 7.0507 ms
10/24/2022 16:25:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:25:14 HTTP "POST" "/graphql" responded 200 in 4.1156 ms
10/24/2022 16:25:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 16:25:15 HTTP "POST" "/graphql" responded 200 in 3.6921 ms
10/24/2022 16:25:18 HTTP "POST" "/graphql" responded 200 in 45.9006 ms
10/24/2022 16:25:19 HTTP "POST" "/graphql" responded 200 in 1.6537 ms
10/24/2022 16:25:39 HTTP "POST" "/graphql" responded 200 in 1.0053 ms
10/24/2022 16:25:41 HTTP "POST" "/graphql" responded 200 in 0.9945 ms
10/24/2022 16:26:35 Migrations
10/24/2022 16:26:35 20221023001: InitialTables_20221023001
10/24/2022 16:26:35 20221024001: InitialSeed_20221024001 (current)
10/24/2022 16:26:36 HTTP "GET" "/graphql-voyager" responded 200 in 62.2155 ms
10/24/2022 16:26:37 HTTP "POST" "/graphql" responded 200 in 644.6859 ms
10/24/2022 17:06:48 Migrations
10/24/2022 17:06:48 20221023001: InitialTables_20221023001
10/24/2022 17:06:48 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:06:51 HTTP "GET" "/graphql-voyager" responded 200 in 61.9434 ms
10/24/2022 17:06:52 HTTP "POST" "/graphql" responded 200 in 667.0775 ms
10/24/2022 17:08:37 Migrations
10/24/2022 17:08:37 20221023001: InitialTables_20221023001
10/24/2022 17:08:37 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:08:37 HTTP "GET" "/graphql-voyager" responded 200 in 62.4957 ms
10/24/2022 17:08:38 HTTP "POST" "/graphql" responded 200 in 674.5857 ms
10/24/2022 17:09:13 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 15.1072 ms
10/24/2022 17:09:14 HTTP "POST" "/graphql" responded 200 in 7.2408 ms
10/24/2022 17:09:14 HTTP "POST" "/graphql" responded 200 in 2.2205 ms
10/24/2022 17:09:14 HTTP "GET" "/graphql/index.html" responded 200 in 17.6394 ms
10/24/2022 17:09:14 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 0.1052 ms
10/24/2022 17:09:15 HTTP "POST" "/graphql" responded 200 in 0.7436 ms
10/24/2022 17:09:15 HTTP "POST" "/graphql" responded 200 in 0.9678 ms
10/24/2022 17:09:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:09:32 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:25:19 Migrations
10/24/2022 17:25:19 20221023001: InitialTables_20221023001
10/24/2022 17:25:19 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:25:26 HTTP "GET" "/graphql-voyager" responded 200 in 60.1536 ms
10/24/2022 17:25:27 HTTP "POST" "/graphql" responded 200 in 638.5284 ms
10/24/2022 17:25:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:25:41 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:26:10 Migrations
10/24/2022 17:26:10 20221023001: InitialTables_20221023001
10/24/2022 17:26:10 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:26:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:26:11 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:28:41 Migrations
10/24/2022 17:28:41 20221023001: InitialTables_20221023001
10/24/2022 17:28:41 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:28:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:28:42 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:29:03 Migrations
10/24/2022 17:29:03 20221023001: InitialTables_20221023001
10/24/2022 17:29:03 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:29:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:29:04 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:31:14 Migrations
10/24/2022 17:31:14 20221023001: InitialTables_20221023001
10/24/2022 17:31:14 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:31:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:31:16 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:32:37 Migrations
10/24/2022 17:32:37 20221023001: InitialTables_20221023001
10/24/2022 17:32:37 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:32:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:32:58 Migrations
10/24/2022 17:32:58 20221023001: InitialTables_20221023001
10/24/2022 17:32:58 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:33:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:33:07 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:34:24 Migrations
10/24/2022 17:34:24 20221023001: InitialTables_20221023001
10/24/2022 17:34:24 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:34:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:34:29 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:34:34 HTTP "POST" "/graphql" responded 200 in 5614.0565 ms
10/24/2022 17:34:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:34:41 HTTP "POST" "/graphql" responded 200 in 5.8475 ms
10/24/2022 17:34:43 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:34:43 HTTP "POST" "/graphql" responded 200 in 4.9332 ms
10/24/2022 17:35:04 HTTP "POST" "/graphql" responded 200 in 47.1173 ms
10/24/2022 17:35:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:35:26 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:35:26 HTTP "POST" "/graphql" responded 200 in 5.3071 ms
10/24/2022 17:38:42 Migrations
10/24/2022 17:38:42 20221023001: InitialTables_20221023001
10/24/2022 17:38:42 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:38:44 HTTP "POST" "/graphql" responded 200 in 742.2665 ms
10/24/2022 17:38:44 HTTP "POST" "/graphql" responded 200 in 21.2769 ms
10/24/2022 17:38:53 HTTP "POST" "/graphql" responded 200 in 2.1618 ms
10/24/2022 17:38:53 HTTP "POST" "/graphql" responded 200 in 1.3924 ms
10/24/2022 17:38:53 HTTP "POST" "/graphql" responded 200 in 1.1756 ms
10/24/2022 17:38:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:38:59 HTTP "POST" "/graphql" responded 200 in 76.5650 ms
10/24/2022 17:39:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:39:00 HTTP "POST" "/graphql" responded 200 in 5.2750 ms
10/24/2022 17:39:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:39:01 HTTP "POST" "/graphql" responded 200 in 3.7394 ms
10/24/2022 17:39:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:39:02 HTTP "POST" "/graphql" responded 200 in 3.6028 ms
10/24/2022 17:39:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:39:24 HTTP "POST" "/graphql" responded 200 in 4.0965 ms
10/24/2022 17:39:27 HTTP "POST" "/graphql" responded 200 in 1.1116 ms
10/24/2022 17:39:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
10/24/2022 17:39:27 HTTP "POST" "/graphql" responded 200 in 6.4903 ms
10/24/2022 17:39:33 HTTP "POST" "/graphql" responded 200 in 1.1568 ms
10/24/2022 17:39:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:39:37 HTTP "POST" "/graphql" responded 200 in 38.5150 ms
10/24/2022 17:39:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:39:39 HTTP "POST" "/graphql" responded 200 in 4.6886 ms
10/24/2022 17:39:45 HTTP "POST" "/graphql" responded 400 in 10.6561 ms
10/24/2022 17:39:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:39:52 HTTP "POST" "/graphql" responded 200 in 3.7284 ms
10/24/2022 17:39:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:39:53 HTTP "POST" "/graphql" responded 200 in 14.1503 ms
10/24/2022 17:39:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:39:54 HTTP "POST" "/graphql" responded 200 in 3.7057 ms
10/24/2022 17:40:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:40:00 HTTP "POST" "/graphql" responded 200 in 5.1074 ms
10/24/2022 17:42:20 Migrations
10/24/2022 17:42:20 20221023001: InitialTables_20221023001
10/24/2022 17:42:20 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:42:21 HTTP "GET" "/graphql-voyager" responded 200 in 64.2970 ms
10/24/2022 17:42:22 HTTP "POST" "/graphql" responded 200 in 747.8702 ms
10/24/2022 17:42:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:42:32 HTTP "POST" "/graphql" responded 200 in 84.6927 ms
10/24/2022 17:42:34 HTTP "POST" "/graphql" responded 200 in 4.1995 ms
10/24/2022 17:42:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:42:35 HTTP "POST" "/graphql" responded 200 in 17.0733 ms
10/24/2022 17:42:36 HTTP "POST" "/graphql" responded 200 in 1.3872 ms
10/24/2022 17:42:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:42:37 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:42:37 HTTP "POST" "/graphql" responded 200 in 7.9220 ms
10/24/2022 17:42:39 HTTP "POST" "/graphql" responded 200 in 0.9470 ms
10/24/2022 17:42:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
10/24/2022 17:42:40 HTTP "POST" "/graphql" responded 200 in 4.7540 ms
10/24/2022 17:42:41 HTTP "POST" "/graphql" responded 200 in 1.1829 ms
10/24/2022 17:42:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:42:42 HTTP "POST" "/graphql" responded 200 in 4.2922 ms
10/24/2022 17:42:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 17:42:44 HTTP "POST" "/graphql" responded 200 in 4.0221 ms
10/24/2022 17:42:45 HTTP "POST" "/graphql" responded 200 in 0.9850 ms
10/24/2022 17:42:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 17:42:46 HTTP "POST" "/graphql" responded 200 in 5.7672 ms
10/24/2022 17:42:49 HTTP "POST" "/graphql" responded 200 in 0.9631 ms
10/24/2022 17:42:50 HTTP "POST" "/graphql" responded 400 in 10.8017 ms
10/24/2022 17:42:56 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/24/2022 17:42:57 HTTP "POST" "/graphql" responded 500 in 442.5064 ms
10/24/2022 17:42:58 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/24/2022 17:42:58 HTTP "POST" "/graphql" responded 500 in 70.9765 ms
10/24/2022 17:43:21 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/24/2022 17:43:21 HTTP "POST" "/graphql" responded 500 in 35.4035 ms
10/24/2022 17:43:28 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
10/24/2022 17:43:28 HTTP "POST" "/graphql" responded 500 in 35.8684 ms
10/24/2022 17:46:22 HTTP "POST" "/graphql" responded 200 in 1.0175 ms
10/24/2022 17:46:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:23 HTTP "POST" "/graphql" responded 200 in 4.3527 ms
10/24/2022 17:46:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:24 HTTP "POST" "/graphql" responded 200 in 6.6486 ms
10/24/2022 17:46:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:24 HTTP "POST" "/graphql" responded 200 in 4.2879 ms
10/24/2022 17:46:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:25 HTTP "POST" "/graphql" responded 200 in 7.5792 ms
10/24/2022 17:46:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:25 HTTP "POST" "/graphql" responded 200 in 4.9935 ms
10/24/2022 17:46:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:25 HTTP "POST" "/graphql" responded 200 in 5.9498 ms
10/24/2022 17:46:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 17:46:25 HTTP "POST" "/graphql" responded 200 in 4.3267 ms
10/24/2022 17:46:26 HTTP "POST" "/graphql" responded 200 in 0.9706 ms
10/24/2022 17:46:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:46:27 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:46:27 HTTP "POST" "/graphql" responded 200 in 10.1366 ms
10/24/2022 17:46:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:46:28 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:46:28 HTTP "POST" "/graphql" responded 200 in 7.2375 ms
10/24/2022 17:46:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 17:46:28 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 17:46:28 HTTP "POST" "/graphql" responded 200 in 5.9928 ms
10/24/2022 17:46:29 HTTP "POST" "/graphql" responded 200 in 1.0529 ms
10/24/2022 17:57:39 Migrations
10/24/2022 17:57:39 20221023001: InitialTables_20221023001
10/24/2022 17:57:39 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:58:20 HTTP "GET" "/graphql-voyager" responded 200 in 62.9030 ms
10/24/2022 17:58:21 HTTP "POST" "/graphql" responded 200 in 735.9541 ms
10/24/2022 17:58:43 Migrations
10/24/2022 17:58:43 20221023001: InitialTables_20221023001
10/24/2022 17:58:43 20221024001: InitialSeed_20221024001 (current)
10/24/2022 17:58:44 HTTP "GET" "/graphql-voyager" responded 200 in 60.7566 ms
10/24/2022 17:58:45 HTTP "POST" "/graphql" responded 200 in 802.3852 ms
10/24/2022 18:02:06 HTTP "GET" "/graphql-voyager" responded 200 in 5.5218 ms
10/24/2022 18:02:07 HTTP "POST" "/graphql" responded 200 in 2.9554 ms
10/24/2022 19:19:04 Migrations
10/24/2022 19:19:04 20221023001: InitialTables_20221023001
10/24/2022 19:19:04 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:19:09 HTTP "GET" "/graphql-voyager" responded 200 in 70.7371 ms
10/24/2022 19:19:10 HTTP "POST" "/graphql" responded 200 in 740.1479 ms
10/24/2022 19:19:55 Migrations
10/24/2022 19:19:56 20221023001: InitialTables_20221023001
10/24/2022 19:19:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:20:58 Migrations
10/24/2022 19:20:58 20221023001: InitialTables_20221023001
10/24/2022 19:20:58 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:21:02 HTTP "GET" "/graphql-voyager" responded 200 in 59.8381 ms
10/24/2022 19:21:03 HTTP "POST" "/graphql" responded 200 in 742.3740 ms
10/24/2022 19:28:21 Migrations
10/24/2022 19:28:21 20221023001: InitialTables_20221023001
10/24/2022 19:28:21 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:28:29 HTTP "GET" "/graphql-voyager" responded 200 in 59.2123 ms
10/24/2022 19:28:30 HTTP "POST" "/graphql" responded 200 in 711.2452 ms
10/24/2022 19:28:50 Migrations
10/24/2022 19:28:50 20221023001: InitialTables_20221023001
10/24/2022 19:28:50 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:28:54 HTTP "GET" "/graphql-voyager" responded 200 in 60.0415 ms
10/24/2022 19:28:55 HTTP "POST" "/graphql" responded 500 in 484.5426 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:28:55 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:29:00 HTTP "GET" "/graphql-voyager" responded 200 in 4.0290 ms
10/24/2022 19:29:00 HTTP "POST" "/graphql" responded 500 in 40.7145 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:29:00 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:30:04 Migrations
10/24/2022 19:30:04 20221023001: InitialTables_20221023001
10/24/2022 19:30:04 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:30:14 HTTP "GET" "/graphql-voyager" responded 200 in 60.2992 ms
10/24/2022 19:30:14 HTTP "POST" "/graphql" responded 500 in 477.5657 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:30:14 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:36:21 Migrations
10/24/2022 19:36:21 20221023001: InitialTables_20221023001
10/24/2022 19:36:21 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:36:26 HTTP "GET" "/graphql-voyager" responded 200 in 66.1426 ms
10/24/2022 19:36:26 HTTP "POST" "/graphql" responded 500 in 512.0651 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:36:26 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:36:35 Migrations
10/24/2022 19:36:35 20221023001: InitialTables_20221023001
10/24/2022 19:36:35 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:36:35 HTTP "GET" "/graphql-voyager" responded 200 in 67.5958 ms
10/24/2022 19:36:36 HTTP "POST" "/graphql" responded 500 in 499.4820 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:36:36 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:41:48 Migrations
10/24/2022 19:41:49 20221023001: InitialTables_20221023001
10/24/2022 19:41:49 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:41:56 Migrations
10/24/2022 19:41:56 20221023001: InitialTables_20221023001
10/24/2022 19:41:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:42:10 HTTP "GET" "/graphql-voyager" responded 200 in 81.0936 ms
10/24/2022 19:42:11 HTTP "POST" "/graphql" responded 500 in 504.7061 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:42:11 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:43:13 Migrations
10/24/2022 19:43:13 20221023001: InitialTables_20221023001
10/24/2022 19:43:13 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:43:15 HTTP "GET" "/graphql-voyager" responded 200 in 90.4755 ms
10/24/2022 19:43:16 HTTP "POST" "/graphql" responded 500 in 553.3158 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:43:16 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:43:43 Migrations
10/24/2022 19:43:43 20221023001: InitialTables_20221023001
10/24/2022 19:43:43 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:43:45 HTTP "GET" "/graphql-voyager" responded 200 in 62.6726 ms
10/24/2022 19:43:46 HTTP "POST" "/graphql" responded 200 in 778.7738 ms
10/24/2022 19:44:08 Migrations
10/24/2022 19:44:08 20221023001: InitialTables_20221023001
10/24/2022 19:44:08 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:44:11 HTTP "GET" "/graphql-voyager" responded 200 in 62.3186 ms
10/24/2022 19:44:13 HTTP "POST" "/graphql" responded 200 in 2124.8722 ms
10/24/2022 19:44:42 Migrations
10/24/2022 19:44:42 20221023001: InitialTables_20221023001
10/24/2022 19:44:42 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:44:47 HTTP "GET" "/graphql-voyager" responded 200 in 60.5056 ms
10/24/2022 19:44:48 HTTP "POST" "/graphql" responded 200 in 944.9767 ms
10/24/2022 19:44:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 19:44:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 19:44:57 HTTP "POST" "/graphql" responded 200 in 89.6299 ms
10/24/2022 19:44:57 HTTP "POST" "/graphql" responded 200 in 98.9229 ms
10/24/2022 19:45:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 19:45:01 HTTP "POST" "/graphql" responded 200 in 6.6853 ms
10/24/2022 19:45:18 Migrations
10/24/2022 19:45:18 20221023001: InitialTables_20221023001
10/24/2022 19:45:18 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:45:22 HTTP "POST" "/graphql" responded 500 in 472.3783 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:45:22 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:04 Migrations
10/24/2022 19:46:04 20221023001: InitialTables_20221023001
10/24/2022 19:46:04 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:46:08 HTTP "GET" "/graphql-voyager" responded 200 in 112.2224 ms
10/24/2022 19:46:09 HTTP "POST" "/graphql" responded 500 in 477.1729 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:09 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:19 Migrations
10/24/2022 19:46:20 20221023001: InitialTables_20221023001
10/24/2022 19:46:20 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:46:21 HTTP "POST" "/graphql" responded 500 in 494.4891 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:21 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:28 HTTP "POST" "/graphql" responded 500 in 48.7108 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:28 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:29 HTTP "POST" "/graphql" responded 500 in 44.2702 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:29 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:33 HTTP "POST" "/graphql" responded 500 in 47.6123 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:33 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:34 HTTP "POST" "/graphql" responded 500 in 40.8886 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:46:34 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:46:55 Migrations
10/24/2022 19:46:55 20221023001: InitialTables_20221023001
10/24/2022 19:46:55 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:47:00 HTTP "GET" "/graphql-voyager" responded 200 in 104.8851 ms
10/24/2022 19:47:19 HTTP "POST" "/graphql" responded 500 in 19227.2457 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:47:19 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:47:33 Migrations
10/24/2022 19:47:33 20221023001: InitialTables_20221023001
10/24/2022 19:47:33 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:47:34 HTTP "GET" "/graphql-voyager" responded 200 in 62.5430 ms
10/24/2022 19:47:41 HTTP "POST" "/graphql" responded 500 in 7362.0948 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:47:41 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:47:56 Migrations
10/24/2022 19:47:56 20221023001: InitialTables_20221023001
10/24/2022 19:47:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:48:00 HTTP "GET" "/graphql-voyager" responded 200 in 62.8369 ms
10/24/2022 19:48:08 HTTP "POST" "/graphql" responded 500 in 8276.6188 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:48:08 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:48:28 Migrations
10/24/2022 19:48:28 20221023001: InitialTables_20221023001
10/24/2022 19:48:28 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:48:34 HTTP "GET" "/graphql-voyager" responded 200 in 61.8441 ms
10/24/2022 19:48:35 HTTP "POST" "/graphql" responded 200 in 757.4832 ms
10/24/2022 19:49:53 Migrations
10/24/2022 19:49:53 20221023001: InitialTables_20221023001
10/24/2022 19:49:53 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:50:16 HTTP "GET" "/graphql-voyager" responded 200 in 60.6169 ms
10/24/2022 19:50:17 HTTP "POST" "/graphql" responded 500 in 468.7547 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:50:17 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:50:41 Migrations
10/24/2022 19:50:41 20221023001: InitialTables_20221023001
10/24/2022 19:50:41 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:50:44 HTTP "GET" "/graphql-voyager" responded 200 in 61.6336 ms
10/24/2022 19:50:44 HTTP "POST" "/graphql" responded 500 in 470.1252 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:50:44 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:54:29 Migrations
10/24/2022 19:54:29 20221023001: InitialTables_20221023001
10/24/2022 19:54:29 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:54:37 HTTP "GET" "/graphql-voyager" responded 200 in 59.0985 ms
10/24/2022 19:54:37 HTTP "POST" "/graphql" responded 500 in 480.4576 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:54:37 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:54:56 Migrations
10/24/2022 19:54:56 20221023001: InitialTables_20221023001
10/24/2022 19:54:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:55:02 HTTP "GET" "/graphql-voyager" responded 200 in 59.8974 ms
10/24/2022 19:55:03 HTTP "POST" "/graphql" responded 500 in 492.3024 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:55:03 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:55:26 Migrations
10/24/2022 19:55:26 20221023001: InitialTables_20221023001
10/24/2022 19:55:26 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:55:29 HTTP "GET" "/graphql-voyager" responded 200 in 62.6257 ms
10/24/2022 19:55:30 HTTP "POST" "/graphql" responded 500 in 500.9578 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:55:30 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:58:01 Migrations
10/24/2022 19:58:01 20221023001: InitialTables_20221023001
10/24/2022 19:58:01 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:58:05 HTTP "GET" "/graphql-voyager" responded 200 in 69.1516 ms
10/24/2022 19:58:06 HTTP "POST" "/graphql" responded 500 in 483.5523 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:58:06 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 19:59:22 Migrations
10/24/2022 19:59:22 20221023001: InitialTables_20221023001
10/24/2022 19:59:22 20221024001: InitialSeed_20221024001 (current)
10/24/2022 19:59:25 HTTP "GET" "/graphql-voyager" responded 200 in 61.8215 ms
10/24/2022 19:59:25 HTTP "POST" "/graphql" responded 500 in 503.9208 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 19:59:25 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:04:10 Migrations
10/24/2022 20:04:10 20221023001: InitialTables_20221023001
10/24/2022 20:04:10 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:04:14 HTTP "GET" "/graphql-voyager" responded 200 in 61.5335 ms
10/24/2022 20:04:15 HTTP "POST" "/graphql" responded 500 in 467.3636 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 20:04:15 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:05:07 Migrations
10/24/2022 20:05:07 20221023001: InitialTables_20221023001
10/24/2022 20:05:07 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:05:07 HTTP "GET" "/graphql/index.html" responded 200 in 74.5392 ms
10/24/2022 20:05:08 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 13.7921 ms
10/24/2022 20:05:09 HTTP "POST" "/graphql" responded 200 in 698.4576 ms
10/24/2022 20:05:09 HTTP "POST" "/graphql" responded 200 in 32.7080 ms
10/24/2022 20:05:11 HTTP "POST" "/graphql" responded 400 in 26.5419 ms
10/24/2022 20:05:27 HTTP "POST" "/graphql" responded 400 in 0.6231 ms
10/24/2022 20:05:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/24/2022 20:05:32 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/24/2022 20:05:32 HTTP "POST" "/graphql" responded 200 in 94.5504 ms
10/24/2022 20:05:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:05:44 HTTP "POST" "/graphql" responded 200 in 7.5947 ms
10/24/2022 20:06:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:04 HTTP "POST" "/graphql" responded 200 in 3.9229 ms
10/24/2022 20:06:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:05 HTTP "POST" "/graphql" responded 200 in 4.4846 ms
10/24/2022 20:06:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:05 HTTP "POST" "/graphql" responded 200 in 3.8654 ms
10/24/2022 20:06:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:06 HTTP "POST" "/graphql" responded 200 in 5.5846 ms
10/24/2022 20:06:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:14 HTTP "POST" "/graphql" responded 200 in 3.9536 ms
10/24/2022 20:06:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:06:26 HTTP "POST" "/graphql" responded 200 in 4.0314 ms
10/24/2022 20:09:45 Migrations
10/24/2022 20:09:45 20221023001: InitialTables_20221023001
10/24/2022 20:09:45 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:09:53 HTTP "GET" "/graphql-voyager" responded 200 in 63.5211 ms
10/24/2022 20:09:54 HTTP "POST" "/graphql" responded 500 in 453.0226 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 20:09:54 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:10:02 Migrations
10/24/2022 20:10:02 20221023001: InitialTables_20221023001
10/24/2022 20:10:02 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:10:04 HTTP "GET" "/graphql-voyager" responded 200 in 62.9981 ms
10/24/2022 20:10:05 HTTP "POST" "/graphql" responded 500 in 466.2888 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 20:10:05 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:10:55 Migrations
10/24/2022 20:10:55 20221023001: InitialTables_20221023001
10/24/2022 20:10:55 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:11:07 Migrations
10/24/2022 20:11:07 20221023001: InitialTables_20221023001
10/24/2022 20:11:07 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:11:12 HTTP "GET" "/graphql-voyager" responded 200 in 70.1857 ms
10/24/2022 20:11:13 HTTP "POST" "/graphql" responded 200 in 746.3129 ms
10/24/2022 20:12:56 Migrations
10/24/2022 20:12:56 20221023001: InitialTables_20221023001
10/24/2022 20:12:56 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:12:57 HTTP "GET" "/graphql-voyager" responded 200 in 60.6603 ms
10/24/2022 20:12:58 HTTP "POST" "/graphql" responded 500 in 496.4819 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 20:12:58 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:12:59 HTTP "GET" "/graphql-voyager" responded 200 in 4.6351 ms
10/24/2022 20:12:59 HTTP "POST" "/graphql" responded 500 in 66.5137 ms
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
10/24/2022 20:12:59 An unhandled exception has occurred while executing the request.
HotChocolate.SchemaException: For more details look at the `Errors` property.

1. Unable to create instance of type ``.

   at HotChocolate.Configuration.TypeInitializer.DiscoverTypes()
   at HotChocolate.Configuration.TypeInitializer.Initialize()
   at HotChocolate.SchemaBuilder.Setup.InitializeTypes(SchemaBuilder builder, IDescriptorContext context, IReadOnlyList`1 types, LazySchema lazySchema)
   at HotChocolate.SchemaBuilder.Setup.Create(SchemaBuilder builder, LazySchema lazySchema, IDescriptorContext context)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaAsync(NameString schemaName, RequestExecutorSetup options, RequestExecutorOptions executorOptions, IServiceProvider serviceProvider, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.CreateSchemaServicesAsync(NameString schemaName, RequestExecutorSetup options, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorNoLockAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorResolver.GetRequestExecutorAsync(NameString schemaName, CancellationToken cancellationToken)
   at HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(CancellationToken cancellationToken)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.HandleRequestAsync(HttpContext context, AllowedContentType contentType)
   at HotChocolate.AspNetCore.HttpPostMiddlewareBase.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.<>c__DisplayClass13_0.<<UseCancellation>b__1>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
10/24/2022 20:13:28 Migrations
10/24/2022 20:13:28 20221023001: InitialTables_20221023001
10/24/2022 20:13:28 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:13:29 HTTP "GET" "/graphql-voyager" responded 200 in 60.8725 ms
10/24/2022 20:13:29 HTTP "POST" "/graphql" responded 200 in 753.2935 ms
10/24/2022 20:14:35 Migrations
10/24/2022 20:14:35 20221023001: InitialTables_20221023001
10/24/2022 20:14:35 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:14:55 HTTP "POST" "/graphql" responded 200 in 719.9233 ms
10/24/2022 20:15:01 HTTP "GET" "/graphql-voyager" responded 200 in 30.8815 ms
10/24/2022 20:15:01 HTTP "POST" "/graphql" responded 200 in 2.1767 ms
10/24/2022 20:15:36 Migrations
10/24/2022 20:15:36 20221023001: InitialTables_20221023001
10/24/2022 20:15:36 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:15:37 HTTP "GET" "/graphql-voyager" responded 200 in 60.7060 ms
10/24/2022 20:15:38 HTTP "POST" "/graphql" responded 200 in 751.3086 ms
10/24/2022 20:15:52 Migrations
10/24/2022 20:15:52 20221023001: InitialTables_20221023001
10/24/2022 20:15:52 20221024001: InitialSeed_20221024001 (current)
10/24/2022 20:15:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:15:57 HTTP "POST" "/graphql" responded 200 in 759.3996 ms
10/24/2022 20:16:01 HTTP "GET" "/graphql/index.html" responded 200 in 63.3134 ms
10/24/2022 20:16:01 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 11.6304 ms
10/24/2022 20:16:02 HTTP "POST" "/graphql" responded 200 in 17.9852 ms
10/24/2022 20:16:02 HTTP "POST" "/graphql" responded 200 in 35.1240 ms
10/24/2022 20:16:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:16:04 HTTP "POST" "/graphql" responded 200 in 5.9380 ms
10/24/2022 20:16:09 HTTP "POST" "/graphql" responded 400 in 9.5733 ms
10/24/2022 20:16:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:16:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:16:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:16:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:16:20 HTTP "POST" "/graphql" responded 200 in 5317.0090 ms
10/24/2022 20:28:47 VersionMigration migrating
10/24/2022 20:28:47 Beginning Transaction
10/24/2022 20:28:47 CreateTable VersionInfo
10/24/2022 20:28:47 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 20:28:47 => 0.2503525s
10/24/2022 20:28:47 Committing Transaction
10/24/2022 20:28:47 VersionMigration migrated
10/24/2022 20:28:47 => 0.3094948s
10/24/2022 20:28:47 VersionUniqueMigration migrating
10/24/2022 20:28:47 Beginning Transaction
10/24/2022 20:28:47 CreateIndex VersionInfo (Version)
10/24/2022 20:28:47 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 20:28:48 => 0.2775131s
10/24/2022 20:28:48 AlterTable VersionInfo
10/24/2022 20:28:48 
10/24/2022 20:28:48 => 0.000873s
10/24/2022 20:28:48 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 20:28:48 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 20:28:48 => 0.0472396s
10/24/2022 20:28:48 Committing Transaction
10/24/2022 20:28:48 VersionUniqueMigration migrated
10/24/2022 20:28:48 => 0.0514943s
10/24/2022 20:28:48 VersionDescriptionMigration migrating
10/24/2022 20:28:48 Beginning Transaction
10/24/2022 20:28:48 AlterTable VersionInfo
10/24/2022 20:28:48 
10/24/2022 20:28:48 => 0.0003992s
10/24/2022 20:28:48 CreateColumn VersionInfo Description String
10/24/2022 20:28:48 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 20:28:48 => 0.009156s
10/24/2022 20:28:48 Committing Transaction
10/24/2022 20:28:48 VersionDescriptionMigration migrated
10/24/2022 20:28:48 => 0.0126361s
10/24/2022 20:28:48 Migrations
10/24/2022 20:28:48 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 20:28:48 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 20:28:48 20221023001: InitialTables_20221023001 migrating
10/24/2022 20:28:48 Beginning Transaction
10/24/2022 20:28:48 CreateTable brand
10/24/2022 20:28:48 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 20:28:48 => 0.0158309s
10/24/2022 20:28:48 CreateTable category
10/24/2022 20:28:48 CREATE TABLE "public"."category" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_category" PRIMARY KEY ("id"));
10/24/2022 20:28:48 => 0.1350136s
10/24/2022 20:28:48 CreateTable product
10/24/2022 20:28:48 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "category_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 20:28:48 => 0.01597s
10/24/2022 20:28:48 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 20:28:48 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 20:28:48 => 0.0968826s
10/24/2022 20:28:48 CreateForeignKey FK_product_category_id_type_id product(category_id) type(id)
10/24/2022 20:28:48 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_category_id_type_id" FOREIGN KEY ("category_id") REFERENCES "public"."type" ("id");
10/24/2022 20:28:48 An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_category_id_type_id" FOREIGN KEY ("category_id") REFERENCES "public"."type" ("id");
The error was 42P01: relation "public.type" does not exist

System.Exception: An error occured executing the following sql:
ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_category_id_type_id" FOREIGN KEY ("category_id") REFERENCES "public"."type" ("id");
The error was 42P01: relation "public.type" does not exist

 ---> Npgsql.PostgresException (0x80004005): 42P01: relation "public.type" does not exist
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P01
    MessageText: relation "public.type" does not exist
    File: namespace.c
    Line: 428
    Routine: RangeVarGetRelidExtended
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 20:28:48 Rolling back transaction
10/24/2022 20:29:47 VersionMigration migrating
10/24/2022 20:29:47 Beginning Transaction
10/24/2022 20:29:47 CreateTable VersionInfo
10/24/2022 20:29:47 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 20:29:47 => 0.0339571s
10/24/2022 20:29:47 Committing Transaction
10/24/2022 20:29:47 VersionMigration migrated
10/24/2022 20:29:47 => 0.0502004s
10/24/2022 20:29:47 VersionUniqueMigration migrating
10/24/2022 20:29:47 Beginning Transaction
10/24/2022 20:29:47 CreateIndex VersionInfo (Version)
10/24/2022 20:29:47 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 20:29:47 => 0.0130756s
10/24/2022 20:29:47 AlterTable VersionInfo
10/24/2022 20:29:47 
10/24/2022 20:29:47 => 0.0008261s
10/24/2022 20:29:47 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 20:29:47 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 20:29:47 => 0.002554s
10/24/2022 20:29:47 Committing Transaction
10/24/2022 20:29:47 VersionUniqueMigration migrated
10/24/2022 20:29:47 => 0.0059237s
10/24/2022 20:29:47 VersionDescriptionMigration migrating
10/24/2022 20:29:47 Beginning Transaction
10/24/2022 20:29:47 AlterTable VersionInfo
10/24/2022 20:29:47 
10/24/2022 20:29:47 => 0.0004108s
10/24/2022 20:29:47 CreateColumn VersionInfo Description String
10/24/2022 20:29:47 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 20:29:47 => 0.0083078s
10/24/2022 20:29:47 Committing Transaction
10/24/2022 20:29:47 VersionDescriptionMigration migrated
10/24/2022 20:29:47 => 0.0127402s
10/24/2022 20:29:47 Migrations
10/24/2022 20:29:47 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 20:29:47 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 20:29:47 20221023001: InitialTables_20221023001 migrating
10/24/2022 20:29:47 Beginning Transaction
10/24/2022 20:29:47 CreateTable brand
10/24/2022 20:29:47 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 20:29:47 => 0.0172049s
10/24/2022 20:29:47 CreateTable category
10/24/2022 20:29:47 CREATE TABLE "public"."category" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_category" PRIMARY KEY ("id"));
10/24/2022 20:29:47 => 0.0134568s
10/24/2022 20:29:47 CreateTable product
10/24/2022 20:29:47 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "category_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 20:29:47 => 0.0339602s
10/24/2022 20:29:47 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 20:29:47 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 20:29:47 => 0.0297719s
10/24/2022 20:29:47 CreateForeignKey FK_product_category_id_category_id product(category_id) category(id)
10/24/2022 20:29:47 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_category_id_category_id" FOREIGN KEY ("category_id") REFERENCES "public"."category" ("id");
10/24/2022 20:29:47 => 0.0032495s
10/24/2022 20:29:47 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-25T03:29:47','InitialTables_20221023001');
10/24/2022 20:29:47 Committing Transaction
10/24/2022 20:29:47 20221023001: InitialTables_20221023001 migrated
10/24/2022 20:29:47 => 0.0193277s
10/24/2022 20:29:47 20221024001: InitialSeed_20221024001 migrating
10/24/2022 20:29:47 Beginning Transaction
10/24/2022 20:29:47 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 20:29:47 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 20:29:47 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 20:29:47 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 20:29:47 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 20:29:47 INSERT INTO "public"."category" ("name") VALUES ('briefs');
10/24/2022 20:29:47 INSERT INTO "public"."type" ("name") VALUES ('jammer');
10/24/2022 20:29:47 An error occured executing the following sql:
INSERT INTO "public"."type" ("name") VALUES ('jammer');
The error was 42P01: relation "public.type" does not exist

POSITION: 13

System.Exception: An error occured executing the following sql:
INSERT INTO "public"."type" ("name") VALUES ('jammer');
The error was 42P01: relation "public.type" does not exist

POSITION: 13

 ---> Npgsql.PostgresException (0x80004005): 42P01: relation "public.type" does not exist

POSITION: 13
   at Npgsql.Internal.NpgsqlConnector.<ReadMessage>g__ReadMessageLong|211_0(NpgsqlConnector connector, Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)
   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)
   at Npgsql.NpgsqlDataReader.NextResult()
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery(Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteNonQuery()
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
  Exception data:
    Severity: ERROR
    SqlState: 42P01
    MessageText: relation "public.type" does not exist
    Position: 13
    File: parse_relation.c
    Line: 1360
    Routine: parserOpenTable
   --- End of inner exception stack trace ---
   at FluentMigrator.Runner.Processors.ProcessorBase.ReThrowWithSql(Exception ex, String sql)
   at FluentMigrator.Runner.Processors.Postgres.PostgresProcessor.Process(String sql)
   at FluentMigrator.Runner.StopWatch.Time(Action action)
   at FluentMigrator.Runner.MigrationRunner.ExecuteExpressions(ICollection`1 expressions)
10/24/2022 20:29:47 Rolling back transaction
10/24/2022 20:30:48 VersionMigration migrating
10/24/2022 20:30:48 Beginning Transaction
10/24/2022 20:30:48 CreateTable VersionInfo
10/24/2022 20:30:48 CREATE TABLE "public"."VersionInfo" ("Version" bigint NOT NULL);
10/24/2022 20:30:48 => 0.0190062s
10/24/2022 20:30:48 Committing Transaction
10/24/2022 20:30:48 VersionMigration migrated
10/24/2022 20:30:48 => 0.0580574s
10/24/2022 20:30:48 VersionUniqueMigration migrating
10/24/2022 20:30:48 Beginning Transaction
10/24/2022 20:30:48 CreateIndex VersionInfo (Version)
10/24/2022 20:30:48 CREATE UNIQUE INDEX "UC_Version" ON "public"."VersionInfo" ("Version" ASC);
10/24/2022 20:30:48 => 0.0154764s
10/24/2022 20:30:48 AlterTable VersionInfo
10/24/2022 20:30:48 
10/24/2022 20:30:48 => 0.0008235s
10/24/2022 20:30:48 CreateColumn VersionInfo AppliedOn DateTime
10/24/2022 20:30:48 ALTER TABLE "public"."VersionInfo" ADD "AppliedOn" timestamp;
10/24/2022 20:30:48 => 0.0025256s
10/24/2022 20:30:48 Committing Transaction
10/24/2022 20:30:48 VersionUniqueMigration migrated
10/24/2022 20:30:48 => 0.0057613s
10/24/2022 20:30:48 VersionDescriptionMigration migrating
10/24/2022 20:30:48 Beginning Transaction
10/24/2022 20:30:48 AlterTable VersionInfo
10/24/2022 20:30:48 
10/24/2022 20:30:48 => 0.000415s
10/24/2022 20:30:48 CreateColumn VersionInfo Description String
10/24/2022 20:30:48 ALTER TABLE "public"."VersionInfo" ADD "Description" varchar(1024);
10/24/2022 20:30:48 => 0.0081034s
10/24/2022 20:30:48 Committing Transaction
10/24/2022 20:30:48 VersionDescriptionMigration migrated
10/24/2022 20:30:48 => 0.0114053s
10/24/2022 20:30:48 Migrations
10/24/2022 20:30:48 20221023001: InitialTables_20221023001 (not applied)
10/24/2022 20:30:48 20221024001: InitialSeed_20221024001 (not applied)
10/24/2022 20:30:48 20221023001: InitialTables_20221023001 migrating
10/24/2022 20:30:48 Beginning Transaction
10/24/2022 20:30:48 CreateTable brand
10/24/2022 20:30:48 CREATE TABLE "public"."brand" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, CONSTRAINT "PK_brand" PRIMARY KEY ("id"));
10/24/2022 20:30:48 => 0.0154295s
10/24/2022 20:30:48 CreateTable category
10/24/2022 20:30:48 CREATE TABLE "public"."category" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(50) NOT NULL, "accessory" boolean NOT NULL DEFAULT false, CONSTRAINT "PK_category" PRIMARY KEY ("id"));
10/24/2022 20:30:48 => 0.0115016s
10/24/2022 20:30:48 CreateTable product
10/24/2022 20:30:48 CREATE TABLE "public"."product" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(70) NOT NULL, "retail_price" integer NOT NULL, "current_price" integer NOT NULL, "description" varchar(2000) NOT NULL, "features" varchar(2000) NOT NULL, "sku" varchar(20) NOT NULL, "brand_id" integer NOT NULL, "category_id" integer NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_product" PRIMARY KEY ("id"));
10/24/2022 20:30:48 => 0.0164959s
10/24/2022 20:30:48 CreateForeignKey FK_product_brand_id_brand_id product(brand_id) brand(id)
10/24/2022 20:30:48 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_brand_id_brand_id" FOREIGN KEY ("brand_id") REFERENCES "public"."brand" ("id");
10/24/2022 20:30:48 => 0.0085317s
10/24/2022 20:30:48 CreateForeignKey FK_product_category_id_category_id product(category_id) category(id)
10/24/2022 20:30:48 ALTER TABLE "public"."product" ADD CONSTRAINT "FK_product_category_id_category_id" FOREIGN KEY ("category_id") REFERENCES "public"."category" ("id");
10/24/2022 20:30:48 => 0.0032765s
10/24/2022 20:30:48 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221023001,'2022-10-25T03:30:48','InitialTables_20221023001');
10/24/2022 20:30:48 Committing Transaction
10/24/2022 20:30:48 20221023001: InitialTables_20221023001 migrated
10/24/2022 20:30:48 => 0.0118592s
10/24/2022 20:30:48 20221024001: InitialSeed_20221024001 migrating
10/24/2022 20:30:48 Beginning Transaction
10/24/2022 20:30:48 INSERT INTO "public"."brand" ("name") VALUES ('speedo');
10/24/2022 20:30:48 INSERT INTO "public"."brand" ("name") VALUES ('arena');
10/24/2022 20:30:48 INSERT INTO "public"."brand" ("name") VALUES ('tyr');
10/24/2022 20:30:48 INSERT INTO "public"."brand" ("name") VALUES ('nike');
10/24/2022 20:30:48 INSERT INTO "public"."brand" ("name") VALUES ('phelps');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('briefs');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('jammer');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('wetsuits');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('racing suits');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('training suits');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name") VALUES ('lesuire');
10/24/2022 20:30:48 INSERT INTO "public"."category" ("name","accessory") VALUES ('goggles',true);
10/24/2022 20:30:48 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","category_id","gender") VALUES ('Solid Jammer',4999,3999,'description','features','sku here',1,2,'m');
10/24/2022 20:30:48 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","category_id","gender") VALUES ('Pro LT',4999,3999,'description','features','sku here',1,1,'m');
10/24/2022 20:30:48 INSERT INTO "public"."product" ("name","retail_price","current_price","description","features","sku","brand_id","category_id","gender") VALUES ('Crossback Racer',4999,3999,'description','features','sku here',1,4,'f');
10/24/2022 20:30:48 -> 15 Insert operations completed in 00:00:00.0345419 taking an average of 00:00:00.0023027
10/24/2022 20:30:48 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221024001,'2022-10-25T03:30:48','InitialSeed_20221024001');
10/24/2022 20:30:48 Committing Transaction
10/24/2022 20:30:48 20221024001: InitialSeed_20221024001 migrated
10/24/2022 20:30:48 => 0.0074047s
10/24/2022 20:31:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:31:13 HTTP "POST" "/graphql" responded 200 in 746.6523 ms
10/24/2022 20:31:13 HTTP "POST" "/graphql" responded 200 in 274.4677 ms
10/24/2022 20:31:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 20:31:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:31:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:31:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 20:31:28 HTTP "POST" "/graphql" responded 200 in 36.6860 ms
10/24/2022 20:38:16 Migrations
10/24/2022 20:38:16 20221023001: InitialTables_20221023001
10/24/2022 20:38:16 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:01:15 Migrations
10/24/2022 22:01:15 20221023001: InitialTables_20221023001
10/24/2022 22:01:15 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:01:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:01:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:01:17 HTTP "POST" "/graphql" responded 200 in 799.3929 ms
10/24/2022 22:01:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:01:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:01:18 HTTP "POST" "/graphql" responded 200 in 7.6421 ms
10/24/2022 22:01:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:01:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:01:19 HTTP "POST" "/graphql" responded 200 in 5.8354 ms
10/24/2022 22:01:23 HTTP "POST" "/graphql" responded 200 in 36.6640 ms
10/24/2022 22:01:24 HTTP "POST" "/graphql" responded 400 in 19.2879 ms
10/24/2022 22:01:27 HTTP "POST" "/graphql" responded 200 in 1.2240 ms
10/24/2022 22:01:28 HTTP "POST" "/graphql" responded 200 in 0.9254 ms
10/24/2022 22:01:28 HTTP "POST" "/graphql" responded 200 in 0.9548 ms
10/24/2022 22:03:01 Migrations
10/24/2022 22:03:01 20221023001: InitialTables_20221023001
10/24/2022 22:03:01 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:03:02 HTTP "POST" "/graphql" responded 200 in 703.8246 ms
10/24/2022 22:03:02 HTTP "POST" "/graphql" responded 200 in 1.9803 ms
10/24/2022 22:03:03 HTTP "POST" "/graphql" responded 200 in 1.8613 ms
10/24/2022 22:03:08 HTTP "POST" "/graphql" responded 200 in 1.2703 ms
10/24/2022 22:03:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.ORDER BY id ASC "
10/24/2022 22:03:27 HTTP "POST" "/graphql" responded 500 in 162.4604 ms
10/24/2022 22:03:57 Migrations
10/24/2022 22:03:57 20221023001: InitialTables_20221023001
10/24/2022 22:03:57 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:03:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:03:58 HTTP "POST" "/graphql" responded 500 in 787.4094 ms
10/24/2022 22:04:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:04:00 HTTP "POST" "/graphql" responded 500 in 25.7444 ms
10/24/2022 22:04:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:04:00 HTTP "POST" "/graphql" responded 500 in 21.3214 ms
10/24/2022 22:04:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:04:01 HTTP "POST" "/graphql" responded 500 in 17.9930 ms
10/24/2022 22:04:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:04:03 HTTP "POST" "/graphql" responded 500 in 18.1210 ms
10/24/2022 22:04:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:04:06 HTTP "POST" "/graphql" responded 500 in 18.3405 ms
10/24/2022 22:05:04 Migrations
10/24/2022 22:05:04 20221023001: InitialTables_20221023001
10/24/2022 22:05:04 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:05:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/24/2022 22:05:05 HTTP "POST" "/graphql" responded 200 in 753.2634 ms
10/24/2022 22:07:16 Migrations
10/24/2022 22:07:16 20221023001: InitialTables_20221023001
10/24/2022 22:07:16 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:07:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:07:31 HTTP "POST" "/graphql" responded 200 in 743.3018 ms
10/24/2022 22:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:07:37 HTTP "POST" "/graphql" responded 200 in 4.2109 ms
10/24/2022 22:07:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:07:41 HTTP "POST" "/graphql" responded 500 in 18.1857 ms
10/24/2022 22:07:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:07:42 HTTP "POST" "/graphql" responded 500 in 5.4235 ms
10/24/2022 22:07:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:07:42 HTTP "POST" "/graphql" responded 500 in 3.3665 ms
10/24/2022 22:07:45 HTTP "POST" "/graphql" responded 200 in 32.7068 ms
10/24/2022 22:07:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:07:45 HTTP "POST" "/graphql" responded 200 in 6.4958 ms
10/24/2022 22:07:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:07:50 HTTP "POST" "/graphql" responded 200 in 3.9699 ms
10/24/2022 22:07:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:07:54 HTTP "POST" "/graphql" responded 200 in 3.6133 ms
10/24/2022 22:08:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:10 HTTP "POST" "/graphql" responded 200 in 3.3128 ms
10/24/2022 22:08:14 HTTP "POST" "/graphql" responded 200 in 1.2977 ms
10/24/2022 22:08:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:15 HTTP "POST" "/graphql" responded 500 in 4.9210 ms
10/24/2022 22:08:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:16 HTTP "POST" "/graphql" responded 500 in 5.7059 ms
10/24/2022 22:08:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:16 HTTP "POST" "/graphql" responded 500 in 3.6626 ms
10/24/2022 22:08:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:17 HTTP "POST" "/graphql" responded 500 in 2.3768 ms
10/24/2022 22:08:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:17 HTTP "POST" "/graphql" responded 500 in 3.6389 ms
10/24/2022 22:08:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:18 HTTP "POST" "/graphql" responded 500 in 2.2454 ms
10/24/2022 22:08:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:18 HTTP "POST" "/graphql" responded 500 in 3.6051 ms
10/24/2022 22:08:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:18 HTTP "POST" "/graphql" responded 500 in 4.1883 ms
10/24/2022 22:08:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:18 HTTP "POST" "/graphql" responded 500 in 3.6833 ms
10/24/2022 22:08:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:19 HTTP "POST" "/graphql" responded 500 in 2.2812 ms
10/24/2022 22:08:23 Migrations
10/24/2022 22:08:23 20221023001: InitialTables_20221023001
10/24/2022 22:08:23 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:08:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:29 HTTP "POST" "/graphql" responded 200 in 743.3747 ms
10/24/2022 22:08:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:08:35 HTTP "POST" "/graphql" responded 200 in 19.0509 ms
10/24/2022 22:08:37 HTTP "POST" "/graphql" responded 200 in 33.1318 ms
10/24/2022 22:08:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:08:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:38 HTTP "POST" "/graphql" responded 200 in 20.0670 ms
10/24/2022 22:08:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:08:41 HTTP "POST" "/graphql" responded 200 in 4.3396 ms
10/24/2022 22:08:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/24/2022 22:08:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:46 HTTP "POST" "/graphql" responded 200 in 6.6066 ms
10/24/2022 22:08:47 HTTP "POST" "/graphql" responded 200 in 1.8110 ms
10/24/2022 22:08:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:08:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:48 HTTP "POST" "/graphql" responded 200 in 19.8119 ms
10/24/2022 22:08:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:08:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:49 HTTP "POST" "/graphql" responded 200 in 9.0888 ms
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 HTTP "POST" "/graphql" responded 200 in 8.5285 ms
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:08:50 HTTP "POST" "/graphql" responded 200 in 8.7722 ms
10/24/2022 22:12:34 Migrations
10/24/2022 22:12:34 20221023001: InitialTables_20221023001
10/24/2022 22:12:34 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:12:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:12:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:36 HTTP "POST" "/graphql" responded 200 in 833.9762 ms
10/24/2022 22:12:42 HTTP "POST" "/graphql" responded 200 in 46.1774 ms
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:12:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:12:57 HTTP "POST" "/graphql" responded 200 in 22.9111 ms
10/24/2022 22:14:33 Migrations
10/24/2022 22:14:33 20221023001: InitialTables_20221023001
10/24/2022 22:14:33 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:14:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:14:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:15:15 Migrations
10/24/2022 22:15:15 20221023001: InitialTables_20221023001
10/24/2022 22:15:15 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:15:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:15:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:15:52 Migrations
10/24/2022 22:15:52 20221023001: InitialTables_20221023001
10/24/2022 22:15:52 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:15:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:15:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:15:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:16:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:16:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:05 HTTP "POST" "/graphql" responded 200 in 10642.4256 ms
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:16:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:16:13 HTTP "POST" "/graphql" responded 200 in 15.4408 ms
10/24/2022 22:22:49 Migrations
10/24/2022 22:22:49 20221023001: InitialTables_20221023001
10/24/2022 22:22:49 20221024001: InitialSeed_20221024001 (current)
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:22:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:22:51 HTTP "POST" "/graphql" responded 200 in 827.1465 ms
10/24/2022 22:23:06 HTTP "POST" "/graphql" responded 400 in 10.6427 ms
10/24/2022 22:23:07 HTTP "POST" "/graphql" responded 400 in 0.2705 ms
10/24/2022 22:23:12 HTTP "POST" "/graphql" responded 200 in 46.2531 ms
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:23:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:23:18 HTTP "POST" "/graphql" responded 200 in 19.2336 ms
10/24/2022 22:24:03 HTTP "POST" "/graphql" responded 400 in 5.1163 ms
10/24/2022 22:24:04 HTTP "POST" "/graphql" responded 400 in 0.2392 ms
10/24/2022 22:25:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:25:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:25:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:25:00 HTTP "POST" "/graphql" responded 200 in 26.0196 ms
10/24/2022 22:25:24 HTTP "POST" "/graphql" responded 200 in 4.3450 ms
10/24/2022 22:25:24 HTTP "POST" "/graphql" responded 200 in 4.9724 ms
10/24/2022 22:25:25 HTTP "POST" "/graphql" responded 200 in 1.0710 ms
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/24/2022 22:25:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/24/2022 22:25:33 HTTP "POST" "/graphql" responded 200 in 16.9255 ms
10/25/2022 09:50:08 Migrations
10/25/2022 09:50:08 20221023001: InitialTables_20221023001
10/25/2022 09:50:08 20221024001: InitialSeed_20221024001 (current)
10/25/2022 09:50:09 HTTP "POST" "/graphql" responded 200 in 794.4626 ms
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:13 HTTP "POST" "/graphql" responded 200 in 332.2024 ms
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:16 HTTP "POST" "/graphql" responded 200 in 16.0652 ms
10/25/2022 09:50:19 HTTP "POST" "/graphql" responded 200 in 2.3799 ms
10/25/2022 09:50:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 09:50:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:20 HTTP "POST" "/graphql" responded 200 in 31.7115 ms
10/25/2022 09:50:21 HTTP "POST" "/graphql" responded 200 in 1.0955 ms
10/25/2022 09:50:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
10/25/2022 09:50:22 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
10/25/2022 09:50:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:22 HTTP "POST" "/graphql" responded 200 in 13.2211 ms
10/25/2022 09:50:26 HTTP "POST" "/graphql" responded 200 in 0.9827 ms
10/25/2022 09:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
10/25/2022 09:50:27 HTTP "POST" "/graphql" responded 200 in 6.8105 ms
10/25/2022 09:50:28 HTTP "POST" "/graphql" responded 200 in 1.0551 ms
10/25/2022 09:50:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
10/25/2022 09:50:30 HTTP "POST" "/graphql" responded 200 in 8.2335 ms
10/25/2022 09:50:34 HTTP "POST" "/graphql" responded 200 in 1.1446 ms
10/25/2022 09:50:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/25/2022 09:50:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:36 HTTP "POST" "/graphql" responded 200 in 11.4486 ms
10/25/2022 09:50:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/25/2022 09:50:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:40 HTTP "POST" "/graphql" responded 200 in 6.4991 ms
10/25/2022 09:50:43 HTTP "POST" "/graphql" responded 200 in 0.9908 ms
10/25/2022 09:50:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:44 HTTP "POST" "/graphql" responded 200 in 5.7018 ms
10/25/2022 09:50:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 09:50:44 HTTP "POST" "/graphql" responded 200 in 4.7052 ms
10/25/2022 09:50:46 HTTP "POST" "/graphql" responded 200 in 0.9919 ms
10/25/2022 09:50:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:47 HTTP "POST" "/graphql" responded 200 in 5.1892 ms
10/25/2022 09:50:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 09:50:51 HTTP "POST" "/graphql" responded 200 in 4.4894 ms
10/25/2022 09:50:53 HTTP "POST" "/graphql" responded 200 in 1.0597 ms
10/25/2022 09:52:31 Migrations
10/25/2022 09:52:31 20221023001: InitialTables_20221023001
10/25/2022 09:52:31 20221024001: InitialSeed_20221024001 (current)
10/25/2022 09:52:32 HTTP "POST" "/graphql" responded 200 in 732.6077 ms
10/25/2022 09:59:02 Migrations
10/25/2022 09:59:02 20221023001: InitialTables_20221023001
10/25/2022 09:59:02 20221024001: InitialSeed_20221024001 (current)
10/25/2022 09:59:15 HTTP "GET" "/graphql-voyager" responded 200 in 125.7920 ms
10/25/2022 09:59:16 HTTP "GET" "/favicon.ico" responded 404 in 0.0596 ms
10/25/2022 09:59:17 HTTP "POST" "/graphql" responded 200 in 770.2876 ms
10/25/2022 09:59:24 HTTP "GET" "/graphql-voyager" responded 200 in 2.6481 ms
10/25/2022 09:59:24 HTTP "POST" "/graphql" responded 200 in 2.2290 ms
10/25/2022 10:06:27 HTTP "POST" "/graphql" responded 200 in 4.9906 ms
10/25/2022 10:06:40 HTTP "POST" "/graphql" responded 200 in 1.9750 ms
10/25/2022 10:07:05 HTTP "POST" "/graphql" responded 200 in 1.0875 ms
10/25/2022 10:07:11 HTTP "POST" "/graphql" responded 200 in 2.2998 ms
10/25/2022 10:07:27 HTTP "POST" "/graphql" responded 200 in 1.2718 ms
10/25/2022 10:07:31 HTTP "POST" "/graphql" responded 200 in 1.2563 ms
10/25/2022 10:07:32 HTTP "POST" "/graphql" responded 200 in 1.0195 ms
10/25/2022 10:08:03 HTTP "POST" "/graphql" responded 200 in 1.5689 ms
10/25/2022 10:08:04 HTTP "POST" "/graphql" responded 200 in 1.0128 ms
10/25/2022 10:16:38 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:16:39 HTTP "POST" "/graphql" responded 500 in 271.0525 ms
10/25/2022 10:18:51 HTTP "GET" "/graphql-voyager" responded 200 in 4.2436 ms
10/25/2022 10:18:51 HTTP "POST" "/graphql" responded 200 in 1.1852 ms
10/25/2022 10:19:55 HTTP "GET" "/graphql-voyager" responded 200 in 2.1132 ms
10/25/2022 10:19:55 HTTP "POST" "/graphql" responded 200 in 1.5362 ms
10/25/2022 10:19:59 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:19:59 HTTP "POST" "/graphql" responded 500 in 64.7769 ms
10/25/2022 10:20:01 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:20:01 HTTP "POST" "/graphql" responded 500 in 60.1130 ms
10/25/2022 10:20:02 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:20:02 HTTP "POST" "/graphql" responded 500 in 53.5386 ms
10/25/2022 10:20:03 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:20:03 HTTP "POST" "/graphql" responded 500 in 53.6710 ms
10/25/2022 10:20:13 Migrations
10/25/2022 10:20:13 20221023001: InitialTables_20221023001
10/25/2022 10:20:13 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:20:19 Migrations
10/25/2022 10:20:19 20221023001: InitialTables_20221023001
10/25/2022 10:20:19 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:20:29 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, original_price, current_price, quantity_in_stock, brand, gender)
VALUES (@name, @original_price, @current_price, @quantity_in_stock, @brand, @gender)
RETURNING *"
10/25/2022 10:20:30 HTTP "POST" "/graphql" responded 500 in 882.6588 ms
10/25/2022 10:21:56 Migrations
10/25/2022 10:21:56 20221023001: InitialTables_20221023001
10/25/2022 10:21:56 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:21:57 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retial_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:21:57 HTTP "POST" "/graphql" responded 500 in 929.2094 ms
10/25/2022 10:22:13 Migrations
10/25/2022 10:22:13 20221023001: InitialTables_20221023001
10/25/2022 10:22:13 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:22:16 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retaill_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:22:17 HTTP "POST" "/graphql" responded 500 in 877.5140 ms
10/25/2022 10:22:26 Migrations
10/25/2022 10:22:26 20221023001: InitialTables_20221023001
10/25/2022 10:22:26 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:22:27 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:22:27 HTTP "POST" "/graphql" responded 500 in 866.6377 ms
10/25/2022 10:22:58 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:22:59 HTTP "POST" "/graphql" responded 500 in 134.0868 ms
10/25/2022 10:30:08 HTTP "POST" "/graphql" responded 200 in 39.9914 ms
10/25/2022 10:30:14 HTTP "POST" "/graphql" responded 200 in 1.5107 ms
10/25/2022 10:30:27 Migrations
10/25/2022 10:30:27 20221023001: InitialTables_20221023001
10/25/2022 10:30:27 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:30:39 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:30:39 HTTP "POST" "/graphql" responded 500 in 838.0618 ms
10/25/2022 10:32:21 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:32:57 HTTP "POST" "/graphql" responded 500 in 36467.8288 ms
10/25/2022 10:42:50 Migrations
10/25/2022 10:42:50 20221023001: InitialTables_20221023001
10/25/2022 10:42:50 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:44:14 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:44:15 HTTP "POST" "/graphql" responded 500 in 897.4448 ms
10/25/2022 10:47:02 Migrations
10/25/2022 10:47:02 20221023001: InitialTables_20221023001
10/25/2022 10:47:02 20221024001: InitialSeed_20221024001 (current)
10/25/2022 10:47:14 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 10:47:14 HTTP "POST" "/graphql" responded 500 in 5241.9922 ms
10/25/2022 11:07:07 Migrations
10/25/2022 11:07:07 20221023001: InitialTables_20221023001
10/25/2022 11:07:07 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:07:59 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 11:08:26 HTTP "POST" "/graphql" responded 500 in 43254.8639 ms
10/25/2022 11:09:05 Migrations
10/25/2022 11:09:05 20221023001: InitialTables_20221023001
10/25/2022 11:09:05 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:09:35 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 11:09:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:10:29 HTTP "POST" "/graphql" responded 200 in 65399.2711 ms
10/25/2022 11:10:50 Migrations
10/25/2022 11:10:50 20221023001: InitialTables_20221023001
10/25/2022 11:10:50 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:10:51 HTTP "POST" "/graphql" responded 200 in 717.4112 ms
10/25/2022 11:10:52 HTTP "POST" "/graphql" responded 200 in 2.1136 ms
10/25/2022 11:11:15 HTTP "POST" "/graphql" responded 200 in 1.7536 ms
10/25/2022 11:11:16 HTTP "POST" "/graphql" responded 200 in 1.0098 ms
10/25/2022 11:14:52 HTTP "POST" "/graphql" responded 200 in 1.1563 ms
10/25/2022 11:14:57 HTTP "POST" "/graphql" responded 200 in 1.0031 ms
10/25/2022 11:14:58 HTTP "POST" "/graphql" responded 200 in 1.0025 ms
10/25/2022 11:15:36 HTTP "POST" "/graphql" responded 200 in 1.0594 ms
10/25/2022 11:15:38 HTTP "POST" "/graphql" responded 200 in 2.7106 ms
10/25/2022 11:15:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
10/25/2022 11:15:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:15:42 HTTP "POST" "/graphql" responded 200 in 96.5468 ms
10/25/2022 11:16:02 HTTP "POST" "/graphql" responded 200 in 1.0793 ms
10/25/2022 11:17:58 HTTP "GET" "/graphql-voyager" responded 200 in 53.4982 ms
10/25/2022 11:17:58 HTTP "POST" "/graphql" responded 200 in 2.4326 ms
10/25/2022 11:25:32 Migrations
10/25/2022 11:25:32 20221023001: InitialTables_20221023001
10/25/2022 11:25:32 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:33:48 Migrations
10/25/2022 11:33:48 20221023001: InitialTables_20221023001
10/25/2022 11:33:48 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:33:53 HTTP "POST" "/graphql" responded 200 in 736.6437 ms
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:33:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:33:54 HTTP "POST" "/graphql" responded 200 in 166.7031 ms
10/25/2022 11:33:55 HTTP "POST" "/graphql" responded 200 in 3.0888 ms
10/25/2022 11:33:59 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, retail_price = @retail_price, current_price = @current_price, description = @description, features = @features, sku = @sku, brand_id = @brand_id, category_id = @category_id, gender = @gender
WHERE id = @id 
RETURNING *"
10/25/2022 11:34:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 11:34:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 11:34:14 HTTP "POST" "/graphql" responded 200 in 14216.4424 ms
10/25/2022 11:47:31 Migrations
10/25/2022 11:47:31 20221023001: InitialTables_20221023001
10/25/2022 11:47:31 20221024001: InitialSeed_20221024001 (current)
10/25/2022 11:47:31 HTTP "GET" "/graphql-voyager" responded 200 in 62.0424 ms
10/25/2022 11:47:32 HTTP "POST" "/graphql" responded 200 in 742.8533 ms
10/25/2022 12:15:00 Migrations
10/25/2022 12:15:00 20221023001: InitialTables_20221023001
10/25/2022 12:15:00 20221024001: InitialSeed_20221024001 (current)
10/25/2022 12:15:16 Migrations
10/25/2022 12:15:16 20221023001: InitialTables_20221023001
10/25/2022 12:15:16 20221024001: InitialSeed_20221024001 (current)
10/25/2022 12:16:12 HTTP "POST" "/graphql" responded 200 in 726.1587 ms
10/25/2022 12:16:12 HTTP "POST" "/graphql" responded 200 in 6.9441 ms
10/25/2022 12:16:33 HTTP "POST" "/graphql" responded 200 in 2.0241 ms
10/25/2022 12:16:34 HTTP "POST" "/graphql" responded 200 in 1.1019 ms
10/25/2022 12:16:56 HTTP "POST" "/graphql" responded 200 in 1.1185 ms
10/25/2022 12:16:58 HTTP "POST" "/graphql" responded 200 in 1.0916 ms
10/25/2022 12:17:13 HTTP "POST" "/graphql" responded 200 in 1.1162 ms
10/25/2022 12:17:14 HTTP "POST" "/graphql" responded 200 in 1.1204 ms
10/25/2022 12:17:24 HTTP "POST" "/graphql" responded 200 in 1.5716 ms
10/25/2022 12:17:25 HTTP "POST" "/graphql" responded 200 in 1.2403 ms
10/25/2022 12:18:32 HTTP "POST" "/graphql" responded 200 in 1.4211 ms
10/25/2022 12:18:36 HTTP "POST" "/graphql" responded 200 in 1.2263 ms
10/25/2022 12:18:45 HTTP "POST" "/graphql" responded 200 in 1.0416 ms
10/25/2022 12:18:45 HTTP "POST" "/graphql" responded 200 in 1.5842 ms
10/25/2022 12:18:46 HTTP "POST" "/graphql" responded 200 in 1.8901 ms
10/25/2022 12:19:04 HTTP "POST" "/graphql" responded 200 in 1.1524 ms
10/25/2022 12:19:23 HTTP "POST" "/graphql" responded 200 in 1.1050 ms
10/25/2022 12:19:29 HTTP "POST" "/graphql" responded 200 in 1.2009 ms
10/25/2022 12:20:03 HTTP "POST" "/graphql" responded 500 in 130.6800 ms
10/25/2022 12:38:26 Migrations
10/25/2022 12:38:26 20221023001: InitialTables_20221023001
10/25/2022 12:38:26 20221024001: InitialSeed_20221024001 (current)
10/25/2022 12:38:29 ====== Postgres Call -> SQL ======
	"INSERT INTO brand(name) VALUES (@name)"
10/25/2022 12:38:29 HTTP "POST" "/graphql" responded 500 in 875.1614 ms
10/25/2022 12:39:08 ====== Postgres Call -> SQL ======
	"INSERT INTO brand(name) VALUES (@name)"
10/25/2022 12:39:20 HTTP "POST" "/graphql" responded 500 in 30955.8743 ms
10/25/2022 12:43:01 Migrations
10/25/2022 12:43:01 20221023001: InitialTables_20221023001
10/25/2022 12:43:01 20221024001: InitialSeed_20221024001 (current)
10/25/2022 12:44:04 ====== Postgres Call -> SQL ======
	"INSERT INTO brand(name) VALUES (@name)
RETURNING *"
10/25/2022 12:44:11 HTTP "POST" "/graphql" responded 200 in 12073.8057 ms
10/25/2022 12:44:15 HTTP "POST" "/graphql" responded 200 in 40.8532 ms
10/25/2022 12:45:15 ====== Postgres Call -> SQL ======
	"UPDATE brand SET name=@name WHERE id = @id 
RETURNING *"
10/25/2022 12:45:19 HTTP "POST" "/graphql" responded 200 in 4796.2650 ms
10/25/2022 13:37:16 Migrations
10/25/2022 13:37:16 20221023001: InitialTables_20221023001
10/25/2022 13:37:16 20221024001: InitialSeed_20221024001 (current)
10/25/2022 13:37:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:37:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:37:42 HTTP "POST" "/graphql" responded 200 in 887.4914 ms
10/25/2022 13:45:24 Migrations
10/25/2022 13:45:24 20221023001: InitialTables_20221023001
10/25/2022 13:45:24 20221024001: InitialSeed_20221024001 (current)
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:30 HTTP "POST" "/graphql" responded 200 in 913.9961 ms
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:32 HTTP "POST" "/graphql" responded 200 in 46.4490 ms
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:34 HTTP "POST" "/graphql" responded 200 in 44.8976 ms
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
10/25/2022 13:45:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
10/25/2022 13:45:44 HTTP "POST" "/graphql" responded 200 in 45.6102 ms
10/25/2022 14:34:05 Migrations
10/25/2022 14:34:06 20221023001: InitialTables_20221023001
10/25/2022 14:34:06 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:34:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (@ids)"
"{ ids = System.Collections.Generic.List`1[System.Int32] }"
10/25/2022 14:34:12 HTTP "POST" "/graphql" responded 200 in 1512.6841 ms
10/25/2022 14:34:30 Migrations
10/25/2022 14:34:30 20221023001: InitialTables_20221023001
10/25/2022 14:34:30 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:34:34 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (@ids)"
"{ ids = System.Collections.Generic.List`1[System.Int32] }"
10/25/2022 14:34:34 HTTP "POST" "/graphql" responded 200 in 998.9080 ms
10/25/2022 14:37:06 Migrations
10/25/2022 14:37:06 20221023001: InitialTables_20221023001
10/25/2022 14:37:06 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:37:08 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (@ids)"
"{ ids = System.Int32[] }"
10/25/2022 14:37:08 HTTP "POST" "/graphql" responded 200 in 1047.5607 ms
10/25/2022 14:40:45 Migrations
10/25/2022 14:40:45 20221023001: InitialTables_20221023001
10/25/2022 14:40:45 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:41:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,)"
"{ }"
10/25/2022 14:41:01 HTTP "POST" "/graphql" responded 200 in 1041.9799 ms
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:41:34 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,)"
"{ }"
10/25/2022 14:41:34 HTTP "POST" "/graphql" responded 200 in 156.0598 ms
10/25/2022 14:42:06 Migrations
10/25/2022 14:42:06 20221023001: InitialTables_20221023001
10/25/2022 14:42:06 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:42:35 Migrations
10/25/2022 14:42:35 20221023001: InitialTables_20221023001
10/25/2022 14:42:35 20221024001: InitialSeed_20221024001 (current)
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:42:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 14:42:36 HTTP "POST" "/graphql" responded 200 in 861.7734 ms
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:42:39 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 14:42:39 HTTP "POST" "/graphql" responded 200 in 40.6474 ms
10/25/2022 14:43:25 HTTP "POST" "/graphql" responded 200 in 49.9465 ms
10/25/2022 14:45:42 ====== Postgres Call -> SQL ======
	"INSERT INTO product (name, retail_price, current_price, description, features, sku, brand_id, category_id, gender)
VALUES (@name, @retail_price, @current_price, @description, @features, @sku, @brand_id, @category_id, @gender)
RETURNING *"
10/25/2022 14:45:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:45:42 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2)"
"{ }"
10/25/2022 14:45:42 HTTP "POST" "/graphql" responded 200 in 131.5661 ms
10/25/2022 14:45:53 HTTP "POST" "/graphql" responded 200 in 1.4089 ms
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:45:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (21)"
"{ }"
10/25/2022 14:45:54 HTTP "POST" "/graphql" responded 200 in 55.6242 ms
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:46:18 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:46:19 HTTP "POST" "/graphql" responded 200 in 257.8761 ms
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:47:56 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:47:56 HTTP "POST" "/graphql" responded 200 in 219.8528 ms
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:47:58 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:47:58 HTTP "POST" "/graphql" responded 200 in 164.2253 ms
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:48:00 HTTP "POST" "/graphql" responded 200 in 142.7430 ms
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:48:01 HTTP "POST" "/graphql" responded 200 in 135.4134 ms
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:48:11 HTTP "POST" "/graphql" responded 200 in 125.4468 ms
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:48:13 HTTP "POST" "/graphql" responded 200 in 161.0800 ms
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:48:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1,)"
"{ }"
10/25/2022 14:48:13 HTTP "POST" "/graphql" responded 200 in 153.3718 ms
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:49:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 14:49:04 HTTP "POST" "/graphql" responded 200 in 72.5616 ms
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:19 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 14:50:19 HTTP "POST" "/graphql" responded 200 in 88.4556 ms
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:21 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 14:50:21 HTTP "POST" "/graphql" responded 200 in 62.4809 ms
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:27 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 14:50:27 HTTP "POST" "/graphql" responded 200 in 45.6829 ms
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 5 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 4 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 1 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 14:50:39 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 14:50:39 HTTP "POST" "/graphql" responded 200 in 46.0931 ms
10/25/2022 15:02:29 Migrations
10/25/2022 15:02:29 20221023001: InitialTables_20221023001
10/25/2022 15:02:29 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:02:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:02:33 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 15:02:33 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 15:02:33 HTTP "POST" "/graphql" responded 200 in 834.8798 ms
10/25/2022 15:02:39 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:02:39 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 15:02:39 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 15:02:39 HTTP "POST" "/graphql" responded 200 in 23.2977 ms
10/25/2022 15:02:46 Migrations
10/25/2022 15:02:46 20221023001: InitialTables_20221023001
10/25/2022 15:02:46 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:02:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:02:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 15:02:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 15:02:52 HTTP "POST" "/graphql" responded 200 in 821.7778 ms
10/25/2022 15:11:02 Migrations
10/25/2022 15:11:02 20221023001: InitialTables_20221023001
10/25/2022 15:11:02 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:11:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:11:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 15:11:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 15:11:15 HTTP "POST" "/graphql" responded 200 in 834.7352 ms
10/25/2022 15:14:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:14:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 15:14:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 15:14:22 HTTP "POST" "/graphql" responded 200 in 35.4119 ms
10/25/2022 15:14:23 HTTP "POST" "/graphql" responded 200 in 51.9555 ms
10/25/2022 15:14:24 HTTP "POST" "/graphql" responded 200 in 1.4123 ms
10/25/2022 15:14:40 ====== Postgres Call -> SQL ======
	"Update product
SET name = @name, retail_price = @retail_price, current_price = @current_price, description = @description, features = @features, sku = @sku, brand_id = @brand_id, category_id = @category_id, gender = @gender
WHERE id = @id 
RETURNING *"
10/25/2022 15:14:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 15:14:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (5)"
"{ }"
10/25/2022 15:14:40 HTTP "POST" "/graphql" responded 200 in 60.4858 ms
10/25/2022 15:14:42 HTTP "POST" "/graphql" responded 200 in 1.2785 ms
10/25/2022 15:14:43 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:14:43 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (5,4)"
"{ }"
10/25/2022 15:14:43 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 15:14:43 HTTP "POST" "/graphql" responded 200 in 38.9874 ms
10/25/2022 15:14:52 HTTP "POST" "/graphql" responded 200 in 1.2515 ms
10/25/2022 15:14:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product "
"{ }"
10/25/2022 15:14:53 ====== Postgres Call -> SQL ======
	"SELECT * from public.brand"
"{ }"
10/25/2022 15:14:53 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 15:14:53 HTTP "POST" "/graphql" responded 200 in 24.4216 ms
10/25/2022 15:15:12 HTTP "POST" "/graphql" responded 200 in 1.0741 ms
10/25/2022 15:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
"{ id = 7 }"
10/25/2022 15:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 15:15:14 HTTP "POST" "/graphql" responded 200 in 8.1050 ms
10/25/2022 15:15:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
"{ id = 45 }"
10/25/2022 15:15:21 HTTP "POST" "/graphql" responded 200 in 7.2663 ms
10/25/2022 15:15:27 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id = @id"
"{ id = 1 }"
10/25/2022 15:15:27 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1)"
"{ }"
10/25/2022 15:15:27 HTTP "POST" "/graphql" responded 200 in 8.3139 ms
10/25/2022 15:15:29 HTTP "POST" "/graphql" responded 200 in 1.6692 ms
10/25/2022 15:15:31 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
"{ brand = 1 }"
10/25/2022 15:15:31 HTTP "POST" "/graphql" responded 500 in 116.5071 ms
10/25/2022 15:15:32 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
"{ brand = 1 }"
10/25/2022 15:15:32 HTTP "POST" "/graphql" responded 500 in 37.8233 ms
10/25/2022 15:15:35 ====== Postgres Call -> SQL ======
	"SELECT * 
FROM product
Where brand = @brand"
"{ brand = 1 }"
10/25/2022 15:15:35 HTTP "POST" "/graphql" responded 500 in 36.9995 ms
10/25/2022 15:15:50 HTTP "POST" "/graphql" responded 200 in 1.6375 ms
10/25/2022 15:15:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:15:56 HTTP "POST" "/graphql" responded 200 in 5.5374 ms
10/25/2022 15:16:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 15:16:03 HTTP "POST" "/graphql" responded 200 in 50.5398 ms
10/25/2022 15:16:21 HTTP "POST" "/graphql" responded 200 in 1.2042 ms
10/25/2022 15:16:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
"{ }"
10/25/2022 15:16:22 HTTP "POST" "/graphql" responded 200 in 9.2154 ms
10/25/2022 15:16:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category ORDER BY id ASC "
"{ }"
10/25/2022 15:16:25 HTTP "POST" "/graphql" responded 200 in 4.7542 ms
10/25/2022 15:16:27 HTTP "POST" "/graphql" responded 200 in 1.3974 ms
10/25/2022 15:16:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.category WHERE category.id = @id"
"{ id = 2 }"
10/25/2022 15:16:28 HTTP "POST" "/graphql" responded 200 in 6.6180 ms
10/25/2022 15:16:31 HTTP "POST" "/graphql" responded 200 in 1.4361 ms
10/25/2022 15:16:32 HTTP "POST" "/graphql" responded 200 in 1.1940 ms
10/25/2022 15:16:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
"{ }"
10/25/2022 15:16:33 HTTP "POST" "/graphql" responded 200 in 6.6395 ms
10/25/2022 15:16:35 HTTP "POST" "/graphql" responded 200 in 1.0968 ms
10/25/2022 15:16:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
"{ id = 1 }"
10/25/2022 15:16:36 HTTP "POST" "/graphql" responded 200 in 9.2106 ms
10/25/2022 15:16:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
"{ id = 5 }"
10/25/2022 15:16:40 HTTP "POST" "/graphql" responded 200 in 4.9490 ms
10/25/2022 15:16:43 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
"{ id = 45 }"
10/25/2022 15:16:43 HTTP "POST" "/graphql" responded 200 in 5.4404 ms
10/25/2022 15:16:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand WHERE brand.id = @id"
"{ id = 3 }"
10/25/2022 15:16:49 HTTP "POST" "/graphql" responded 200 in 4.6950 ms
10/25/2022 15:16:51 HTTP "POST" "/graphql" responded 200 in 1.1143 ms
10/25/2022 15:16:54 HTTP "POST" "/graphql" responded 200 in 1.3464 ms
10/25/2022 15:16:57 HTTP "POST" "/graphql" responded 200 in 1.1936 ms
10/25/2022 15:16:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.brand ORDER BY id ASC "
"{ }"
10/25/2022 15:16:57 HTTP "POST" "/graphql" responded 200 in 5.7590 ms
10/25/2022 15:24:02 Migrations
10/25/2022 15:24:02 20221023001: InitialTables_20221023001
10/25/2022 15:24:02 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:24:08 HTTP "POST" "/graphql" responded 200 in 722.1292 ms
10/25/2022 15:24:14 HTTP "POST" "/graphql" responded 200 in 2.2421 ms
10/25/2022 15:24:14 HTTP "POST" "/graphql" responded 200 in 2.9782 ms
10/25/2022 15:24:42 HTTP "POST" "/graphql" responded 200 in 1.9177 ms
10/25/2022 15:24:43 HTTP "POST" "/graphql" responded 200 in 1.0931 ms
10/25/2022 15:29:53 Migrations
10/25/2022 15:29:53 20221023001: InitialTables_20221023001
10/25/2022 15:29:53 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:30:10 HTTP "POST" "/graphql" responded 200 in 711.2456 ms
10/25/2022 15:31:29 Migrations
10/25/2022 15:31:29 20221023001: InitialTables_20221023001
10/25/2022 15:31:29 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:31:30 HTTP "POST" "/graphql" responded 200 in 753.9184 ms
10/25/2022 15:31:31 HTTP "POST" "/graphql" responded 200 in 2.0661 ms
10/25/2022 15:31:34 ====== Postgres Call -> SQL ======
	"INSERT INTO category(name, accessory) VALUES (@name, @accessory)
RETURNING *"
10/25/2022 15:31:34 HTTP "POST" "/graphql" responded 200 in 98.6219 ms
10/25/2022 15:35:32 Migrations
10/25/2022 15:35:32 20221023001: InitialTables_20221023001
10/25/2022 15:35:32 20221024001: InitialSeed_20221024001 (current)
10/25/2022 15:35:33 HTTP "POST" "/graphql" responded 200 in 727.0835 ms
10/25/2022 15:35:40 HTTP "POST" "/graphql" responded 200 in 2.5808 ms
10/25/2022 15:35:40 HTTP "POST" "/graphql" responded 200 in 3.5601 ms
10/25/2022 15:36:35 ====== Postgres Call -> SQL ======
	"UPDATE category SET name=@name, accessory=@accessory WHERE id = @id 
RETURNING *"
10/25/2022 15:36:35 HTTP "POST" "/graphql" responded 200 in 102.2950 ms
10/25/2022 15:36:47 ====== Postgres Call -> SQL ======
	"UPDATE category SET name=@name, accessory=@accessory WHERE id = @id 
RETURNING *"
10/25/2022 15:36:47 HTTP "POST" "/graphql" responded 200 in 14.8513 ms
10/25/2022 17:00:06 Migrations
10/25/2022 17:00:06 20221023001: InitialTables_20221023001
10/25/2022 17:00:06 20221024001: InitialSeed_20221024001 (current)
10/25/2022 17:00:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 17:00:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 17:00:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 17:00:12 HTTP "POST" "/graphql" responded 200 in 837.7635 ms
10/25/2022 17:55:12 Migrations
10/25/2022 17:55:12 20221023001: InitialTables_20221023001
10/25/2022 17:55:12 20221024001: InitialSeed_20221024001 (current)
10/25/2022 17:56:11 HTTP "POST" "/graphql" responded 200 in 799.3910 ms
10/25/2022 18:01:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:01:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 18:01:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 18:01:26 HTTP "POST" "/graphql" responded 200 in 244.6538 ms
10/25/2022 18:01:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:01:36 HTTP "POST" "/graphql" responded 200 in 7.8109 ms
10/25/2022 18:01:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:01:38 HTTP "POST" "/graphql" responded 200 in 5.0419 ms
10/25/2022 18:01:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:01:44 HTTP "POST" "/graphql" responded 200 in 4.9224 ms
10/25/2022 18:01:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:01:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 18:01:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 18:01:52 HTTP "POST" "/graphql" responded 200 in 27.6525 ms
10/25/2022 18:02:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:02:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 18:02:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 18:02:10 HTTP "POST" "/graphql" responded 200 in 21.8657 ms
10/25/2022 18:02:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:02:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 18:02:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 18:02:12 HTTP "POST" "/graphql" responded 200 in 20.9485 ms
10/25/2022 18:24:40 Migrations
10/25/2022 18:24:40 20221023001: InitialTables_20221023001
10/25/2022 18:24:40 20221024001: InitialSeed_20221024001 (current)
10/25/2022 18:24:40 20221025001: ProductStockTables_20221025001 (not applied)
10/25/2022 18:24:40 20221025001: ProductStockTables_20221025001 migrating
10/25/2022 18:24:40 Beginning Transaction
10/25/2022 18:24:40 CreateTable size
10/25/2022 18:24:40 CREATE TABLE "public"."size" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(20) NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_size" PRIMARY KEY ("id"));
10/25/2022 18:24:40 => 0.1011814s
10/25/2022 18:24:40 CreateTable color
10/25/2022 18:24:40 CREATE TABLE "public"."color" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(20) NOT NULL, CONSTRAINT "PK_color" PRIMARY KEY ("id"));
10/25/2022 18:24:40 => 0.0095629s
10/25/2022 18:24:40 CreateTable product_stock
10/25/2022 18:24:40 CREATE TABLE "public"."product_stock" ("product_id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "size_id" integer NOT NULL, "color_id" integer NOT NULL, "quantity" integer NOT NULL, CONSTRAINT "PK_product_stock" PRIMARY KEY ("product_id","size_id","color_id"));
10/25/2022 18:24:40 => 0.0096523s
10/25/2022 18:24:40 CreateForeignKey FK_product_stock_product_id_product_id product_stock(product_id) product(id)
10/25/2022 18:24:40 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_product_id_product_id" FOREIGN KEY ("product_id") REFERENCES "public"."product" ("id");
10/25/2022 18:24:40 => 0.0099022s
10/25/2022 18:24:40 CreateForeignKey FK_product_stock_size_id_size_id product_stock(size_id) size(id)
10/25/2022 18:24:40 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_size_id_size_id" FOREIGN KEY ("size_id") REFERENCES "public"."size" ("id");
10/25/2022 18:24:40 => 0.0038716s
10/25/2022 18:24:40 CreateForeignKey FK_product_stock_color_id_color_id product_stock(color_id) color(id)
10/25/2022 18:24:40 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_color_id_color_id" FOREIGN KEY ("color_id") REFERENCES "public"."color" ("id");
10/25/2022 18:24:40 => 0.0036147s
10/25/2022 18:24:40 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221025001,'2022-10-26T01:24:40','ProductStockTables_20221025001');
10/25/2022 18:24:40 Committing Transaction
10/25/2022 18:24:40 20221025001: ProductStockTables_20221025001 migrated
10/25/2022 18:24:40 => 0.0238758s
10/25/2022 18:26:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 18:26:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 18:26:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 18:26:11 HTTP "POST" "/graphql" responded 200 in 922.4039 ms
10/25/2022 18:48:48 Migrations
10/25/2022 18:48:48 20221023001: InitialTables_20221023001
10/25/2022 18:48:48 20221024001: InitialSeed_20221024001
10/25/2022 18:48:48 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 18:50:35 Migrations
10/25/2022 18:50:35 20221023001: InitialTables_20221023001
10/25/2022 18:50:35 20221024001: InitialSeed_20221024001
10/25/2022 18:50:35 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:17:55 Migrations
10/25/2022 19:17:55 20221023001: InitialTables_20221023001
10/25/2022 19:17:55 20221024001: InitialSeed_20221024001
10/25/2022 19:17:55 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:18:27 Migrations
10/25/2022 19:18:27 20221023001: InitialTables_20221023001
10/25/2022 19:18:27 20221024001: InitialSeed_20221024001
10/25/2022 19:18:27 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:18:27 20221025001: ProductStockTables_20221025001 reverting
10/25/2022 19:18:27 Beginning Transaction
10/25/2022 19:18:27 DeleteTable product_stock
10/25/2022 19:18:27 DROP TABLE "public"."product_stock";
10/25/2022 19:18:27 => 0.0195434s
10/25/2022 19:18:27 DeleteTable size
10/25/2022 19:18:27 DROP TABLE "public"."size";
10/25/2022 19:18:27 => 0.0019625s
10/25/2022 19:18:27 DeleteTable color
10/25/2022 19:18:27 DROP TABLE "public"."color";
10/25/2022 19:18:27 => 0.0014094s
10/25/2022 19:18:27 DELETE FROM "public"."VersionInfo" WHERE "Version" = 20221025001;
10/25/2022 19:18:27 Committing Transaction
10/25/2022 19:18:27 20221025001: ProductStockTables_20221025001 reverted
10/25/2022 19:18:27 => 0.028935s
10/25/2022 19:18:52 Migrations
10/25/2022 19:18:52 20221023001: InitialTables_20221023001
10/25/2022 19:18:52 20221024001: InitialSeed_20221024001 (current)
10/25/2022 19:18:52 20221025001: ProductStockTables_20221025001 (not applied)
10/25/2022 19:18:52 20221025001: ProductStockTables_20221025001 migrating
10/25/2022 19:18:52 Beginning Transaction
10/25/2022 19:18:52 CreateTable size
10/25/2022 19:18:52 CREATE TABLE "public"."size" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(20) NOT NULL, "gender" varchar(1) NOT NULL, CONSTRAINT "PK_size" PRIMARY KEY ("id"));
10/25/2022 19:18:52 => 0.0582019s
10/25/2022 19:18:52 CreateTable color
10/25/2022 19:18:52 CREATE TABLE "public"."color" ("id" integer NOT NULL GENERATED ALWAYS AS IDENTITY, "name" varchar(20) NOT NULL, CONSTRAINT "PK_color" PRIMARY KEY ("id"));
10/25/2022 19:18:52 => 0.0078569s
10/25/2022 19:18:52 CreateTable product_stock
10/25/2022 19:18:52 CREATE TABLE "public"."product_stock" ("product_id" integer NOT NULL, "size_id" integer NOT NULL, "color_id" integer NOT NULL, "quantity" integer NOT NULL, CONSTRAINT "PK_product_stock" PRIMARY KEY ("product_id","size_id","color_id"));
10/25/2022 19:18:52 => 0.0058574s
10/25/2022 19:18:52 CreateForeignKey FK_product_stock_product_id_product_id product_stock(product_id) product(id)
10/25/2022 19:18:52 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_product_id_product_id" FOREIGN KEY ("product_id") REFERENCES "public"."product" ("id");
10/25/2022 19:18:52 => 0.0082246s
10/25/2022 19:18:52 CreateForeignKey FK_product_stock_size_id_size_id product_stock(size_id) size(id)
10/25/2022 19:18:52 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_size_id_size_id" FOREIGN KEY ("size_id") REFERENCES "public"."size" ("id");
10/25/2022 19:18:52 => 0.0031753s
10/25/2022 19:18:52 CreateForeignKey FK_product_stock_color_id_color_id product_stock(color_id) color(id)
10/25/2022 19:18:52 ALTER TABLE "public"."product_stock" ADD CONSTRAINT "FK_product_stock_color_id_color_id" FOREIGN KEY ("color_id") REFERENCES "public"."color" ("id");
10/25/2022 19:18:52 => 0.0030454s
10/25/2022 19:18:52 INSERT INTO "public"."VersionInfo" ("Version","AppliedOn","Description") VALUES (20221025001,'2022-10-26T02:18:52','ProductStockTables_20221025001');
10/25/2022 19:18:52 Committing Transaction
10/25/2022 19:18:52 20221025001: ProductStockTables_20221025001 migrated
10/25/2022 19:18:52 => 0.0542961s
10/25/2022 19:27:02 Migrations
10/25/2022 19:27:02 20221023001: InitialTables_20221023001
10/25/2022 19:27:02 20221024001: InitialSeed_20221024001
10/25/2022 19:27:02 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:27:05 HTTP "GET" "/graphql-voyager" responded 200 in 85.6140 ms
10/25/2022 19:27:05 HTTP "GET" "/favicon.ico" responded 404 in 0.0587 ms
10/25/2022 19:27:06 HTTP "POST" "/graphql" responded 200 in 795.1112 ms
10/25/2022 19:27:56 Migrations
10/25/2022 19:27:56 20221023001: InitialTables_20221023001
10/25/2022 19:27:56 20221024001: InitialSeed_20221024001
10/25/2022 19:27:56 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:28:03 HTTP "GET" "/graphql" responded 301 in 13.0358 ms
10/25/2022 19:28:03 HTTP "GET" "/graphql/index.html" responded 200 in 61.0135 ms
10/25/2022 19:28:03 HTTP "GET" "/graphql/static/js/polyfills.14223cd3.js" responded 200 in 1.5291 ms
10/25/2022 19:28:03 HTTP "GET" "/graphql/static/js/917.df80a314.js" responded 200 in 1.2935 ms
10/25/2022 19:28:03 HTTP "GET" "/graphql/static/js/main.7da7210f.js" responded 200 in 0.4112 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/css/styles.d1755a82.chunk.css" responded 200 in 0.5056 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/927.0676b810.chunk.js" responded 200 in 9.3473 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/696.23e5e4e1.chunk.js" responded 200 in 10.2211 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/641.c7e5a908.chunk.js" responded 200 in 8.2206 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/7.ef194ce7.chunk.js" responded 200 in 5.6607 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/568.71498544.chunk.js" responded 200 in 5.5509 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/494.af2a9e30.chunk.js" responded 200 in 25.2339 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/243.082d6152.chunk.js" responded 200 in 19.3938 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/693.b625e9eb.chunk.js" responded 200 in 32.5424 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/manifest.webmanifest" responded 200 in 0.2278 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/favicon.svg" responded 200 in 0.1739 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 12.4656 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/95.4f7bae42.chunk.js" responded 200 in 0.1497 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/619.d2a9edb4.chunk.js" responded 200 in 0.1540 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/document.8402b2ae.chunk.js" responded 200 in 0.2701 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/json.50fb813a.js" responded 200 in 1.1048 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/160.5700f964.chunk.js" responded 200 in 0.1581 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/13.6582dd74.chunk.js" responded 200 in 0.1339 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/319.15add1dd.chunk.js" responded 200 in 0.1075 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/101.e5dcd65e.chunk.js" responded 200 in 0.0894 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/schema.2a88d762.chunk.js" responded 200 in 6.9480 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/media/FiraCode-Medium.1bc138a84f63b384c3f2.woff2" responded 200 in 9.2468 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/editor.a85ce25e.js" responded 200 in 1.8947 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/523.9581171d.chunk.js" responded 200 in 0.1614 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/97.cee6a1a5.chunk.js" responded 200 in 0.1643 ms
10/25/2022 19:28:04 HTTP "GET" "/graphql/static/js/graphql.worker.1e36c99e.js" responded 200 in 3.8727 ms
10/25/2022 19:28:05 HTTP "GET" "/graphql/static/media/codicon.b797181c93b3755f4fa1.ttf" responded 200 in 1.5999 ms
10/25/2022 19:28:05 HTTP "POST" "/graphql" responded 200 in 695.6167 ms
10/25/2022 19:28:05 HTTP "POST" "/graphql" responded 200 in 32.4850 ms
10/25/2022 19:28:36 HTTP "POST" "/graphql" responded 500 in 64.7412 ms
10/25/2022 19:28:37 HTTP "POST" "/graphql" responded 500 in 1.5818 ms
10/25/2022 19:29:28 Migrations
10/25/2022 19:29:28 20221023001: InitialTables_20221023001
10/25/2022 19:29:28 20221024001: InitialSeed_20221024001
10/25/2022 19:29:28 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:29:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY id ASC "
"{ }"
10/25/2022 19:29:29 HTTP "POST" "/graphql" responded 500 in 913.8860 ms
10/25/2022 19:29:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY id ASC "
"{ }"
10/25/2022 19:29:32 HTTP "POST" "/graphql" responded 500 in 69.6789 ms
10/25/2022 19:29:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY id ASC "
"{ }"
10/25/2022 19:29:33 HTTP "POST" "/graphql" responded 500 in 53.7351 ms
10/25/2022 19:30:17 Migrations
10/25/2022 19:30:17 20221023001: InitialTables_20221023001
10/25/2022 19:30:17 20221024001: InitialSeed_20221024001
10/25/2022 19:30:17 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:30:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:30:19 HTTP "POST" "/graphql" responded 200 in 822.0226 ms
10/25/2022 19:30:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:30:22 HTTP "POST" "/graphql" responded 200 in 8.1788 ms
10/25/2022 19:30:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:30:45 HTTP "POST" "/graphql" responded 200 in 4.5778 ms
10/25/2022 19:30:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:30:46 HTTP "POST" "/graphql" responded 200 in 5.7575 ms
10/25/2022 19:30:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:30:53 HTTP "POST" "/graphql" responded 200 in 3.7119 ms
10/25/2022 19:31:43 Migrations
10/25/2022 19:31:43 20221023001: InitialTables_20221023001
10/25/2022 19:31:43 20221024001: InitialSeed_20221024001
10/25/2022 19:31:43 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:31:44 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:31:44 HTTP "POST" "/graphql" responded 200 in 777.1077 ms
10/25/2022 19:34:36 Migrations
10/25/2022 19:34:36 20221023001: InitialTables_20221023001
10/25/2022 19:34:36 20221024001: InitialSeed_20221024001
10/25/2022 19:34:36 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:34:37 HTTP "POST" "/graphql" responded 400 in 553.0012 ms
10/25/2022 19:34:39 HTTP "POST" "/graphql" responded 400 in 0.7279 ms
10/25/2022 19:35:34 Migrations
10/25/2022 19:35:34 20221023001: InitialTables_20221023001
10/25/2022 19:35:34 20221024001: InitialSeed_20221024001
10/25/2022 19:35:34 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:35:40 HTTP "POST" "/graphql" responded 400 in 534.9068 ms
10/25/2022 19:37:03 Migrations
10/25/2022 19:37:03 20221023001: InitialTables_20221023001
10/25/2022 19:37:03 20221024001: InitialSeed_20221024001
10/25/2022 19:37:03 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:37:04 HTTP "POST" "/graphql" responded 400 in 548.6772 ms
10/25/2022 19:37:05 HTTP "POST" "/graphql" responded 400 in 0.7864 ms
10/25/2022 19:37:06 HTTP "POST" "/graphql" responded 400 in 0.2051 ms
10/25/2022 19:37:07 HTTP "POST" "/graphql" responded 400 in 0.2051 ms
10/25/2022 19:37:34 Migrations
10/25/2022 19:37:34 20221023001: InitialTables_20221023001
10/25/2022 19:37:34 20221024001: InitialSeed_20221024001
10/25/2022 19:37:34 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:37:42 HTTP "GET" "/graphql/index.html" responded 200 in 73.6080 ms
10/25/2022 19:37:43 HTTP "GET" "/graphql/favicon.ico" responded 200 in 0.2163 ms
10/25/2022 19:37:43 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 11.2210 ms
10/25/2022 19:37:44 HTTP "POST" "/graphql" responded 200 in 718.3629 ms
10/25/2022 19:37:44 HTTP "POST" "/graphql" responded 200 in 32.7140 ms
10/25/2022 19:38:06 HTTP "GET" "/graphql/index.html" responded 200 in 4.5397 ms
10/25/2022 19:38:06 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 0.1642 ms
10/25/2022 19:38:07 HTTP "POST" "/graphql" responded 200 in 1.2861 ms
10/25/2022 19:38:07 HTTP "POST" "/graphql" responded 200 in 1.5153 ms
10/25/2022 19:38:12 HTTP "GET" "/graphql/static/js/767.d422d435.chunk.js" responded 200 in 0.1975 ms
10/25/2022 19:38:13 HTTP "GET" "/graphql/static/js/625.6e2228cf.chunk.js" responded 200 in 0.2288 ms
10/25/2022 19:38:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:38:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 19:38:58 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 19:38:58 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 19:38:58 HTTP "POST" "/graphql" responded 200 in 208.3958 ms
10/25/2022 19:39:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 19:39:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 19:39:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 19:39:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 19:39:14 HTTP "POST" "/graphql" responded 200 in 24.3250 ms
10/25/2022 19:48:14 Migrations
10/25/2022 19:48:14 20221023001: InitialTables_20221023001
10/25/2022 19:48:14 20221024001: InitialSeed_20221024001
10/25/2022 19:48:14 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 19:48:14 HTTP "GET" "/graphql/index.html" responded 200 in 71.2161 ms
10/25/2022 19:48:15 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 11.3416 ms
10/25/2022 19:48:16 HTTP "POST" "/graphql" responded 200 in 702.4086 ms
10/25/2022 19:48:16 HTTP "POST" "/graphql" responded 200 in 31.8566 ms
10/25/2022 19:48:17 HTTP "GET" "/graphql/static/js/session.4f9b3271.chunk.js" responded 200 in 0.3109 ms
10/25/2022 19:48:17 HTTP "GET" "/graphql/static/js/887.de231e18.chunk.js" responded 200 in 0.1326 ms
10/25/2022 19:51:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product ORDER BY id ASC "
"{ }"
10/25/2022 19:51:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,5,1,4)"
"{ }"
10/25/2022 19:51:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 19:51:05 HTTP "POST" "/graphql" responded 200 in 162.6038 ms
10/25/2022 20:07:16 Migrations
10/25/2022 20:07:16 20221023001: InitialTables_20221023001
10/25/2022 20:07:16 20221024001: InitialSeed_20221024001
10/25/2022 20:07:16 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:08:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:08:42 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:08:42 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:08:42 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:08:42 HTTP "POST" "/graphql" responded 200 in 859.7576 ms
10/25/2022 20:09:11 HTTP "GET" "/graphql/index.html" responded 200 in 63.6434 ms
10/25/2022 20:09:11 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 10.8749 ms
10/25/2022 20:09:12 HTTP "POST" "/graphql" responded 200 in 20.0039 ms
10/25/2022 20:09:12 HTTP "POST" "/graphql" responded 200 in 36.2493 ms
10/25/2022 20:09:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:09:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (2,11,3,4,1)"
"{ }"
10/25/2022 20:09:31 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:09:31 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:09:31 HTTP "POST" "/graphql" responded 200 in 61.9603 ms
10/25/2022 20:12:09 Migrations
10/25/2022 20:12:09 20221023001: InitialTables_20221023001
10/25/2022 20:12:09 20221024001: InitialSeed_20221024001
10/25/2022 20:12:09 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:12:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:12:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (2,11,3,4,1)"
"{ }"
10/25/2022 20:12:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:12:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:12:10 HTTP "POST" "/graphql" responded 200 in 872.3355 ms
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (2,11,3,4,1)"
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:12:11 HTTP "POST" "/graphql" responded 200 in 27.4535 ms
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (2,11,3,4,1)"
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:12:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:12:11 HTTP "POST" "/graphql" responded 200 in 23.9940 ms
10/25/2022 20:12:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:12:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (2,11,3,4,1)"
"{ }"
10/25/2022 20:12:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:12:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:12:12 HTTP "POST" "/graphql" responded 200 in 23.5392 ms
10/25/2022 20:14:28 Migrations
10/25/2022 20:14:28 20221023001: InitialTables_20221023001
10/25/2022 20:14:28 20221024001: InitialSeed_20221024001
10/25/2022 20:14:28 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:14:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:14:31 ====== Postgres Call -> SQL ======
	"SELECT id, value FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:14:31 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:14:31 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:14:31 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:14:31 HTTP "POST" "/graphql" responded 200 in 1041.2442 ms
10/25/2022 20:14:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:14:33 ====== Postgres Call -> SQL ======
	"SELECT id, value FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:14:33 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:14:33 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:14:33 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:14:33 HTTP "POST" "/graphql" responded 200 in 98.4864 ms
10/25/2022 20:15:03 HTTP "GET" "/graphql/index.html" responded 200 in 59.6348 ms
10/25/2022 20:15:04 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 11.3845 ms
10/25/2022 20:15:04 HTTP "POST" "/graphql" responded 200 in 20.8888 ms
10/25/2022 20:15:04 HTTP "POST" "/graphql" responded 200 in 37.5696 ms
10/25/2022 20:15:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:07 HTTP "POST" "/graphql" responded 200 in 118.5594 ms
10/25/2022 20:15:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:10 HTTP "POST" "/graphql" responded 200 in 104.8918 ms
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:11 HTTP "POST" "/graphql" responded 200 in 82.9266 ms
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:11 HTTP "POST" "/graphql" responded 200 in 110.0579 ms
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:13 HTTP "POST" "/graphql" responded 200 in 86.2851 ms
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:15:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:13 HTTP "POST" "/graphql" responded 200 in 81.3899 ms
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:14 HTTP "POST" "/graphql" responded 200 in 83.8832 ms
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:14 HTTP "POST" "/graphql" responded 200 in 85.5069 ms
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:14 HTTP "POST" "/graphql" responded 200 in 83.0002 ms
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:15:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:14 HTTP "POST" "/graphql" responded 200 in 69.8901 ms
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:15 HTTP "POST" "/graphql" responded 200 in 74.4072 ms
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:15:15 HTTP "POST" "/graphql" responded 200 in 76.3627 ms
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:15:15 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:15 HTTP "POST" "/graphql" responded 200 in 75.0511 ms
10/25/2022 20:15:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:15:16 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:15:16 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:15:16 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:15:16 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:15:16 HTTP "POST" "/graphql" responded 200 in 87.0697 ms
10/25/2022 20:16:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:16:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:16:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:16:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:16:11 HTTP "POST" "/graphql" responded 200 in 51.8598 ms
10/25/2022 20:17:08 Migrations
10/25/2022 20:17:08 20221023001: InitialTables_20221023001
10/25/2022 20:17:08 20221024001: InitialSeed_20221024001
10/25/2022 20:17:08 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:17:09 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:09 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:09 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:09 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:17:09 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:17:09 HTTP "POST" "/graphql" responded 200 in 972.2052 ms
10/25/2022 20:17:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:17:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:17:11 HTTP "POST" "/graphql" responded 200 in 84.9224 ms
10/25/2022 20:17:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:17:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:17:12 HTTP "POST" "/graphql" responded 200 in 78.7838 ms
10/25/2022 20:17:40 Migrations
10/25/2022 20:17:40 20221023001: InitialTables_20221023001
10/25/2022 20:17:40 20221024001: InitialSeed_20221024001
10/25/2022 20:17:40 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:17:43 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:43 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:43 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:43 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:17:43 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:17:43 HTTP "POST" "/graphql" responded 200 in 933.5962 ms
10/25/2022 20:17:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:45 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:45 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:45 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:17:45 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:17:45 HTTP "POST" "/graphql" responded 200 in 77.6584 ms
10/25/2022 20:17:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:17:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:17:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:17:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:17:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:17:46 HTTP "POST" "/graphql" responded 200 in 71.1404 ms
10/25/2022 20:19:55 Migrations
10/25/2022 20:19:55 20221023001: InitialTables_20221023001
10/25/2022 20:19:55 20221024001: InitialSeed_20221024001
10/25/2022 20:19:55 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:19:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:19:58 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:19:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:19:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:19:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:19:59 HTTP "POST" "/graphql" responded 200 in 947.6221 ms
10/25/2022 20:19:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:19:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:19:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:20:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:20:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:20:00 HTTP "POST" "/graphql" responded 200 in 81.2602 ms
10/25/2022 20:20:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:20:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:20:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:20:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:20:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:20:01 HTTP "POST" "/graphql" responded 200 in 79.6974 ms
10/25/2022 20:22:34 Migrations
10/25/2022 20:22:34 20221023001: InitialTables_20221023001
10/25/2022 20:22:34 20221024001: InitialSeed_20221024001
10/25/2022 20:22:34 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:22:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:22:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:22:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:22:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:22:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:22:36 HTTP "POST" "/graphql" responded 200 in 930.1681 ms
10/25/2022 20:22:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:22:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:22:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:22:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:22:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:22:40 HTTP "POST" "/graphql" responded 200 in 74.7604 ms
10/25/2022 20:23:01 HTTP "POST" "/graphql" responded 400 in 2.7535 ms
10/25/2022 20:23:02 HTTP "POST" "/graphql" responded 400 in 0.2792 ms
10/25/2022 20:23:03 HTTP "POST" "/graphql" responded 400 in 0.2425 ms
10/25/2022 20:23:03 HTTP "POST" "/graphql" responded 400 in 0.2158 ms
10/25/2022 20:23:04 HTTP "POST" "/graphql" responded 400 in 0.2375 ms
10/25/2022 20:23:46 Migrations
10/25/2022 20:23:46 20221023001: InitialTables_20221023001
10/25/2022 20:23:46 20221024001: InitialSeed_20221024001
10/25/2022 20:23:46 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:23:50 HTTP "GET" "/graphql/index.html" responded 200 in 69.7439 ms
10/25/2022 20:23:50 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 10.9902 ms
10/25/2022 20:23:52 HTTP "POST" "/graphql" responded 200 in 685.8862 ms
10/25/2022 20:23:52 HTTP "POST" "/graphql" responded 200 in 32.6116 ms
10/25/2022 20:23:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:23:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:23:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:23:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:23:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:23:56 HTTP "POST" "/graphql" responded 200 in 250.3414 ms
10/25/2022 20:24:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:24:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:24:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:24:05 HTTP "POST" "/graphql" responded 200 in 80.6715 ms
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:24:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:24:05 HTTP "POST" "/graphql" responded 200 in 82.1298 ms
10/25/2022 20:24:44 Migrations
10/25/2022 20:24:44 20221023001: InitialTables_20221023001
10/25/2022 20:24:44 20221024001: InitialSeed_20221024001
10/25/2022 20:24:44 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:24:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:24:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:24:46 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:24:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:24:46 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:24:46 HTTP "POST" "/graphql" responded 200 in 878.9018 ms
10/25/2022 20:24:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:24:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:24:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:24:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:24:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:24:52 HTTP "POST" "/graphql" responded 200 in 28.0358 ms
10/25/2022 20:25:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:17 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:17 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:17 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:17 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:17 HTTP "POST" "/graphql" responded 200 in 56.5952 ms
10/25/2022 20:25:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:21 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:21 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:21 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:21 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:21 HTTP "POST" "/graphql" responded 200 in 26.7876 ms
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:22 HTTP "POST" "/graphql" responded 200 in 24.7247 ms
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:22 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:22 HTTP "POST" "/graphql" responded 200 in 27.2812 ms
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:23 HTTP "POST" "/graphql" responded 200 in 26.4190 ms
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:23 HTTP "POST" "/graphql" responded 200 in 25.7010 ms
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:23 HTTP "POST" "/graphql" responded 200 in 26.6724 ms
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:24 HTTP "POST" "/graphql" responded 200 in 27.2121 ms
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:24 HTTP "POST" "/graphql" responded 200 in 25.9442 ms
10/25/2022 20:25:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:25:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/25/2022 20:25:25 HTTP "POST" "/graphql" responded 200 in 25.2401 ms
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:26 HTTP "POST" "/graphql" responded 200 in 27.5597 ms
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:26 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:26 HTTP "POST" "/graphql" responded 200 in 25.1658 ms
10/25/2022 20:25:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:40 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:40 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:40 HTTP "POST" "/graphql" responded 200 in 26.1988 ms
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:41 HTTP "POST" "/graphql" responded 200 in 25.4915 ms
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/25/2022 20:25:41 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/25/2022 20:25:41 HTTP "POST" "/graphql" responded 200 in 24.9841 ms
10/25/2022 20:26:55 Migrations
10/25/2022 20:26:55 20221023001: InitialTables_20221023001
10/25/2022 20:26:55 20221024001: InitialSeed_20221024001
10/25/2022 20:26:55 20221025001: ProductStockTables_20221025001 (current)
10/25/2022 20:26:57 HTTP "GET" "/graphql-voyager" responded 200 in 60.3628 ms
10/25/2022 20:26:58 HTTP "POST" "/graphql" responded 200 in 754.2383 ms
10/25/2022 20:31:27 HTTP "GET" "/graphql-voyager" responded 200 in 4.7622 ms
10/25/2022 20:31:27 HTTP "POST" "/graphql" responded 200 in 6.6185 ms
10/26/2022 10:43:10 Migrations
10/26/2022 10:43:10 20221023001: InitialTables_20221023001
10/26/2022 10:43:10 20221024001: InitialSeed_20221024001
10/26/2022 10:43:10 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:44:02 HTTP "GET" "/graphql-voyager" responded 200 in 88.6088 ms
10/26/2022 10:44:03 HTTP "POST" "/graphql" responded 200 in 783.5828 ms
10/26/2022 10:44:08 HTTP "GET" "/graphql" responded 301 in 6.7122 ms
10/26/2022 10:44:09 HTTP "GET" "/graphql/bcp-config.json" responded 200 in 9.0667 ms
10/26/2022 10:44:09 HTTP "POST" "/graphql" responded 200 in 8.0002 ms
10/26/2022 10:44:09 HTTP "POST" "/graphql" responded 200 in 3.3643 ms
10/26/2022 10:44:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:44:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:44:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:44:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 10:44:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:44:11 HTTP "POST" "/graphql" responded 200 in 236.3363 ms
10/26/2022 10:44:26 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:53:15 Migrations
10/26/2022 10:53:15 20221023001: InitialTables_20221023001
10/26/2022 10:53:15 20221024001: InitialSeed_20221024001
10/26/2022 10:53:15 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:53:18 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:54:08 Migrations
10/26/2022 10:54:08 20221023001: InitialTables_20221023001
10/26/2022 10:54:08 20221024001: InitialSeed_20221024001
10/26/2022 10:54:08 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:54:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:55:18 Migrations
10/26/2022 10:55:18 20221023001: InitialTables_20221023001
10/26/2022 10:55:18 20221024001: InitialSeed_20221024001
10/26/2022 10:55:18 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:55:19 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:55:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 10:55:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:55:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:55:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 10:55:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:55:29 HTTP "POST" "/graphql" responded 200 in 10217.1747 ms
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 10:55:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:55:54 HTTP "POST" "/graphql" responded 200 in 84.8220 ms
10/26/2022 10:56:35 Migrations
10/26/2022 10:56:36 20221023001: InitialTables_20221023001
10/26/2022 10:56:36 20221024001: InitialSeed_20221024001
10/26/2022 10:56:36 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:56:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:56:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:56:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:56:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 10:56:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:56:37 HTTP "POST" "/graphql" responded 200 in 894.2707 ms
10/26/2022 10:58:22 Migrations
10/26/2022 10:58:22 20221023001: InitialTables_20221023001
10/26/2022 10:58:22 20221024001: InitialSeed_20221024001
10/26/2022 10:58:22 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 10:58:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:58:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:58:23 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:58:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 10:58:23 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:58:23 HTTP "POST" "/graphql" responded 200 in 893.0052 ms
10/26/2022 10:58:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:58:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:58:24 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:58:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 10:58:24 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 10:58:24 HTTP "POST" "/graphql" responded 200 in 29.3564 ms
10/26/2022 10:58:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:58:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:58:25 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:58:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 10:58:25 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:58:25 HTTP "POST" "/graphql" responded 200 in 26.7529 ms
10/26/2022 10:58:28 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 10:58:28 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 10:58:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 10:58:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 10:58:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 10:58:29 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 10:58:29 HTTP "POST" "/graphql" responded 200 in 50.8291 ms
10/26/2022 11:06:46 Migrations
10/26/2022 11:06:46 20221023001: InitialTables_20221023001
10/26/2022 11:06:46 20221024001: InitialSeed_20221024001
10/26/2022 11:06:46 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:06:47 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:47 HTTP "POST" "/graphql" responded 200 in 996.8376 ms
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:06:49 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:49 HTTP "POST" "/graphql" responded 200 in 34.6119 ms
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:06:51 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:51 HTTP "POST" "/graphql" responded 200 in 30.7990 ms
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:06:52 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:52 HTTP "POST" "/graphql" responded 200 in 32.6871 ms
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:06:53 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:06:53 HTTP "POST" "/graphql" responded 200 in 29.4928 ms
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:06:54 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:54 HTTP "POST" "/graphql" responded 200 in 29.8768 ms
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:06:55 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:06:55 HTTP "POST" "/graphql" responded 200 in 30.1781 ms
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:07:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:07:13 HTTP "POST" "/graphql" responded 200 in 28.3505 ms
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:35 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:35 HTTP "POST" "/graphql" responded 200 in 46.3031 ms
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:36 HTTP "POST" "/graphql" responded 200 in 33.7954 ms
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:07:36 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:36 HTTP "POST" "/graphql" responded 200 in 30.2804 ms
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:37 HTTP "POST" "/graphql" responded 200 in 30.2412 ms
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:37 HTTP "POST" "/graphql" responded 200 in 31.3254 ms
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:37 HTTP "POST" "/graphql" responded 200 in 30.6730 ms
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:37 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:37 HTTP "POST" "/graphql" responded 200 in 30.1172 ms
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:38 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:38 HTTP "POST" "/graphql" responded 200 in 39.5985 ms
10/26/2022 11:07:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:07:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:07:59 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:07:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:07:59 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:07:59 HTTP "POST" "/graphql" responded 200 in 37.4177 ms
10/26/2022 11:08:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:00 HTTP "POST" "/graphql" responded 200 in 26.2841 ms
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:01 HTTP "POST" "/graphql" responded 200 in 25.2912 ms
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:01 HTTP "POST" "/graphql" responded 200 in 42.7392 ms
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:01 HTTP "POST" "/graphql" responded 200 in 24.0731 ms
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:01 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:01 HTTP "POST" "/graphql" responded 200 in 25.6633 ms
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:02 HTTP "POST" "/graphql" responded 200 in 26.2885 ms
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:02 HTTP "POST" "/graphql" responded 200 in 25.9522 ms
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:02 HTTP "POST" "/graphql" responded 200 in 24.6715 ms
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 24.8211 ms
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 24.9095 ms
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 25.3899 ms
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 24.6778 ms
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 25.5683 ms
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:03 HTTP "POST" "/graphql" responded 200 in 25.7011 ms
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:04 HTTP "POST" "/graphql" responded 200 in 34.0156 ms
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:04 HTTP "POST" "/graphql" responded 200 in 26.4439 ms
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:04 HTTP "POST" "/graphql" responded 200 in 26.4780 ms
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:04 HTTP "POST" "/graphql" responded 200 in 25.7574 ms
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:04 HTTP "POST" "/graphql" responded 200 in 25.6386 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 26.7129 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 26.8303 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 27.1442 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 26.1366 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 25.6726 ms
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:05 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:05 HTTP "POST" "/graphql" responded 200 in 27.5020 ms
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:06 HTTP "POST" "/graphql" responded 200 in 25.1347 ms
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:06 HTTP "POST" "/graphql" responded 200 in 27.1270 ms
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:06 HTTP "POST" "/graphql" responded 200 in 26.5964 ms
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:06 HTTP "POST" "/graphql" responded 200 in 29.3270 ms
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:06 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:06 HTTP "POST" "/graphql" responded 200 in 26.8205 ms
10/26/2022 11:08:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:07 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:07 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:07 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:07 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:07 HTTP "POST" "/graphql" responded 200 in 26.8459 ms
10/26/2022 11:08:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:08:10 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:08:10 HTTP "POST" "/graphql" responded 200 in 27.2861 ms
10/26/2022 11:08:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:08:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:08:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:08:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:08:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:08:11 HTTP "POST" "/graphql" responded 200 in 27.5272 ms
10/26/2022 11:09:59 Migrations
10/26/2022 11:09:59 20221023001: InitialTables_20221023001
10/26/2022 11:09:59 20221024001: InitialSeed_20221024001
10/26/2022 11:09:59 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:00 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:00 HTTP "POST" "/graphql" responded 200 in 899.7534 ms
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:02 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:02 HTTP "POST" "/graphql" responded 200 in 82.6186 ms
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:03 HTTP "POST" "/graphql" responded 200 in 33.9044 ms
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:03 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:04 HTTP "POST" "/graphql" responded 200 in 31.1454 ms
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:04 HTTP "POST" "/graphql" responded 200 in 31.7590 ms
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:04 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:04 HTTP "POST" "/graphql" responded 200 in 30.9774 ms
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:08 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:08 HTTP "POST" "/graphql" responded 200 in 30.4090 ms
10/26/2022 11:10:10 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:11 HTTP "POST" "/graphql" responded 200 in 30.8782 ms
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:11 HTTP "POST" "/graphql" responded 200 in 31.7153 ms
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:11 HTTP "POST" "/graphql" responded 200 in 31.4606 ms
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:11 HTTP "POST" "/graphql" responded 200 in 43.0971 ms
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:11 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:11 HTTP "POST" "/graphql" responded 200 in 30.5198 ms
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:12 HTTP "POST" "/graphql" responded 200 in 31.3295 ms
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:12 HTTP "POST" "/graphql" responded 200 in 31.0478 ms
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:12 HTTP "POST" "/graphql" responded 200 in 31.1269 ms
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:12 HTTP "POST" "/graphql" responded 200 in 30.4743 ms
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:12 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:12 HTTP "POST" "/graphql" responded 200 in 31.2164 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 44.9460 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 32.7640 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (2,1)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 33.6365 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 32.2727 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 30.9228 ms
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:13 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:13 HTTP "POST" "/graphql" responded 200 in 33.9362 ms
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (2,1)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:14 HTTP "POST" "/graphql" responded 200 in 33.0990 ms
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product_stock ORDER BY product_id ASC "
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name, gender FROM public.size where id in (3,2)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.color where id in (2,3,1)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.product WHERE product.id in (11,4,2,1)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.category where id in (1,2)"
"{ }"
10/26/2022 11:10:14 ====== Postgres Call -> SQL ======
	"SELECT id, name FROM public.brand where id in (1,2)"
"{ }"
10/26/2022 11:10:14 HTTP "POST" "/graphql" responded 200 in 32.6828 ms
10/26/2022 12:13:52 Migrations
10/26/2022 12:13:52 20221023001: InitialTables_20221023001
10/26/2022 12:13:52 20221024001: InitialSeed_20221024001
10/26/2022 12:13:52 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:14:12 HTTP "POST" "/graphql" responded 200 in 778.0826 ms
10/26/2022 12:14:58 HTTP "POST" "/graphql" responded 200 in 41.4044 ms
10/26/2022 12:14:58 HTTP "POST" "/graphql" responded 200 in 42.5356 ms
10/26/2022 12:15:11 HTTP "POST" "/graphql" responded 200 in 2.1041 ms
10/26/2022 12:17:17 Migrations
10/26/2022 12:17:17 20221023001: InitialTables_20221023001
10/26/2022 12:17:17 20221024001: InitialSeed_20221024001
10/26/2022 12:17:17 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:17:20 HTTP "POST" "/graphql" responded 200 in 732.2201 ms
10/26/2022 12:17:32 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color ORDER BY id ASC "
"{ }"
10/26/2022 12:17:32 HTTP "POST" "/graphql" responded 200 in 89.8902 ms
10/26/2022 12:17:41 HTTP "POST" "/graphql" responded 200 in 2.6334 ms
10/26/2022 12:17:41 HTTP "POST" "/graphql" responded 200 in 1.3248 ms
10/26/2022 12:18:47 Migrations
10/26/2022 12:18:47 20221023001: InitialTables_20221023001
10/26/2022 12:18:47 20221024001: InitialSeed_20221024001
10/26/2022 12:18:47 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:18:52 HTTP "POST" "/graphql" responded 200 in 742.7726 ms
10/26/2022 12:18:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color WHERE color.id = @id"
"{ id = 3 }"
10/26/2022 12:18:53 HTTP "POST" "/graphql" responded 200 in 87.6839 ms
10/26/2022 12:18:57 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color WHERE color.id = @id"
"{ id = 4 }"
10/26/2022 12:18:57 HTTP "POST" "/graphql" responded 200 in 11.6181 ms
10/26/2022 12:19:01 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color WHERE color.id = @id"
"{ id = 1 }"
10/26/2022 12:19:01 HTTP "POST" "/graphql" responded 200 in 3.6761 ms
10/26/2022 12:19:05 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color WHERE color.id = @id"
"{ id = 2 }"
10/26/2022 12:19:05 HTTP "POST" "/graphql" responded 200 in 3.6513 ms
10/26/2022 12:23:59 Migrations
10/26/2022 12:23:59 20221023001: InitialTables_20221023001
10/26/2022 12:23:59 20221024001: InitialSeed_20221024001
10/26/2022 12:23:59 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:24:12 HTTP "POST" "/graphql" responded 200 in 736.7402 ms
10/26/2022 12:24:12 HTTP "POST" "/graphql" responded 200 in 738.7946 ms
10/26/2022 12:24:17 HTTP "POST" "/graphql" responded 200 in 2.8506 ms
10/26/2022 12:24:34 ====== Postgres Call -> SQL ======
	"INSERT INTO color(name) VALUES (@name)
RETURNING *"
10/26/2022 12:24:34 HTTP "POST" "/graphql" responded 200 in 85.8906 ms
10/26/2022 12:27:34 Migrations
10/26/2022 12:27:34 20221023001: InitialTables_20221023001
10/26/2022 12:27:34 20221024001: InitialSeed_20221024001
10/26/2022 12:27:34 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:27:49 HTTP "POST" "/graphql" responded 200 in 746.9154 ms
10/26/2022 12:27:49 HTTP "POST" "/graphql" responded 200 in 745.0521 ms
10/26/2022 12:27:53 HTTP "POST" "/graphql" responded 200 in 3.0842 ms
10/26/2022 12:28:20 ====== Postgres Call -> SQL ======
	"UPDATE color SET name=@name WHERE id = @id 
RETURNING *"
10/26/2022 12:28:20 HTTP "POST" "/graphql" responded 200 in 94.6976 ms
10/26/2022 12:28:54 HTTP "POST" "/graphql" responded 200 in 1.4512 ms
10/26/2022 12:28:55 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color ORDER BY id ASC "
"{ }"
10/26/2022 12:28:55 HTTP "POST" "/graphql" responded 200 in 33.1602 ms
10/26/2022 12:54:43 Migrations
10/26/2022 12:54:43 20221023001: InitialTables_20221023001
10/26/2022 12:54:43 20221024001: InitialSeed_20221024001
10/26/2022 12:54:43 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 12:54:50 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.color ORDER BY id ASC "
"{ }"
10/26/2022 12:54:50 HTTP "POST" "/graphql" responded 200 in 839.3045 ms
10/26/2022 12:55:01 HTTP "POST" "/graphql" responded 200 in 51.1091 ms
10/26/2022 12:55:01 HTTP "POST" "/graphql" responded 200 in 55.4352 ms
10/26/2022 12:55:14 HTTP "POST" "/graphql" responded 200 in 2.5626 ms
10/26/2022 12:55:16 HTTP "POST" "/graphql" responded 200 in 1.4624 ms
10/26/2022 12:55:20 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 12:55:20 HTTP "POST" "/graphql" responded 200 in 9.2335 ms
10/26/2022 12:55:32 HTTP "POST" "/graphql" responded 200 in 1.6160 ms
10/26/2022 12:55:32 HTTP "POST" "/graphql" responded 200 in 1.4937 ms
10/26/2022 12:55:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:48 HTTP "POST" "/graphql" responded 200 in 19.2139 ms
10/26/2022 12:55:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:52 HTTP "POST" "/graphql" responded 200 in 3.7485 ms
10/26/2022 12:55:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:52 HTTP "POST" "/graphql" responded 200 in 5.6196 ms
10/26/2022 12:55:52 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:52 HTTP "POST" "/graphql" responded 200 in 3.8333 ms
10/26/2022 12:55:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:53 HTTP "POST" "/graphql" responded 200 in 4.1937 ms
10/26/2022 12:55:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:53 HTTP "POST" "/graphql" responded 200 in 3.6122 ms
10/26/2022 12:55:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:53 HTTP "POST" "/graphql" responded 200 in 4.5622 ms
10/26/2022 12:55:53 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 12:55:53 HTTP "POST" "/graphql" responded 200 in 4.1264 ms
10/26/2022 12:56:02 HTTP "POST" "/graphql" responded 200 in 1.6351 ms
10/26/2022 12:56:02 HTTP "POST" "/graphql" responded 200 in 2.2433 ms
10/26/2022 12:56:42 ====== Postgres Call -> SQL ======
	"INSERT INTO size(name, gender) VALUES (@name, @gender)
RETURNING *"
10/26/2022 12:56:43 HTTP "POST" "/graphql" responded 500 in 509.7033 ms
10/26/2022 13:00:21 ====== Postgres Call -> SQL ======
	"INSERT INTO size(name, gender) VALUES (@name, @gender)
RETURNING *"
10/26/2022 13:00:21 HTTP "POST" "/graphql" responded 500 in 132.0509 ms
10/26/2022 13:00:24 ====== Postgres Call -> SQL ======
	"INSERT INTO size(name, gender) VALUES (@name, @gender)
RETURNING *"
10/26/2022 13:00:24 HTTP "POST" "/graphql" responded 500 in 58.4995 ms
10/26/2022 13:00:40 Migrations
10/26/2022 13:00:40 20221023001: InitialTables_20221023001
10/26/2022 13:00:40 20221024001: InitialSeed_20221024001
10/26/2022 13:00:40 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 13:00:44 ====== Postgres Call -> SQL ======
	"INSERT INTO size(name, gender) VALUES (@name, @gender)
RETURNING *"
10/26/2022 13:00:44 HTTP "POST" "/graphql" responded 200 in 860.1008 ms
10/26/2022 13:00:47 HTTP "POST" "/graphql" responded 200 in 44.9575 ms
10/26/2022 13:00:48 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:00:48 HTTP "POST" "/graphql" responded 200 in 35.3504 ms
10/26/2022 13:00:54 HTTP "POST" "/graphql" responded 200 in 2.0325 ms
10/26/2022 13:01:01 HTTP "POST" "/graphql" responded 200 in 1.7119 ms
10/26/2022 13:01:01 HTTP "POST" "/graphql" responded 200 in 2.5909 ms
10/26/2022 13:03:32 Migrations
10/26/2022 13:03:32 20221023001: InitialTables_20221023001
10/26/2022 13:03:32 20221024001: InitialSeed_20221024001
10/26/2022 13:03:32 20221025001: ProductStockTables_20221025001 (current)
10/26/2022 13:03:56 HTTP "POST" "/graphql" responded 200 in 740.9985 ms
10/26/2022 13:03:56 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:03:56 HTTP "POST" "/graphql" responded 200 in 93.0519 ms
10/26/2022 13:03:58 HTTP "POST" "/graphql" responded 200 in 2.8615 ms
10/26/2022 13:03:58 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size WHERE size.id = @id"
"{ id = 2 }"
10/26/2022 13:03:59 HTTP "POST" "/graphql" responded 200 in 18.8424 ms
10/26/2022 13:04:00 HTTP "POST" "/graphql" responded 200 in 1.5691 ms
10/26/2022 13:04:02 HTTP "POST" "/graphql" responded 400 in 25.1068 ms
10/26/2022 13:04:22 ====== Postgres Call -> SQL ======
	"UPDATE size SET name=@name, gender=@gender WHERE id = @id 
RETURNING *"
10/26/2022 13:04:22 HTTP "POST" "/graphql" responded 200 in 21.7433 ms
10/26/2022 13:04:28 HTTP "POST" "/graphql" responded 200 in 1.8632 ms
10/26/2022 13:04:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:04:29 HTTP "POST" "/graphql" responded 200 in 3.8740 ms
10/26/2022 13:04:29 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:04:29 HTTP "POST" "/graphql" responded 200 in 5.5188 ms
10/26/2022 13:04:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:04:30 HTTP "POST" "/graphql" responded 200 in 3.8838 ms
10/26/2022 13:04:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:04:30 HTTP "POST" "/graphql" responded 200 in 4.4255 ms
10/26/2022 13:04:30 ====== Postgres Call -> SQL ======
	"SELECT * FROM public.size ORDER BY id ASC "
"{ }"
10/26/2022 13:04:30 HTTP "POST" "/graphql" responded 200 in 4.1062 ms
